import dmstudio.connection.studiocommands.utils as utils
from dmstudio.connection.studiocommands.runner import Runner
import inspect
import logging

logger = logging.getLogger(__name__)

class Command(Runner):
    def __init__(self):
        raise TypeError("This subclass contains functions accessed by the 'Connection' superclass and should not be instantiated separately.")

    def accmlt(self,
                in_i,
                out_o,
                key1_to_10_f=['optional'],
                allrecs_p=0,
                unsorted_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output sub-total file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for totalling.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ALLRECS:     Accumulation flag (0). If set to 1 then all records will be copied to the
        output file showing the cumulative totals.
        required: No; default: 0; range: 0,1

        UNSORTED:     Unsorted flag. Default (0).  Option  Description  0  - An accumulated
        total is written to the OUT file every time the keyfield[s] changes.
        Hence, if the IN file is sorted on the keyfield[s] there will be 1 entry
        in OUT for each keyfield[s] value. If IN is not sorted on the keyfield[s],
        there may be multiple entries for the same keyfield[s] value in the OUT
        file.  1  - The accumulation is over all records with the same keyfield[s]
        value. Hence there will only be 1 entry in OUT for each keyfield[s] value,
        irrespective of whether the IN file is sorted or not. N.B. If UNSORTED=1,
        the cumulative totals option ALLRECS cannot be used. The process will
        automatically set ALLRECS to 0 if UNSORTED=1.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.accmlt).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ACCMLT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def adddd(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. This may be the same as IN for in-place operation; in this
        mode, only implicit fields may be added.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.adddd).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ADDDD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def addmod(self,
                in1_i,
                in2_i,
                out_o,
                tolernce_p=0.001
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Model to be updated (sorted on IJK). Must contain at least the fields XC,
        YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK.
        required: Yes; default: ; range: 

        IN2:     Update model (sorted on IJK).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        TOLERNCE:     Defines the smallest cell that will be included in OUT. Defined as a
        factor of XINC, YINC, ZINC. Default = (0.001).
        required: No; default: 0.001; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.addmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ADDMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def addtri(self,
                wiretr1_i,
                wirept1_i,
                wiretr2_i,
                wirept2_i,
                wiretrou_o,
                wireptou_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR1:     Input wireframe triangle file 1.
        required: Yes; default: ; range: 

        WIREPT1:     Input wireframe point file 1.
        required: Yes; default: ; range: 

        WIRETR2:     Input wireframe triangle file 2.
        required: Yes; default: ; range: 

        WIREPT2:     Input wireframe point file 2.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETROU:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPTOU:     Output wireframe point file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.addtri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ADDTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def aed(self,
            in_i,
            apphlp_i='optional',
            defn_i='optional',
            out_o='optional'
            ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file to be edited. If this file does not exist, it will be created:
        first a definition file will be created (named "name".%) into which you
        enter the required fields, validation info, etc. Then the definition file
        is written out and used to define the IN file, into which you enter data.
        required: Yes; default: ; range: 

        APPHLP:     Input file containing application specific help information that will be
        included in the help display. An alphanumeric field named APPHLP will be
        expected, with a maximum of 56 characters displayed.
        required: No; default: ; range: 

        DEFN:     Definition file. Must contain the following fields:- FIELD, TYPE, LENGTH,
        STORED, FORM, FMIN, FMAX, INCR, VALUES. If neither the input file nor the
        definition file exist, both will be created. If the input file does not
        exist, but a definition file is entered, then the input file will be
        created from the definition file. Whenever a definition file exists, it
        may be used for validation. If both the input and the validation file
        exist, then input file entries will be validated against the definition
        file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Edited output file. If this is not specified, then the input file will be
        overwritten.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.aed).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'AED ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def alfnum(self,
                in_i,
                out_o,
                f1_f,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f2_f='optional',
                f3_f='optional',
                f4_f='optional',
                f5_f='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file containing explicit alphanumeric field(s) to be converted.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing given alphanumeric field(s) converted to numeric.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        F1:     Name of alphanumeric field to be converted.
        required: Yes; default: ; range: 

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F2:     Optional second explicit alphanumeric field to be converted.
        required: No; default: ; range: 

        F3:     Optional third explicit alphanumeric field to be converted.
        required: No; default: ; range: 

        F4:     Optional fourth explicit alphanumeric field to be converted.
        required: No; default: ; range: 

        F5:     Optional fifth explicit alphanumeric field to be converted.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.alfnum).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ALFNUM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def anisoang(self,
                    points_o,
                    planstr_i='optional',
                    sectstr_i='optional',
                    wiretr_i='optional',
                    wirept_i='optional',
                    zone_f='optional',
                    tripts_p=1,
                    planmode_p=1,
                    sectmode_p=1,
                    mindip_p=-90,
                    maxdip_p=90,
                    mindirn_p='optional',
                    maxdirn_p='optional',
                    addsymb_p=0,
                    plansymb_p=216,
                    sectsymb_p=216,
                    wfsymb_p=224,
                    plancol_p=1,
                    sectcol_p=2,
                    wfcol_p=3,
                    symsize_p=2
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PLANSTR:     Input strings, digitised in plan, defining the direction of the
        mineralisation.
        required: No; default: ; range: 

        SECTSTR:     Input strings, digitised in section, defining the dip and dip direction of
        the mineralisation.
        required: No; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: No; default: ; range: 

        WIREPT:     Input wireframe points file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        POINTS:     Output points file including fields SDIP, DIPDIRN, SYMBOL and SYMSIZE.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Optional field in input wireframe triangle file used to identify
        individual solid models. The field will be assigned to points in the
        output POINTS file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        TRIPTS:     Flag to indicate whether the output points file should include points from
        triangles. Default 1.  Option  Description  0  Do not create points from
        triangles. The wireframe is only used for assigning the ZONE field.  1
        Create points from triangles
        required: No; default: 1; range: 0,1

        PLANMODE:     Flag to indicate how the dip direction is calculated from strings that
        have been digitised in plan. Default 1.  Option  Description  1  String
        represents strike direction, and dip direction is 90o to the direction of
        strike.  2  String represents strike direction, and dip direction is 270o
        to the direction of strike.  3  String represents the dip direction.
        required: No; default: 1; range: 1,3

        SECTMODE:     Flag to indicate whether sections are parallel to the dip direction, thus
        giving true dips. Default 1.  Option  Description  1  Sections are not
        parallel to the dip direction, so apparent dips are calculated.  2
        Sections are parallel to the dip direction, so true dips are calculated.
        required: No; default: 1; range: 1,2

        MINDIP:     Minimum value (in degrees) of dip angle to be written to the output points
        file. If a value less than the minimum is calculated it will be rejected.
        Default -90.
        required: No; default: -90; range: -90,90

        MAXDIP:     Maximum value (in degrees) of dip angle to be written to the output points
        file. If a value greater than the maximum is calculated it will be
        rejected. Default +90.
        required: No; default: 90; range: -90,90

        MINDIRN:     Minimum value (in degrees) of dip direction angle to be written to the
        output points file. If a value less than the minimum is calculated it will
        be rejected. Angles are calculated from minimum to maximum in a clockwise
        direction. Hence a minimum of 330o and a maximum of 20o will define a
        window of 50o. If MINDIRN is not defined, or set to absent, it will not be
        used. If MINDIRN is defined it must lie between 0o and 360o. Both MINDIRN
        and MAXDIRN must be specified in order for limits to be applied. The
        default is absent data, so limits will not be applied.
        required: No; default: ; range: 0,360

        MAXDIRN:     Maximum value (in degrees) of dip direction angle to be written to the
        output points file. If a value greater than the maximum is calculated it
        will be rejected. Angles are calculated from minimum to maximum in a
        clockwise direction. Hence a minimum of 330o and a maximum of 20o will
        define a window of 50o. If MAXDIRN is not defined, or set to absent, it
        will not be used. If MAXDIRN is defined it must lie between 0o and 360o.
        Both MINDIRN and MAXDIRN must be specified in order for limits to be
        applied. The default is absent data, so limits will not be applied.
        required: No; default: ; range: 0,360

        ADDSYMB:     Flag to indicate whether symbol fields SYMBOL, COLOUR, DIPDIRN, SDIP and
        SYMSIZE should be added to the output POINTS file.  Option  Description  0
        Do not add symbol fields to POINTS file.  1  Add symbol fields to POINTS
        file.
        required: No; default: 0; range: 0,1

        PLANSYMB:     Symbol code to select symbol to be displayed for points derived from
        digitised plans. Valid values are 201-267. Symbols are shown in the Full
        Description.
        required: No; default: 216; range: 201,276

        SECTSYMB:     Symbol code to select symbol to be displayed for points derived from
        digitised sections. Valid values are 201-267. Symbols are shown in the
        Full Description.
        required: No; default: 216; range: 201,276

        WFSYMB:     Symbol code to select symbol to be displayed for points derived from
        wireframe triangles. Valid values are 201-267. Symbols are shown in the
        Full Description.
        required: No; default: 224; range: 201,276

        PLANCOL:     Colour assigned to symbol to be displayed for points derived from
        digitised plans.
        required: No; default: 1; range: 1,64

        SECTCOL:     Colour assigned to symbol to be displayed for points derived from
        digitised sections.
        required: No; default: 2; range: 1,64

        WFCOL:     Colour assigned to symbol to be displayed for points derived from
        wireframe triangles.
        required: No; default: 3; range: 1,64

        SYMSIZE:     Symbol size in mm.
        required: No; default: 2; range: 0,50

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.anisoang).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ANISOANG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def anova1(self,
                in_i,
                value_f,
                key1_to_10_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file, sorted on required keyfields.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Field for analysis of variance.
        required: Yes; default: ; range: 

        KEY1_to_10:     Keyfield 1 to 10 for replicate observations.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.anova1).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ANOVA1 ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def append(self,
                out_o,
                in1_i='optional',
                in2_i='optional',
                sequence_p=0,
                protodd_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input file 1. This may be a catalogue file. Omit for file prompting. Enter
        a prototype DD (and set PROTODD=1) for selection from a catalogue.
        Otherwise the DD of the first file will be combined with the first IN2
        file (if any) for the output file DD, and only files matching (or a subset
        of) this DD will be appended.
        required: No; default: ; range: 

        IN2:     Input file 2. This may be a catalogue file. Omit for file prompting. Enter
        a catalogue file (and set PROTODD=1) for selection from this catalogue
        using the prototype on IN1. Otherwise the DD of the first file will be
        combined with the first IN1 entry (if any) for the output file DD, and
        only files matching (or a subset of) this DD will be appended. IN2 files
        are appended after IN1 files.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file = file 1 for in place append, if IN1 nor IN2 are NOT catalogue
        files, both are defined, and have identical DDs. If SEQUENCE is set, then
        the output file will contain extra fields FILENAME (A,8) or SEQUENCE (N)
        or both.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SEQUENCE:     Option Description 1, add field FILENAME [A,8] into output file containing
        filenames of each input file. 2, add field SEQUENCE [N] into output file
        containing a file sequence no. [1,2,...] for each file appended. 3, add
        both FILENAME and SEQUENCE fields.
        required: No; default: 0; range: 0,3

        PROTODD:     Option Description 1, Use the file on IN1 as a prototype for selection of
        files from a catalogue on IN2 to be appended. Ignored unless both IN1 and
        IN2 specified.
        required: No; default: 0; range: 0,1

        PRINT:     Option Description 1, Show the output file DD after all files have been
        appended. If neither IN1 nor IN2 are specified, then the file names to be
        appended are prompted for:- Enter DATAMINE file name required, or <return>
        for default, or ] to end.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.append).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'APPEND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def aptotrue(self,
                    in_i,
                    out_o,
                    apdipdir_p,
                    apdip_f='APDIP',
                    trdipdir_f='TRDIPDIR',
                    trdip_f='TRDIP'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file containing the true dip direction and the apparent dip angle
        fields.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing all the fields in the input file plus the true dip
        angle.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        APDIP:     Apparent dip angle. If not specified then APDIP is assumed.
        required: No; default: APDIP; range: 

        TRDIPDIR:     True dip direction angle. If not specified then TRDIPDIR is assumed.
        required: No; default: TRDIPDIR; range: 

        TRDIP:     True dip angle. If not specified then TRDIP will be created.
        required: No; default: TRDIP; range: 

        ----------
        PARAMETERS
        ----------

        APDIPDIR:     Apparent dip direction angle in degrees. This is the azimuth of the
        sections on which the original string data was digitised.
        required: Yes; default: 0; range: 0,360

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.aptotrue).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'APTOTRUE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def astran(self,
                in_i,
                xref_i,
                sampleid_f='SAMPLEID',
                sprefix_p=2,
                sdigits_p=6,
                maxerrs_p='optional',
                update_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input database file.  This file must contain a sample identifier field.
        The default name for this field is SAMPLEID.  It may be either Numeric or
        Alphanumeric. In addition, the IN file will contain a number of other
        fields: the names of elements and compounds to be matched with fields in
        the assay data files. It may also contain fields which are not matched
        such as BHID, FROM, TO, etc.
        required: Yes; default: ; range: 

        XREF:     Required assay name cross-reference file.  This file is used to link the
        names of assay fields in the database file to fields in the assay transfer
        {SIF} file. It is also used to convert results from the assay file to
        database units.  Required fields in the XREF file are:  ELEMENT -- name of
        field in the IN file. Alphanumeric; two words.  UNITS -- units stored in
        the IN file for the current field. Alphanumeric; one word. Allowable units
        are: '%' -- per cent. ppm -- parts per million. ppb -- parts per billion.
        ASSNAM -- name of field in assay transfer file. Alphanumeric; two words.
        There must be at least one record for each assay field in the IN file.
        There must be one record for each alias of a given assay field. An assay
        transfer file may not reference an assay field more than once for a given
        job.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        SAMPLEID:     Optional name of sample identifier field in the IN file. Only required if
        the name of sample identifier field is not "SAMPLEID".
        required: No; default: SAMPLEID; range: 

        ----------
        PARAMETERS
        ----------

        SPREFIX:     Optional parameter to specify number of prefix characters. If "SAMPLEID"
        is numeric, this must be 0 if specified, otherwise it must be less than
        11. (2)
        required: No; default: 2; range: 0,11

        SDIGITS:     Optional parameter to specify number of digits to form numeric portion of
        "SAMPLEID". If "SAMPLEID" is numeric then SDIGIT must lie between 1 and 6.
        If "SAMPLEID" is alpha- numeric, SDIGIT must lie between 0 and 16. (6)
        required: No; default: 6; range: 0,16

        MAXERRS:     Maximum number of errors that will be tolerated before processing is
        aborted.
        required: No; default: ; range: Undefined

        UPDATE:     Controls treatment of previously updated samples.  Option  Description
        (0)  Ignore previously updated samples.  1  Check previously updated
        samples but only update if the assay field has a missing value.  2  As 1
        but overwrite any value in the assay field.
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.astran).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ASTRAN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def attchk(self,
                in_i,
                out_o='optional',
                error_o='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input legend file. The following standard field names are recognized but
        not all need be present in the file :- LEGEND A8 Legend key. DATFIELD A8
        Data field in the input file. DATMIN A12 Minimum value. DATMAX A12 Maximum
        value. DATEXP A40 Match (regular) expression. ATTFIELD A8 Attribute field.
        ATTVALUE A12 Attribute field value. Alternate field names can be supplied
        to the process by specification through the symbolic field names eg
        DATMIN(MIN).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output legend file. Can be the same as the input file.
        required: No; default: ; range: 

        ERROR:     Optional output error file for invalid records.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.attchk).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ATTCHK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def attset(self,
                legend_i,
                in_i,
                out_o,
                datfld1_f='optional',
                datfld2_f='optional',
                datfld3_f='optional',
                datfld4_f='optional',
                datfld5_f='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                attrib5_f='optional',
                mode_p=0,
                inrange_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        LEGEND:     Legend definition file. The following standard field names are expected:
        LEGEND A8 Legend key. DATFIELD A8 Data field in input file. DATMIN A12
        Minimum value. DATMAX A12 Maximum value. DATEXP A40 Match regular
        expression. ATTFIELD A8 Attribute field name. ATTVALUE A12 Attribute field
        value. Alternate field names can be supplied to the process by
        specification through the symbolic field names.
        required: Yes; default: ; range: 

        IN:     Input data file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing the additional attribute fields. May be the same as
        the input file but additional attribute fields will be ignored.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        DATFLD1:     Optional data field. If no DATFIELD field is supplied, then DATFLD1 is
        used to specify the single required data field. Otherwise DATFLD1..5 can
        be used to select a subset of the data fields.
        required: No; default: ; range: 

        DATFLD2:     Second optional data field from those listed in DATFLD.
        required: No; default: ; range: 

        DATFLD3:     Third optional data field
        required: No; default: ; range: 

        DATFLD4:     Fourth optional data field
        required: No; default: ; range: 

        DATFLD5:     Fifth optional data field
        required: No; default: ; range: 

        ATTRIB1:     First optional attribute field. If no ATTFIELD field is specified, then
        ATTRIB1 is used to specify the single required attribute field. Otherwise
        ATTRIB1..5 can be used to select a subset of the attribute fields.
        required: No; default: ; range: 

        ATTRIB2:     Second optional attribute field from those listed in ATTFIELD.
        required: No; default: ; range: 

        ATTRIB3:     Third optional attribute field
        required: No; default: ; range: 

        ATTRIB4:     Fourth optional attribute field
        required: No; default: ; range: 

        ATTRIB5:     Fifth optional attribute field
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODE:     Type of validation to be undertaken(0). Option Description 1 minimum value
        DATMIN used. 2 minimum DATMIN and maximum DATMAX values used. 3 matching
        expression used.
        required: No; default: 0; range: 0,3

        INRANGE:     Type of in-place update (0). Where the attribute field exists in the input
        file, only those values satisfying the range or pattern will be updated if
        set to 1. All records are output.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.attset).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ATTSET ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def autocr(self,
                in_i,
                out_o,
                sampid_f,
                f1_to_10_f=['optional'],
                sampdist_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file. Must contain sample identity field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file includes LAG-L, DISTANCE. R-L the auto correlation function
        and SIGNIC the significance of the auto correlation function for use in
        graphical processes.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Compulsory sample identifier field.
        required: Yes; default: ; range: 

        F1_to_10:     First variable for evaluation. If no variables are selected all variables
        will be processed.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SAMPDIST:     Option Description (0) Distance between sample points to calculate the
        auto-correlation function. If no distance is specified the sample distance
        is lag distance.
        required: No; default: 0; range: Undefined

        PRINT:     >0 Display results on the screen (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.autocr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'AUTOCR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def autovmod(self,
                    vgrams_i,
                    vmodel_o,
                    vsetnum_p,
                    minnugpc_p,
                    minsilpc_p,
                    maxstrct_p,
                    maxit_p,
                    multivar_p,
                    aniso_p,
                    nugget_i='optional',
                    sills_i='optional',
                    structs_i='optional',
                    majorazi_p='optional',
                    majordip_p='optional',
                    semimazi_p='optional',
                    semimdip_p='optional'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        VGRAMS:     A Datamine table (.dm) that contains experimental variograms. It must
        contain the columns GRADE (and GRADE2 for crossvariograms), AVE.DIST,
        NO.PAIRS, VGRAM and VRGRADE.  If fitting anisotropic variograms (ANISO=1),
        it must have the fields WAZI and WDIP or AZI and DIP.  Each experimental
        variogram (defined by a GRADE, GRADE2, (W)AZI and (W)DIP) must be ordered
        by AVE.DIST.  VRGRADE must be consistent for each record of each
        GRADE/GRADE2 combination.
        required: Yes; default: ; range: 

        NUGGET:     File to define fixed nugget values for the variogram model. The file must
        contain GRADE, GRADE2 and NUGGET to define the variable, covariable and
        fixed nugget values respectively. Missing variable/covariable combinations
        will have their nugget value set to 0. If the file is not defined, nugget
        values will be fitted.
        required: No; default: ; range: 

        SILLS:     File to define the cumulative sill value for each variable. It must
        contain the fields GRADE and SILL to define the variable and the
        cumulative sill for that variable. If the file is not defined there will
        be no constraints set on the cumulative sill.
        required: No; default: ; range: 

        STRUCTS:     File to define the allowed structures in the fitted model.  The file must
        contain the MODEL field which should be set to 1 (Spherical),
        3(Exponential) or 4(Gaussian).  It can optionally contain the numeric
        fields RANGEMIN and RANGEMAX to define the minimum and maximum range value
        for that structure - these values can be set to absent if no range is to
        be defined for that structure. If the file does not exist up to 3
        spherical structures will be allowed.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        VMODEL:     Output file for the fitted variogram model(s). If the file already exists
        the model will be appended to the file, otherwise a new file will be
        created.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VSETNUM:     The output model set VSETNUM value.
        required: Yes; default: 1; range: Undefined

        MINNUGPC:     Minimum nugget percent
        required: Yes; default: 1; range: 0,30

        MINSILPC:     Minimum sill percent per structure.
        required: Yes; default: 5; range: 1,9

        MAXSTRCT:     Maximum number of structures.
        required: Yes; default: 3; range: Undefined

        MAXIT:     Maximum number of iterations.
        required: Yes; default: 1000; range: Undefined

        MULTIVAR:     Set to 1 load cross-variograms if present and fit a multivariate variogram
        model suitable for use in cokriging.
        required: Yes; default: 1; range: 0,1

        ANISO:     Set to 1 to fit anisotropic variograms, 0 to fit isotropic variograms.
        required: Yes; default: 1; range: 0,1

        MAJORAZI:     Azimuth of the major direction for the fitting.
        required: No; default: ; range: Undefined

        MAJORDIP:     Set to 1 to fit anisotropic variograms, 0 to fit isotropic variograms.
        required: No; default: ; range: Undefined

        SEMIMAZI:     Set to 1 to fit anisotropic variograms, 0 to fit isotropic variograms.
        required: No; default: ; range: Undefined

        SEMIMDIP:     Set to 1 to fit anisotropic variograms, 0 to fit isotropic variograms.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.autovmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'AUTOVMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def backtr(self,
                refdist_i,
                in1_i,
                out_o,
                normval_f,
                origref_f,
                normref_f,
                backval_f='BACKVAL',
                minnorm_p=-4,
                maxnorm_p=4,
                minback_p=0,
                maxback_p='+',
                lotail_p=1,
                lopar_p=1,
                uptail_p=1,
                uppar_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        REFDIST:     Input file containing the transformation lookup table. The file must
        include the field ORIGREF , containing the original data values, and the
        field NORMREF defining the corresponding normal score values.
        required: Yes; default: ; range: 

        IN1:     Input data file. This must include the normally distributed field NORMVAL
        that is to be back transformed.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing the back transformed values. This contains the same
        data as the IN file, but with the added back transformed data field
        BACKVAL .
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        NORMVAL:     Field in the input data file IN defining the normal score values to be
        back transformed.
        required: Yes; default: ; range: 

        ORIGREF:     Field in the input REFDIST file defining the original data values.
        required: Yes; default: ; range: 

        NORMREF:     Field in the input REFDIST file defining the normal score values.
        required: Yes; default: ; range: 

        BACKVAL:     Field to be created in the output file OUT for the back transformed data
        values. If not specified then the field BACKVAL will be created,
        required: No; default: BACKVAL; range: 

        ----------
        PARAMETERS
        ----------

        MINNORM:     Minimum value of NORMVAL field in IN file to be used for back
        transformation.
        required: No; default: -4; range: Undefined

        MAXNORM:     Maximum value of NORMVAL field in IN file to be used for back
        transformation.
        required: No; default: 4; range: Undefined

        MINBACK:     Minimum value of BACKVAL field to be created in OUT file.
        required: No; default: 0; range: Undefined

        MAXBACK:     Maximum value of BACKVAL field to be created in OUT file.
        required: No; default: +; range: Undefined

        LOTAIL:     Back-transformation method in the lower tail of the distribution to a
        minimum grade of MINBACK .  Option  Description  1,  Linear interpolation.
        2,  Power model interpolation. The power used is defined by LOPAR .
        required: No; default: 1; range: 1,2

        LOPAR:     Power parameter used in back-transformation of grades in the lower tail of
        the distribution to a minimum of MINBACK . LOTAIL must be set to 2.
        required: No; default: 1; range: 0,+

        UPTAIL:     Back-transformation method in the upper tail of the distribution to a
        maximum grade of MAXGRADE .  Option  Description  1,  Linear
        interpolation.  2,  Power model interpolation. The power used is defined
        by UPPAR .  4,  Hyperbolic model extrapolation using power parameter
        defined by UPPAR .
        required: No; default: 1; range: 1,4

        UPPAR:     Power parameter used in back-transformation of grades in the upper tail of
        the distribution to a maximum of MAXGRADE . UPTAIL must be set to 2 or 4.
        required: No; default: 1; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.backtr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'BACKTR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def bhcount(self,
                modelin_i,
                sampin_i,
                modelout_o,
                key_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODELIN:     Input model file. This file is the output MODEL file from ESTIMA
        required: Yes; default: ; range: 

        SAMPIN:     Input sample file. This file is the SAMPOUT file from ESTIMA. The run of
        ESTIMA which created the file must have used the following options: - the
        key field option was selected. - only one output grade field was created.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODELOUT:     Output model file. This is the same as the input model, but with the extra
        field N-BHID.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY:     Name of the field containing the drillhole identification code. This is
        the field specified as the KEY field when running ESTIMA. This will
        usually be BHID, which is the default.
        required: Yes; default: BHID; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.bhcount).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'BHCOUNT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def blkper(self,
                in_i,
                out_o,
                direct_p,
                startpos_p,
                stepsize_p,
                numplane_p,
                smooth_p=0,
                connect_p=1,
                bradjust_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file, which must contain the standard model fields.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output perimeter file. Perimeter values have the format: PVALUE = nnn.mm
        where:- nnn = the plane number. mm = the perimeter number in the plane.
        XP,YP and ZP are true world coordinates.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DIRECT:     Parameter to specify the plane of the output perimeter: 1 = XY, 2 = XZ, 3
        = YZ.
        required: Yes; default: 1; range: 1,3

        STARTPOS:     Value of the coordinate perpendicular to the output plane for the first
        plane.
        required: Yes; default: ; range: Undefined

        STEPSIZE:     Distance between output planes. This must be positive.
        required: Yes; default: ; range: Undefined

        NUMPLANE:     Number of output planes.
        required: Yes; default: ; range: Undefined

        SMOOTH:     Controls perimeter generation (0):  Option  Description  0  Join cell
        corners;  1  Join the midpoints of cell sides in order to smooth the
        outline.
        required: No; default: 0; range: 0,1

        CONNECT:     Controls internal and external perimeter connections.  Option  Description
        0  Do not connect internal and external perimeter connections.  1  Connect
        internal perimeters to external perimeters as a single perimeter.  2
        Create only internal perimeters.
        required: No; default: 1; range: 0,2

        BRADJUST:     Specifies gap to create between coincident segments in bridged parameters
        to assist later evaluation. Only used if @CONNECT=1
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.blkper).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'BLKPER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def blktri(self,
                in_i,
                wiretr_o,
                wirept_o,
                plane_p,
                xsubcell_p,
                ysubcell_p,
                zsubcell_p,
                surface_p,
                class_f='optional',
                modcol_f='optional',
                order_p=0,
                colour_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, and IJK. If it is a Rotated Model then
        it must also include the fields X0, Y0, Z0, ANGLE1, ANGLE2, ANGLE3,
        ROTAXIS1, ROTAXIS2, and ROTAXIS3.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Output wireframe point file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        CLASS:     Field in block model defining multiple zones or seams.
        required: No; default: ; range: 

        MODCOL:     A numeric field to be used to allocate (an integer) wireframe colour. It
        is assumed that colour is related to CLASS. If colour varies within a
        CLASS then the colour corresponding to the first occurrence of each CLASS
        will be used.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLANE:     Plane for interpretation of solid or seam orientation. Values are: 0 -
        solid model, so plane not required. 1 - XY plane (plan) 2 - XZ plane
        (East-West section) 3 - YZ plane (North-South section)
        required: Yes; default: 0; range: 0,3

        XSUBCELL:     Cell division in X direction.
        required: Yes; default: 1; range: 1,20

        YSUBCELL:     Cell division in Y direction.
        required: Yes; default: 1; range: 1,20

        ZSUBCELL:     Cell division in Z direction.
        required: Yes; default: 1; range: 1,20

        SURFACE:     This parameter is used to specify which wireframe surfaces are created: 1
        - outer surface (Solid model only) 2 - inner surface (Solid model only) 3
        - outer and inner surfaces (Solid model only) 4 - bottom surface 5 -top
        surface 6 - both bottom and top surfaces All options apply to a solid
        model (PLANE=0), but only 4,5 and 6 apply to seams (PLANE=1,2,3).
        required: Yes; default: 3; range: 1,6

        ORDER:     If non-zero then the process treats values of the CLASS field as an
        ordered numeric sequence, and infers intermediate values to generate a
        sequence of wireframe seam surfaces. A value of -1 indicates that the
        numeric sequence increases in value with depth, and +1 a decrease with
        depth.
        required: No; default: 0; range: -1,1

        COLOUR:     Colour for output wireframe. Only used if a colour field is not specified
        for MODCOL.
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.blktri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'BLKTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def canon(self,
                in_i,
                sampid_f,
                scores_o='optional',
                f1_to_10_f=['optional'],
                nleft_p=1,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        SCORES:     Optional output file for canonical root scores.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Field containing sample identification
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NLEFT:     Number of fields or variables in left hand part of the variate (1).
        required: No; default: 1; range: 0,64

        PRINT:     > 0 Display results on the screen (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.canon).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CANON ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def cdtran(self,
                in_i,
                out_o,
                x_f,
                y_f,
                z_f,
                newx_f,
                newy_f,
                newz_f,
                protorot_i='optional',
                factor_p=1,
                inverse_p=0,
                print_p=0,
                angle1_p=0,
                angle2_p=0,
                angle3_p=0,
                rotaxis1_p=3,
                rotaxis2_p=1,
                rotaxis3_p=3,
                x0_p=0,
                y0_p=0,
                z0_p=0,
                xr0_p=0,
                yr0_p=0,
                zr0_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file. Must contain at least X , Y and Z explicit numeric fields.
        required: Yes; default: ; range: 

        PROTOROT:     Optional file containing the rotation and translation parameters stored as
        the default of implicit fields ANGLE1, ANGLE2, ANGLE3, X0, Y0, Z0, XMORIG,
        YMORIG, ZMORIG, ROTAXIS1, ROTAXIS2 and ROTAXIS3. Fields XMORIG, YMORIG and
        ZMORIG correspond to parameters XR0, YR0 and ZR0. The other nine fields
        have the same name as the corresponding parameters. If this file is
        specified and has valid values for all twelve fields then the parameter
        entries for rotation and translation are ignored. This file can be created
        using the Rotated Model option in the process PROTOM . Data will then be
        transformed into the local (rotated) coordinate system of the model.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. Will contain all input file fields + NEWX , NEWY and NEWZ.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     X co-ordinate field in input file.
        required: Yes; default: ; range: 

        Y:     Y co-ordinate field in input file.
        required: Yes; default: ; range: 

        Z:     Z co-ordinate field in input file.
        required: Yes; default: ; range: 

        NEWX:     X co-ordinate field in output file. May be the same as X.
        required: Yes; default: ; range: 

        NEWY:     Y co-ordinate field in output file. May be the same as Y.
        required: Yes; default: ; range: 

        NEWZ:     Z co-ordinate field in output file. May be the same as Z.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        FACTOR:     The rotated co-ordinate system units will be e.g. 0.3048 for a grid in
        metres on an unrotated grid in feet (1).
        required: No; default: 1; range: Undefined

        INVERSE:     Option  Description  0  ; rotate from [X,Y,Z] through [ANGLE1,
        ANGLE2,ANGLE3] to [NEWX,NEWY,NEWZ].  1  ; inverse transformation to above;
        X,Y,Z are in rotated system; NEWX,NEWY,NEWZ in unrotated system; ANGLE1-3
        are same angles as for 0.
        required: No; default: 0; range: 0,1

        PRINT:     >=1; display input and output points for each record (0).
        required: No; default: 0; range: 0,1

        ANGLE1:     First rotation angle clockwise in degrees, around axis ROTAXIS1. It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation. (0)
        required: No; default: 0; range: -360,360

        ANGLE2:     Second rotation angle clockwise in degrees, around axis ROTAXIS2. It must
        lie between 360.0 and +360.0. A value of zero indicates no rotation. (0)
        required: No; default: 0; range: -360,360

        ANGLE3:     Third rotation angle clockwise in degrees, around axis ROTAXIS3. It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation. (0)
        required: No; default: 0; range: -360,360

        ROTAXIS1:     Axis around which first rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis. (3)
        required: No; default: 3; range: 0,3

        ROTAXIS2:     Axis around which second rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis. (1)
        required: No; default: 1; range: 0,3

        ROTAXIS3:     Axis around which third rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis. (3)
        required: No; default: 3; range: 0,3

        X0:     X co-ordinate of known point in both systems, in unrotated co-ordinate
        system. (0)
        required: No; default: 0; range: Undefined

        Y0:     Y co-ordinate of known point in both systems, in unrotated co-ordinate
        system. (0)
        required: No; default: 0; range: Undefined

        Z0:     Z co-ordinate of known point in both systems, in unrotated co-ordinate
        system. (0)
        required: No; default: 0; range: Undefined

        XR0:     X co-ordinate of known point in both systems, in rotated co-ordinate
        system. (0)
        required: No; default: 0; range: Undefined

        YR0:     Y co-ordinate of known point in both systems, in rotated co-ordinate
        system. (0)
        required: No; default: 0; range: Undefined

        ZR0:     Z co-ordinate of known point in both systems, in rotated co-ordinate
        system. (0)
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.cdtran).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CDTRAN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def cellconf(self,
                    statmod_i,
                    conf_tbl_o,
                    cutoff_i='See Documentation',
                    conf_plt_o='optional',
                    cutint_p=1,
                    cutmax_p=10,
                    plot_tbl_p=0,
                    display_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        STATMOD:     Created by the CSMODEL process, this model must include at least one
        percentile field - PCxx - where xx is the numeric percentile value. It
        must also include the field MEAN - the average of all the simulated values
        for each cell.
        required: Yes; default: ; range: 

        CUTOFF:     Allows irregular intervals to be used by specifying cutoff values in this
        file.
        required: No - only used if irregular intervals are required; default: ; range: 

        ------
        OUTPUT
        ------

        CONF_TBL:     Output table for displaying confidence for each grade bin defined for
        successive cutoff values.
        required: Yes; default: ; range: 

        CONF_PLT:     Output plot template for displaying confidence for each grade bin defined
        for successive cutoff values.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTINT:     For regular cutoff grades, this field defines the interval between
        successive cutoff grades. Only required if a CUTOFF file has not been
        specified.
        required: No; default: 1; range: 0.00001,9999999

        CUTMAX:     For regular cutoff grades, this field defines the maximum cutoff value.
        Only required if a CUTOFF file has not been specified
        required: No; default: 10; range: 0.00002,9999999

        PLOT_TBL:     Flag to specify whether a plot data table is output. This contains the
        data used to create the CONF_PLT plot files, and could be used to recreate
        the plot in other software, such as Excel. The plot data table name is the
        same as the plot file, except that "_P" is replaced by "_T".
        required: No; default: 0; range: 0,1

        DISPLAY:     Flag to display whether plot files are displayed as the process is run.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.cellconf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CELLCONF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def channl3d(self,
                    survpts_i,
                    sample1_i,
                    out_o,
                    sample2_to_6_i=['optional'],
                    chansmry_o='optional',
                    errors_o='optional',
                    bhid_f='BHID',
                    xpt_f='XPT',
                    ypt_f='YPT',
                    zpt_f='ZPT',
                    from_f='FROM',
                    to_f='TO',
                    extend_p=1,
                    endpoint_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SURVPTS:     Survey data point file containing channel identifier and 3D coordinates.
        Expects fields BHID, XPT, YPT, ZPT. The points must be sorted by location
        along the channel.
        required: Yes; default: ; range: 

        SAMPLE1:     First sample data file. This file is compulsory and must include fields
        BHID, FROM, and TO. It will probably also include at least one sample
        attribute field, such as grade or lithology.
        required: Yes; default: ; range: 

        SAMPLE2-6:     Five optional sample data files containing BHID, FROM and TO, and probably
        at least one sample attribute field.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output desurveyed sample data file. This will include fields BHID, FROM,
        TO, LENGTH, X, Y, Z, A0, B0, and all other fields which were included in
        the sample file(s). The X, Y and Z fields are the coordinates of the
        centre of each sample. The A0 and B0 fields are the azimuth and dip of the
        sample, respectively.
        required: Yes; default: ; range: 

        CHANSMRY:     Optional output file containing a summary record for each channel in the
        input files. Although the file is optional it is recommended that it is
        created as it can be useful for validating the data, and showing what data
        is missing from which channels.
        required: No; default: ; range: 

        ERRORS:     Optional output file containing a list of samples which do not pass the
        validation tests. These validation tests identify errors in the FROM / TO
        values. These errors will cause the process to fail so it is recommended
        that you create and review the ERRORS file.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Channel identifier
        required: No; default: BHID; range: 

        XPT:     X coordinate of survey point
        required: No; default: XPT; range: 

        YPT:     Ycoordinate of survey point
        required: No; default: YPT; range: 

        ZPT:     Z coordinate of survey point
        required: No; default: ZPT; range: 

        FROM:     Along channel distance to sample start.
        required: No; default: FROM; range: 

        TO:     Along channel distance to sample end
        required: No; default: TO; range: 

        ----------
        PARAMETERS
        ----------

        EXTEND:     Option to extend channel beyond last survey point:  0 - Terminate channel
        at the last survey point.  1 - Extend channel to maximum TO value in the
        input samples files.
        required: No; default: 1; range: 1, 3

        ENDPOINT:     Option to include the X, Y, Z coordinates of the start and end of each
        sample in the desurveyed output file.  0 - Start and end coordinates are
        not included in OUT file.  1 - Fields XSTART, YSTART, ZSTART, XEND, YEND
        and ZEND are created in the OUT file.
        required: No; default: 1; range: 1,4

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.channl3d).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CHANNL3D ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def chart(self,
                in_i,
                proto_i='optional',
                anno_i='optional',
                out_o='optional',
                plot_o='optional',
                x_f='optional',
                y_f='optional',
                weight_f='optional',
                key1_f='optional',
                key2_f='optional',
                key3_f='optional',
                charttyp_p=1,
                histtyp_p=1,
                binsize_p=1,
                binmin_p=0,
                binmax_p='optional',
                binmeth_p=1,
                xtrans_p=1,
                ytrans_p=1,
                logmin_p=0.01,
                frametyp_p=2,
                xfactor_p=1,
                yfactor_p=1,
                append_p=0,
                colflag_p=1,
                legend_p='optional',
                legchsiz_p=3,
                tcharsz_p=3,
                tcolour_p=12,
                xinc_p='optional',
                yinc_p='optional',
                ndx_p='optional',
                ndy_p='optional',
                igrid_p=3,
                fcharsz_p=3,
                fcolour_p=12,
                xpaper_p=240,
                ypaper_p=200,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional',
                progress_p=1,
                display_p=1,
                linetyp1_p=1,
                symbol1_p=92,
                symsize1_p=3,
                colour1_p=12,
                linetyp2_p=0,
                symbol2_p=0,
                symsize2_p=3,
                colour2_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: No; default: ; range: 

        ANNO:     Input file containing annotation for plot axes and title. Must contain the
        fields XANNO, YANNO and TITLE (alpha, explicit). The file should only
        include one record.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output table. If CHARTTYP =3 this will be a histogram table. Otherwise the
        table will contain fields suitable for creating a plot. At least one
        output file ( PLOT or OUT ) must be specified.
        required: No; default: ; range: 

        PLOT:     Output plot file. At least one output file ( PLOT or OUT ) must be
        specified.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field in input file IN to be plotted along the X axis. Not required if
        probability is to be plotted along the X axis XTRANS =4.
        required: No; default: ; range: 

        Y:     Field in input file IN to be plotted along the Y axis. Not required if
        probability is to be plotted along the Y axis YTRANS =4.
        required: No; default: ; range: 

        WEIGHT:     Weighting field in input file IN . Only applicable if histogram ( CHARTTYP
        =3) has been selected.
        required: No; default: ; range: 

        KEY1:     First key field in the input IN file.
        required: No; default: ; range: 

        KEY2:     Second key field in the input IN file.
        required: No; default: ; range: 

        KEY3:     Third key field in the input IN file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CHARTTYP:     Type of chart. Default (1).  Option  Description  1  Scattergram  2  Line
        chart  3  Histogram  For scattergram [1] and histogram [3] the process
        will first sort file IN by key field(s), if key field(s) have been
        specified.
        required: No; default: 1; range: 1, 3

        HISTTYP:     Type of histogram - only used if CHARTTYP =3:  Option  Description  1
        histogram using bin plotting  2  cumulative histogram using bin plotting
        3  histogram using line plotting  4  cumulative histogram using line
        plotting
        required: No; default: 1; range: 1,4

        BINSIZE:     Histogram bin size - only used if CHARTTYP =3. If a log histogram is
        selected then the bin size should still be specified in non-transformed
        units. The process will then recalculate the bin size, so as to create the
        same number of bins as the normal histogram.
        required: No; default: 1; range: Undefined

        BINMIN:     Minimum grade for histogram calculation ( CHARTTYP =3). If the grade is
        less than the minimum and BINMETH =1 the sample will be ignored. If the
        grade is less than the minimum and BINMETH =2 the sample will be assigned
        to the bottom bin.
        required: No; default: 0; range: Undefined

        BINMAX:     Maximum grade for histogram calculation ( CHARTTYP =3). If the grade is
        greater than or equal to the maximum and BINMETH =1 the sample will be
        ignored. If the grade is greater than or equal to the maximum and BINMETH
        =2 the sample will be assigned to the top bin. If undefined then the
        maximum value will be set to the maximum sample value.
        required: No; default: ; range: Undefined

        BINMETH:     Bin selection method for histogram calculation ( CHARTTYP =3):  Option
        Description  1  if grade is less than the minimum or greater than or equal
        to the maximum then the sample will be ignored.  2  if grade is less than
        the minimum or greater than or equal to the maximum then the sample will
        be assigned to the bottom or top bin.
        required: No; default: 1; range: 1,2

        XTRANS:     Transform to be applied to data values plotted on X axis. Default (1).
        Option  Description  1  No transform - X values plotted  2  Log base 10 of
        X values  3  Log base e of X values  4  Probability values [phi]
        calculated from Y values
        required: No; default: 1; range: 1,4

        YTRANS:     Transform to be applied to data values plotted on Y axis. Default (1).
        Option  Description  1  No transform - Y values plotted  2  Log base 10 of
        Y values  3  Log base e of Y values  4  Probability values [phi]
        calculated from X values
        required: No; default: 1; range: 1,4

        LOGMIN:     If X or Y values are less than LOGMIN they are reset to this value before
        a log transform is applied. This is only relevant if XTRANS or YTRANS are
        set to 2 or 3. Default (0.01).
        required: No; default: 0.01; range: 0.0000001,999999

        FRAMETYP:     This parameter defines the type of frame for the plot:  Option
        Description  0  Neither a frame or a title will be plotted.  1  Linear
        scaling will be used irrespective of the values of XTRANS or YTRANS .  2
        If a transform has been selected for either of the axes [ XTRANS >=2 or
        YTRANS >=2] then the frame will include probability and/or log scales as
        appropriate. Also XINC , YINC , NDX and NDY will be ignored.
        required: No; default: 2; range: 0,2

        XFACTOR:     Dividing factor applied to X values before any transform using XTRANS .
        Default (1).
        required: No; default: 1; range: 

        YFACTOR:     Dividing factor applied to Y values before any transform using YTRANS .
        Default (1).
        required: No; default: 1; range: 

        APPEND:     Plot append flag. Default (0):  Option  Description  0  Do not append new
        plot file to existing PLOT file.  1  If PLOT file already exists and is a
        valid plot file then the new plot will be appended to it.
        required: No; default: 0; range: 0,1

        COLFLAG:     Colour flag. Default (1).  Option  Description  0  If the field exists in
        the IN file then it will be ignored.  1  If the field exists in the IN
        file then the field value will be used for the plot and 1 and 2 will be
        ignored. If =1 and a legend is selected then there should only be one
        value for each key field combination; otherwise extra lines will be
        inserted into the legend each time the changes within a key field
        combination.
        required: No; default: 1; range: 0,1

        LEGEND:     Flag to show if legend is required and legend position. Default (0).
        Option  Description  0  no legend  1  top right  2  bottom right  3
        bottom left  4  top left
        required: No; default: ; range: 0,4

        LEGCHSIZ:     Legend character size (3).
        required: No; default: 3; range: Undefined

        TCHARSZ:     Title character size in mm.
        required: No; default: 3; range: Undefined

        TCOLOUR:     Title colour.
        required: No; default: 12; range: Undefined

        XINC:     Grid increment on X axis. Not used if one of the axes has a probability
        scale.
        required: No; default: ; range: Undefined

        YINC:     Grid increment on Y axis. Not used if one of the axes has a probability
        scale.
        required: No; default: ; range: Undefined

        NDX:     Number of decimal places for annotation on X axis. If undefined then an
        appropriate number will be calculated automatically.
        required: No; default: ; range: 0,6

        NDY:     Number of decimal places for annotation on Y axis. If undefined then an
        appropriate number will be calculated automatically.
        required: No; default: ; range: 0,6

        IGRID:     Option  Description  0  frame only;  1  frame + outwards ticks;  2  frame
        + crosses at grid intersections;  3  frame + inwards ticks;  4  grid;  5-9
        as 0-4 minus frame.  10  as 4 but annotation parallel to grid lines.
        11-20  as 1-10 with annotation on right and top as well. Negative values
        of IGRID give an additional frame around the full plot area.
        required: No; default: 3; range: -20,20

        FCHARSZ:     Frame character size in mm.
        required: No; default: 3; range: Undefined

        FCOLOUR:     Frame colour.
        required: No; default: 12; range: Undefined

        XPAPER:     Paper size in mm in X direction.
        required: No; default: 240; range: Undefined

        YPAPER:     Paper size in mm in Y direction.
        required: No; default: 200; range: Undefined

        XMIN:     Minimum value of X for plot. In order for this value to be used two
        parameters from XMIN , XMAX , and XSCALE and two parameters from YMIN ,
        YMAX , and YSCALE must be specified.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot. In order for this value to be used two
        parameters from XMIN , XMAX , and XSCALE and two parameters from YMIN ,
        YMAX , and YSCALE must be specified.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot. In order for this value to be used two
        parameters from XMIN , XMAX , and XSCALE and two parameters from YMIN ,
        YMAX , and YSCALE must be specified.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot. In order for this value to be used two
        parameters from XMIN , XMAX , and XSCALE and two parameters from YMIN ,
        YMAX , and YSCALE must be specified.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre. In order for this value to be
        used two parameters from XMIN , XMAX , and XSCALE and two parameters from
        YMIN , YMAX , and YSCALE must be specified.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre. In order for this value to be
        used two parameters from XMIN , XMAX , and XSCALE and two parameters from
        YMIN , YMAX , and YSCALE must be specified.
        required: No; default: ; range: Undefined

        PROGRESS:     Flag to control amount of output written to Output Window (1).  Option
        Description  0  no output  1  progress messages
        required: No; default: 1; range: 0,1

        DISPLAY:     Flag to select whether or not to display plot file.  Option  Description
        0  do not display plot file  1  display plot file
        required: No; default: 1; range: 0,1

        LINETYP1:     Line type to be used for first key field combination. Default (1). Line
        Types:  Option  Description  1  Solid line  2  Bold line  3  Dashed line
        4  Dotted line  5  Dot-Dash line  6  Just use symbols at data points
        required: No; default: 1; range: 1,6

        SYMBOL1:     Plotted symbol at each point for first key field combination. Default
        (92).  Option  Description  91  Circle (o)  92  Cross (+)  93  Cross (x)
        94  Triangle  95  Box  96  Diamond  97  Star  98  Pie Segment
        required: No; default: 92; range: 91,98

        SYMSIZE1:     Symbol size in millimetres for first key field combination (3). Set to 0
        for no symbol.
        required: No; default: 3; range: Undefined

        COLOUR1:     Line and symbol colour number for first key field combination (1).
        required: No; default: 12; range: Undefined

        LINETYP2:     Line type to be used for second and subsequent key field combinations.
        Default (0). Line Types:  Option  Description  0  Different line types for
        different key field combinations  1  Solid line  2  Bold line  3  Dashed
        line  4  Dotted line  5  Dot-Dash line  6  Just use symbols at data points
        required: No; default: 0; range: 0,6

        SYMBOL2:     Plotted symbol at each point for second and subsequent key field
        combinations. Default (0).  Option  Description  0  Different symbols for
        different key field combinations  91  Circle (o)  92  Cross (+)  93  Cross
        (x)  94  Triangle  95  Box  96  Diamond  97  Star  98  Pie Segment
        required: No; default: 0; range: 0,98

        SYMSIZE2:     Symbol size in millimetres for second and subsequent key field
        combinations (3). Set to 0 for no symbol.
        required: No; default: 3; range: Undefined

        COLOUR2:     Line and symbol colour number for second and subsequent key field
        combinations. Set to (0) for different colours for different key field
        combinations.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.chart).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CHART ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def checkit(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input string file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing validated strings.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.checkit).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CHECKIT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def chktri(self,
                wiretrin_i,
                wireptin_i,
                wiretrou_o,
                wireptou_o,
                remdupid_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETRIN:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPTIN:     Input wireframe point file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETROU:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPTOU:     Output wireframe point file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        REMDUPID:     Set to 1 to remove duplicate PID references from the WIRETROU file (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.chktri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CHKTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def closepts(self,
                    bhid_f,
                    distance_p,
                    holes_i='optional',
                    points_i='optional',
                    closhole_o='optional',
                    closepts_o='optional',
                    bhstr_o='optional',
                    ptsstr_o='optional',
                    x_or_y_or_z_f='X/Y/Z'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        HOLES:     Input drillhole file within which to find closely spaced points. This file
        is optional but one of either the input HOLES or POINTS file must be
        specified. If both a HOLES and POINTS file are specified only the HOLES
        file is processed.
        required: No; default: ; range: 

        POINTS:     Input points or sample file within which to find closely spaced points.
        This file is optional but one of either the input HOLES or POINTS file
        must be specified. If both a HOLES and POINTS file are specified only the
        HOLES file is processed.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        CLOSHOLE:     Output file containing a record for each pair of closely spaced collars in
        the HOLES file. This file is ignored if no HOLES file is specified.
        required: No; default: ; range: 

        CLOSEPTS:     Output file containing a record for each pair of closely spaced sample
        points in the HOLES file, or closely spaced points in the POINTS file.
        required: No; default: ; range: 

        BHSTR:     Output string file containing a two point string for each pair of closely
        spaced collars in the input HOLES file
        required: No; default: ; range: 

        PTSSTR:     Output string file containing a two point string for each pair of closely
        spaced points/samples in the input HOLES or POINTS file
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Name of the field containing the drillhole identification code or a point
        identifier field.
        required: Yes; default: BHID; range: 

        X/Y/Z:     Coordinate field in the input HOLES or POINTS file
        required: No; default: X/Y/Z; range: 

        ----------
        PARAMETERS
        ----------

        DISTANCE:     Distance within which to find closely spaced points.
        required: Yes; default: 2; range: -

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.closepts).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CLOSEPTS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def clustr(self,
                sampid_f,
                in_i='optional',
                matxin_i='optional',
                matxfile_o='optional',
                f1_to_10_f=['optional'],
                mattype_p=0,
                ztran_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Optional raw data input file.
        required: No; default: ; range: 

        MATXIN:     Optional matrix input file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MATXFILE:     Output file containing similarity or dissimilarity matrix.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Field containing sample identification or variable identification if a
        matrix input file is used.
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MATTYPE:     Option  Description  (0)  Product moment correlation matrix. (Similarity
        Matrix). Note, using default value here, must use default value for ZTRAN.
        required: No; default: 0; range: 0,1

        ZTRAN:     Option  Description  0  Z Transformation of data not required to calculate
        matrix. Only applicable for raw data input.  (1)  Z Transformation of data
        required to calculate matrix.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.clustr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CLUSTR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def cogtri(self,
                wtrin_i,
                wptin_i,
                wtrout_o='optional',
                wptout_o='optional',
                ptnout_o='optional',
                vertex_p=0,
                symbol_p=216,
                symsize_p=2
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WTRIN:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WPTIN:     Input wireframe points file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WTROUT:     Output wireframe triangle file. This contains all the fields from the
        input wireframe triangle file and: - XCOG, YCOG, ZCOG: the XYZ coordinates
        of the centre of each triangle. - if parameter VERTEX is set to 1 then the
        fields XP1, YP1, ZP1, XP2, YP2, ZP2, XP3, YP3, ZP3 representing the
        vertices of each triangle will also be included.
        required: No; default: ; range: 

        WPTOUT:     Output wireframe points file. This is a copy of the input wireframe points
        file.
        required: No; default: ; range: 

        PTNOUT:     Output point data file containing the following fields: - XPT, YPT, ZPT:
        the XYZ coordinates of the centre of each triangle. - SDIP, DIPDIRN: the
        dip and dip direction of each triangle, in degrees. - SYMBOL, SYMSIZE: the
        symbol type and symbol size of the rotated symbol.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VERTEX:     Flag specifying whether the coordinates of the vertices of each triangle
        are to be included in the output wireframe triangle file WTROUT:
        required: No; default: 0; range: 0,1

        SYMBOL:     Code for the rotated symbol to be included in field SYMBOL of the output
        point data file PTNOUT. The default value of 216 is a filled arrow.
        required: No; default: 216; range: 0,400

        SYMSIZE:     The size in mm of the rotated symbol.
        required: No; default: 2; range: 0,100

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.cogtri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COGTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def cokrig(self,
                samples_i,
                proto_i,
                epar_i,
                fields_i,
                vmodel_i,
                spar_i,
                outmodel_o,
                sampout_o='optional',
                xpt_f='XPT',
                ypt_f='YPT',
                zpt_f='ZPT',
                zone1_f_f='optional',
                zone2_f_f='optional',
                key_f='optional',
                sangl1_f_f='optional',
                sangl2_f_f='optional',
                sangl3_f_f='optional',
                vangl1_f_f='optional',
                vangl2_f_f='optional',
                vangl3_f_f='optional',
                nthreads_p=-1,
                da_axis1_or_2_or_3_p='3/01/2003'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     A samples file containing sample positional information and supporting
        attributes.  Details of fields are given in the SAMPLES section above.
        required: Yes; default: ; range: 

        PROTO:     Input model prototype.  The input model prototype is a standard block
        model file containing the 13 compulsory fields. It may contain optional
        fields such as zone control. It may also contain the rotated model fields.
        If it includes cells then it must be sorted on IJK.
        required: Yes; default: ; range: 

        EPAR:     The input estimation parameter file used to specify parameters for each
        estimation run.  Compulsory fields are EREFNUM, VSETNUM, SREFNUM, IMETHOD.
        Optional fields are POWER, SDYNAISO, VDYNAISO, DISCX, DISCY, DISCZ, ZONE1,
        ZONE2.  Details of all fields are given in the EPAR section above.
        required: Yes; default: ; range: 

        FIELDS:     A file that contains field names of input variables to be used for
        estimation (which must be present in the SAMPLES file) and output
        variables to be included in the file specified by OUTMODEL.  These must be
        defined for each estimation run under the same EREFNUM value.  Compulsory
        fields are EREFNUM, IN_VAR, EST.  Optional fields are LOC_MEAN, VAR,
        NUMSAMP, WTOFMEAN, SUMPOSWT, CORZZSTR. COVZZSTR, COVZ1SZS, SLPZZSTR,
        VARZSTR, KRIGEFF, LAGRANGE, SINDEX.  Details of all fields are given in
        the FIELDS section above.
        required: Yes; default: ; range: 

        VMODEL:     The input variogram model parameter file.  Compulsory fields are GRADE,
        GRADE2, VSETNUM, VANGLE1, VANGLE2, VANGLE3, VAXIS1, VAXIS2, VAXIS3,
        NUGGET, ST1, ST1PAR1, ST1PAR2, ST1PAR3, ST1PAR4.  Optional fields are
        STiPAR1, STiPAR2, STiPAR3, STiPAR4, i=2,9  Details of all fields are given
        in the VMODEL section above.
        required: Yes; default: ; range: 

        SPAR:     The input search parameter file.  Compulsory fields are SREFNUM, SDIST1,
        SDIST2, SDIST3, SAXIS1, SAXIS2, SAXIS3, SANGLE1, SANGLE2, SANGLE3,
        MINNUM1, MAXNUM1.  Optional fields are SMETHOD, (SVOLFACi, MINNUMi,
        MAXNUMi, i=2,9), NSECTORS, SPLITSEC, MAXEMPSC, MVSEARCH, OPTKEY, MAXKEY.
        Details of all fields are given in the SPAR section above.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUTMODEL:     The output model file containing estimated grades and optional additional
        statistics.
        required: Yes; default: ; range: 

        SAMPOUT:     Output sample file containing details of weights and other statistics for
        each sample for each cell estimated.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        XPT:     X coordinate of sample data in SAMPLES file.
        required: No; default: XPT; range: 

        YPT:     Y coordinate of sample data in SAMPLES file.
        required: No; default: YPT; range: 

        ZPT:     Z coordinate of sample data in SAMPLES file.
        required: No; default: ZPT; range: 

        ZONE1_F:     First field for zonal control. If a field is specified it must be present
        in both the SAMPLES and PROTO files.
        required: No; default: ; range: 

        ZONE2_F:     Second field for zonal control. If a field is specified it must be present
        in both the SAMPLES and PROTO files.
        required: No; default: ; range: 

        KEY:     Key field used to specify the field limiting the number of samples for
        estimation using the optional OPTKEY and MAXKEY parameters in the SPAR
        file. The field must exist in the SAMPLES file.
        required: No; default: ; range: 

        SANGL1_F:     Field containing local angles for first rotation when using search volume
        dynamic anisotropy. Angles must be specified in degrees.
        required: No; default: ; range: 

        SANGL2_F:     Field containing local angles for second rotation when using search volume
        dynamic anisotropy. Angles must be specified in degrees.
        required: No; default: ; range: 

        SANGL3_F:     Field containing local angles for third rotation when using search volume
        dynamic anisotropy. Angles must be specified in degrees.
        required: No; default: ; range: 

        VANGL1_F:     Field containing local angles for first rotation when using variogram
        model dynamic anisotropy. Angles must be specified in degrees.
        required: No; default: ; range: 

        VANGL2_F:     Field containing local angles for second rotation when using variogram
        model dynamic anisotropy. Angles must be specified in degrees.
        required: No; default: ; range: 

        VANGL3_F:     Field containing local angles for third rotation when using variogram
        model dynamic anisotropy. Angles must be specified in degrees.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NTHREADS:     Number of threads to be used for the main calculation. Any value less than
        1 will automatically select the values based on the number of virtual
        cores on the computer.
        required: No; default: -1; range: Undefined

        DA_AXIS1/2/3:     Axis of first/second/third rotation angle used for both search volume and
        variogram model dynamic anisotropy. 1=X, 2=Y, 3=Z.
        required: No; default: 3/01/2003; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.cokrig).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COKRIG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def combmod(self,
                proto_i,
                in1_i,
                in2_i,
                modelout_o,
                in3_to_20_i=['optional'],
                tolernce_p=0.001
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input block model prototype that defines the extents and parent cell size
        of the combined model. Records in this file are ignored. This file is
        optional. If it is not specified models will be combined to fill the
        volume covered by the range of all input files.
        required: Yes; default: ; range: 

        IN1:     First input model for combining (sorted on IJK). If no prototype is
        specified the output combined model prototype will have the same parent
        cell size specification as this file and the limits will be determined
        from the combined range of all input files.
        required: Yes; default: ; range: 

        IN2:     Second input model for combining (sorted on IJK)
        required: Yes; default: ; range: 

        IN3 - 20:     Additional, optional input model files for combining (sorted on IJK)
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODELOUT:     Output combined model
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        TOLERNCE:     Defines the smallest cell that will be included in OUT. Defined as a
        factor of XINC, YINC, ZINC. Default = (0.001).
        required: No; default: 0.001; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.combmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COMBMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def compbe(self,
                in_i,
                out_o,
                interval_p,
                bhid_f='BHID',
                from_f='FROM',
                to_f='TO',
                density_f='DENSITY',
                coreloss_f='CORELOSS',
                corerec_f='COREREC',
                zone_f='optional',
                mingap_p=0.05,
                maxgap_p=0,
                elev_p=0,
                mincomp_p='optional',
                maxcomp_p='optional',
                loss_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Sample data file, sorted on BHID and FROM. Expects fields BHID, FROM, TO,
        LENGTH, X, Y, Z, A0, B0.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Composite file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Drillhole identifier.
        required: No; default: BHID; range: 

        FROM:     Downhole distance to sample top.
        required: No; default: FROM; range: 

        TO:     Downhole distance to sample bottom.
        required: No; default: TO; range: 

        DENSITY:     If present, composites will be density-weighted
        required: No; default: DENSITY; range: 

        CORELOSS:     If present, will be taken as percentage core loss, and treated according
        to the LOSS parameter.
        required: No; default: CORELOSS; range: 

        COREREC:     If present, will be taken as percentage core recovery, (100-core loss) and
        treated according to the LOSS parameter.
        required: No; default: COREREC; range: 

        ZONE:     Name of field for compositing within. (may be numeric or up to 4 character
        alpha). This field must exist in the IN and will be copied to the OUT
        file. If specified then new composites will be created each time the value
        of ZONE changes.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        INTERVAL:     Bench height.
        required: Yes; default: ; range: Undefined

        MINGAP:     Gap length to be ignored. The default gap is calculated as 0.05 INTERVAL.
        This default value is applied if the parameter is not specified, or if the
        value is specified as <=0. A gap of exactly zero is not permitted. If you
        want the composite to be split at every gap, use a very small value for
        MAXGAP eg 0.0001.
        required: No; default: 0.05; range: Undefined

        MAXGAP:     Gap length for termination of composite (0).
        required: No; default: 0; range: Undefined

        ELEV:     Reference bench elevation (0).
        required: No; default: 0; range: Undefined

        MINCOMP:     Minimum composite length [0.5 INTERVAL].
        required: No; default: ; range: Undefined

        MAXCOMP:     Maximum composite length [2.0 INTERVAL].
        required: No; default: ; range: Undefined

        LOSS:     If core loss or core recovery field is present, controls how it is
        handled:  Option  Description  0  Treat loss as part of sample.  1  Treat
        loss as default values.  2  treat as cavity [zero density and grades]
        required: No; default: 0; range: 0,2

        PRINT:     >2 to display each composite and output file DD (0).
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.compbe).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COMPBE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def compbr(self,
                in_i,
                out_o,
                value_f,
                interval_p,
                cutoff_p,
                bhid_f='BHID',
                from_f='FROM',
                to_f='TO',
                density_f='DENSITY',
                coreloss_f='CORELOSS',
                corerec_f='COREREC',
                zone_f='optional',
                mingap_p='optional',
                maxgap_p=0,
                elev_p=0,
                mincomp_p='optional',
                maxcomp_p='optional',
                loss_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Sample data file, sorted on BHID and FROM. Expects fields BHID, FROM, TO,
        LENGTH, X, Y, Z, A0, B0.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Composite file. Will include implicit field CUTOFF and explicit fields
        REC.VAL and FRACTION for recovered values.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Field for recovered grade computations.
        required: Yes; default: ; range: 

        BHID:     Drillhole identifier.
        required: No; default: BHID; range: 

        FROM:     Downhole distance to sample top.
        required: No; default: FROM; range: 

        TO:     Downhole distance to sample bottom.
        required: No; default: TO; range: 

        DENSITY:     If present, composites will be density-weighted
        required: No; default: DENSITY; range: 

        CORELOSS:     If present, will be taken as percentage core loss, and treated according
        to the LOSS parameter.
        required: No; default: CORELOSS; range: 

        COREREC:     If present, will be taken as percentage core recovery, (100-core loss) and
        treated according to the LOSS parameter.
        required: No; default: COREREC; range: 

        ZONE:     Name of field for compositing within. (may be numeric or up to 4 character
        alpha). This field must exist in the IN and will be copied to the OUT
        file. If specified then new composites will be created each time the value
        of ZONE changes.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        INTERVAL:     Bench height.
        required: Yes; default: ; range: Undefined

        CUTOFF:     Cutoff to be applied to VALUE.
        required: Yes; default: ; range: Undefined

        MINGAP:     Gap length to be ignored. The default gap is calculated as 0.05 INTERVAL.
        This default value is applied if the parameter is not specified, or if the
        value is specified as <=0. A gap of exactly zero is not permitted. If you
        want the composite to be split at every gap, use a very small value for
        MAXGAP eg 0.0001.
        required: No; default: ; range: Undefined

        MAXGAP:     Gap length for termination of composite (0).
        required: No; default: 0; range: Undefined

        ELEV:     Reference bench elevation (0).
        required: No; default: 0; range: Undefined

        MINCOMP:     Minimum composite length [0.5 INTERVAL].
        required: No; default: ; range: Undefined

        MAXCOMP:     Maximum composite length [2.0 INTERVAL].
        required: No; default: ; range: Undefined

        LOSS:     If core loss or core recovery field is present, controls how it is
        handled:  Option  Description  0  Treat loss as part of sample.  1  Treat
        loss as default values.  2  Treat as cavity [zero density and grades]
        required: No; default: 0; range: 0,2

        PRINT:     >2 to display each composite and output file DD (0).
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.compbr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COMPBR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def compdh(self,
                in_i,
                out_o,
                interval_p,
                bhid_f='BHID',
                from_f='FROM',
                to_f='TO',
                density_f='DENSITY',
                coreloss_f='CORELOSS',
                corerec_f='COREREC',
                zone_f='optional',
                mingap_p='optional',
                maxgap_p=0,
                mincomp_p='optional',
                loss_p='optional',
                start_p=0,
                mode_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Sample data file, sorted on BHID and FROM. Expects fields BHID, FROM, TO,
        LENGTH, X, Y, Z, A0, B0.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Composite file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Drillhole identifier.
        required: No; default: BHID; range: 

        FROM:     Downhole distance to sample top.
        required: No; default: FROM; range: 

        TO:     Downhole distance to sample bottom.
        required: No; default: TO; range: 

        DENSITY:     If present, composites will be density- weighted.
        required: No; default: DENSITY; range: 

        CORELOSS:     If present, will be taken as percentage core loss, and treated according
        to the LOSS parameter.
        required: No; default: CORELOSS; range: 

        COREREC:     If present, will be taken as percentage core recovery, (100-core loss) and
        treated according to the LOSS parameter.
        required: No; default: COREREC; range: 

        ZONE:     Name of field for compositing within. (may be numeric or up to 24
        character alpha). This field must exists in the IN and will be copied to
        the OUT file. If specified then new composites will be created each time
        the value of ZONE changes.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        INTERVAL:     Composite length.
        required: Yes; default: ; range: Undefined

        MINGAP:     Gap length to be ignored. The default gap is calculated as 0.05 INTERVAL.
        This default value is applied if the parameter is not specified, or if the
        value is specified as <=0. A gap of exactly zero is not permitted. If you
        want the composite to be split at every gap, use a very small value for
        MAXGAP eg 0.0001.
        required: No; default: ; range: Undefined

        MAXGAP:     Gap length for termination of composite (0).
        required: No; default: 0; range: Undefined

        MINCOMP:     Minimum composite length [0.5 INTERVAL].
        required: No; default: ; range: Undefined

        LOSS:     If core loss or core recovery field is present, controls how it is
        handled: <=0 treat loss as part of sample =1 treat loss as default values
        >=2 treat as cavity [zero density and grades]
        required: No; default: ; range: Undefined

        START:     Starting distance down hole (0).
        required: No; default: 0; range: Undefined

        MODE:     If MODE is 0, the default, then the maximum composite length will be
        defined by the INTERVAL parameter and the minimum composite length by the
        MINCOMP parameter. Thus it is possible for part or all of one or more
        samples to be excluded from the composite. Setting MODE to 1 forces all
        samples to be included in one of the composites by adjusting the composite
        length, while keeping it as close as possible to INTERVAL. The maximum
        possible composite length will then be 1.5*INTERVAL. (0)
        required: No; default: 0; range: 0,1

        PRINT:     =3 to display each composite and output file DD (0).
        required: No; default: 0; range: 0,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.compdh).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COMPDH ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def compse(self,
                in_i,
                out_o,
                value_f,
                cutoff_p,
                minore_p,
                maxwaste_p,
                minasfr_p,
                dilute_p,
                narwaste_p,
                anyore2_p,
                zone_f='optional',
                owcode_f='optional',
                minglen_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample file, in BHID and FROM order.  This must contain the fields
        BHID,X,Y,Z,FROM,TO and LENGTH
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file of ore and waste composites.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Numeric value field used to control compositing. This may be a grade or a
        calculated equivalent value from grades of different metals.
        required: Yes; default: ; range: 

        ZONE:     Name of optional field for compositing within.  This field must exist in
        the input file and can be numeric or alpha. It will be copied to the
        output file. If specified then new composites will be created every time
        the value of ZONE changes.
        required: No; default: ; range: 

        OWCODE:     Output field to contain an Ore/Waste Flag.  This will contain values of
        zero for waste samples and values of one (1) for Ore samples.  It is
        possible that some output composite samples will have a grade value
        greater than the CUTOFF but be flagged as waste due to internal waste or
        minimum ore width constraints.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTOFF:     Minimum value of VALUE which is considered to be ore (0).
        required: Yes; default: 0; range: Undefined

        MINORE:     Minimum mining width for ore. This must be greater than zero.  Output
        samples must be at least this long to be considered as ore, but see also
        the MINGLEN parameter.
        required: Yes; default: ; range: Undefined

        MAXWASTE:     Maximum width for internal waste (0.00001). This must be greater than
        zero.
        required: Yes; default: 0; range: Undefined

        MINASFR:     Minimum fraction of a composited interval which must be assayed for the
        average assayed value to be given to the composite.  This only applies to
        the extra fields mentioned above.  If VALUE is 'absent' in a particular
        record, its default value is used. (0.95)
        required: Yes; default: 0.95; range: 0,1

        DILUTE:     Attempt to dilute composites to remove samples with a length less than the
        minum ore or minimum waste lengths.  =0 : Do not attempt to dilute
        samples. This is more conservative..  =1 : Attempt to dilute narrow ore
        samples with adjacent waste and narrow waste samples with adjacent ore.
        This is the more aggressive option and will tend to create longer ore
        composites of lower grade.
        required: Yes; default: 1; range: 0,1

        NARWASTE:     Test for carrying narrow waste to be applied to either [1] or both [2]
        adjacent ores (1).  =1 : When compositing samples with configuration: ore
        - Narrow waste - ore, then proceed if either adjacent ore sample can carry
        the internal waste. This is the more aggressive option and will tend to
        create longer ore composites of lower grade..  =2 : When compositing
        samples with configuration: ore - Narrow waste - ore, then proceed only if
        both adjacent ore samples can independently carry the internal waste.
        required: Yes; default: 1; range: 1,2

        ANYORE2:     When applying rule 2 (see start of this Help file) specify whether narrow
        waste is composited with adjacent narrow ore or wide ore.  =0 : When
        applying Rule 2 composite samples with configuration: Narrow ore - Narrow
        waste - Narrow ore.  =1 : When applying Rule 2 composite samples with
        configuration: Any ore - Narrow waste - Any ore. This is the more
        aggressive option and will tend to create longer ore composites of lower
        grade..
        required: Yes; default: 1; range: 0,1

        MINGLEN:     Minimum value of sample length multiplied by VALUE that a sample must have
        to be considered to be ore. The default value is unset ( or zero ).  A
        value of zero is treated as unset. This can be used to treat samples with
        a length below the minimum mining width as ore when they have a relatively
        high grade.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.compse).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COMPSE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def comres(self,
                reserve_o,
                zone_f='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        RESERVE:     The output file generated, for use in subsequent scheduling processes,
        such as PRODSH. It will contain the following fields, in addition to all
        of the grade fields in the RESULTS file(s). UNIT A,8 Field containing the
        name of each production unit. PNUM N Any blocks being scheduled may be
        categorised according to a primary and secondary classification. The PNUM
        field contains the primary number. The values held in this field will
        depend on the type of primary classification selected. SNUM N Secondary
        classification number. The values held in this field will depend on the
        type of secondary classification selected. If ore/waste secondary
        classification is selected, it will contain values of 1 for all ore units,
        and values of 2 for all waste units. NY N Implicit field, defining the
        total number of production units in the file, equal to the number of
        records. PRATE N Notional production rate at which each production unit is
        to be mined. This may contain absent data values, as individual production
        rates may be defined or changed during operation of PRODSH. TONNES N
        Reserve tonnage for each production unit.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Optional numeric zone identifier field that has been used to define
        individual wireframe zones. This field need only be defined if reserve
        classification by wireframe zone is required.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.comres).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COMRES ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def conpol(self,
                in_i,
                perimout_o,
                x_f,
                y_f,
                maxlen_p='optional',
                extdis_p=0,
                checkdup_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output Perimeter file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate field on input file.
        required: Yes; default: ; range: 

        Y:     Y coordinate field on input file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MAXLEN:     Maximum chord length, which should be greater than the distance between
        separate groups of data if all groups are to be included in the one
        perimeter and greater than the average point separation.
        required: No; default: ; range: Undefined

        EXTDIS:     Distance to extend the perimeter (0).
        required: No; default: 0; range: Undefined

        CHECKDUP:     Check for duplicate points in the input file. If this is turned on (set to
        1) then processing takes much longer. For data sets with more than a few
        thousand points it is recommended that this is turned off (set to 1).
        Duplicate points can be removed from the input data file by using the
        FILTPO process before running CONPOL. =0 : Do not check for duplicate
        points - processing is much faster. =1 : Check for duplicate points.
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.conpol).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CONPOL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def contou(self,
                in_i,
                plot_o,
                field_f,
                vmin_p,
                vmax_p,
                cint_p,
                gridint_p,
                proto_i='optional',
                plane_p='XY',
                position_p='optional',
                top_p='optional',
                bottom_p='optional',
                hilight_p='optional',
                hi_p='optional',
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK + FIELD field.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set. If no plot prototype file, then XMIN, XMAX,
        YMIN, YMAX taken from the model file on IN.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FIELD:     Field to be contoured.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VMIN:     Minimum contour value.
        required: Yes; default: ; range: Undefined

        VMAX:     Maximum contour value.
        required: Yes; default: ; range: Undefined

        CINT:     Contour interval.
        required: Yes; default: ; range: Undefined

        GRIDINT:     Grid interval for contouring.
        required: Yes; default: ; range: Undefined

        PLANE:     Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane.
        required: No; default: XY; range: Undefined

        POSITION:     Position of the plane. For example if the XY plane is used a Z position is
        needed. Only required if neither TOP nor BOTTOM are specified.
        required: No; default: ; range: Undefined

        TOP:     Value of FIELD for which top of seam contour required. Only required if
        neither POSITION nor BOTTOM appear.
        required: No; default: ; range: Undefined

        BOTTOM:     Value of FIELD for which base of seam contour required. Only required if
        neither POSITION nor TOP appear. Both TOP and BOTTOM set for an isopach.
        required: No; default: ; range: Undefined

        HILIGHT:     Highlight every Nth contour with different colour.
        required: No; default: ; range: Undefined

        HI:     Colour for highlighting.
        required: No; default: ; range: 1,64

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.contou).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CONTOU ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def contst(self,
                in_i,
                out_o,
                field_f,
                vmin_p,
                vmax_p,
                cint_p,
                gridint_p,
                plane_p='XY',
                position_p='optional',
                top_p='optional',
                bottom_p='optional',
                smpass_p=1,
                smfactor_p=0.5,
                smthresh_p=0,
                optype_p=4,
                hilight_p='optional',
                hicolour_p=2,
                colour_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK + FIELD field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output string file, containing fields XP,YP,ZP, PTN,PVALUE,P.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FIELD:     Field to be contoured.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VMIN:     Minimum contour value.
        required: Yes; default: ; range: Undefined

        VMAX:     Maximum contour value.
        required: Yes; default: ; range: Undefined

        CINT:     Contour interval.
        required: Yes; default: ; range: Undefined

        GRIDINT:     Grid interval for contouring.
        required: Yes; default: ; range: Undefined

        PLANE:     Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane.
        required: No; default: XY; range: Undefined

        POSITION:     Position of the plane. For example if the XY plane is used a Z position is
        needed. Only required if neither TOP nor BOTTOM are specified.
        required: No; default: ; range: Undefined

        TOP:     Value of FIELD for which top of seam contour required. Only required if
        neither POSITION nor BOTTOM appear.
        required: No; default: ; range: Undefined

        BOTTOM:     Value of FIELD for which base of seam contour required. Only required if
        neither POSITION nor TOP appear.
        required: No; default: ; range: Undefined

        SMPASS:     Number of smoothing passes required (1).
        required: No; default: 1; range: Undefined

        SMFACTOR:     Smoothing factor in the range 0 [minimum smoothing] to 1 [maximum
        smoothing] (0.5).
        required: No; default: 0.5; range: 0,1

        SMTHRESH:     Smoothing threshold used for operations of types 3,6, and 7 only (0.0).
        required: No; default: 0; range: Undefined

        OPTYPE:     Smoothing operation type (4) selected from:-  Option  Description  1
        Laplacian (non-directional 2nd partial derivative) function on surface -
        used as an indicator of curvature, for example for identification of
        discontinuities.  2  Sq root of sum of 1st partial derivatives, a measure
        of the surface gradient.  3  Adaptive noise reduction for smoothing in
        areas where difference between adjacent grid values exceeds THRESH.  4
        Local 5-point mean for smoothing.  5  Local 5-point standard deviation.  6
        Lower thresholding - replace all values below THRESH by the THRESH value.
        7  Upper thresholding - replace all values above THRESH by the THRESH
        value.  8  Minkowski dilatation - extend grid outward by one element using
        local average value.
        required: No; default: 4; range: 1,8

        HILIGHT:     Highlight every Nth contour with different colour.
        required: No; default: ; range: Undefined

        HICOLOUR:     Colour for highlighting (2).
        required: No; default: 2; range: 1,64

        COLOUR:     Default colour for plot (1).
        required: No; default: 1; range: 1,64

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.contst).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CONTST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def copy(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.copy).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COPY ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def copynr(self,
                in_i,
                out_o,
                base_p='optional',
                incrment_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file; same as input with addition of field RECORDNO. If RECORDNO
        already exists in the input file, values will be renumbered in the output.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        BASE:     Starting record number (1) [Integer].
        required: No; default: ; range: 

        INCRMENT:     Record number increment (1) [Integer].
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.copynr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COPYNR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def correl(self,
                in_i,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f1_to_10_f=['optional']
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F1_to_10:     First field to be correlated. No fields specified means all.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.correl).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CORREL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def count(self,
                in_i,
                out_o,
                key1_to_10_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file, sorted on required keyfields.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     File containing counts. Will contain specified keyfields + field COUNT
        holding number of keyfield combinations found.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for counting.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.count).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COUNT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def cozone(self,
                in_i,
                rockcode_f,
                out_o='optional',
                czxorig_p='optional',
                czyorig_p='optional',
                czzorig_p='optional',
                czmwid_p='optional',
                czbhht_p='optional',
                directn_p='X',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Model containing rock-type information in the form of a numeric rocktype
        code. The model must also contain at least the fields XC, YC, ZC, XINC,
        YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output contact zone model. This will contain the standard 13 model fields
        plus a field named CONTZONE - the numeric contact zone code.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        ROCKCODE:     Name of field in input model file containing rocktype code.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CZXORIG:     X co-ordinate of start point for contact zone definition.Default=input
        model X origin
        required: No; default: ; range: Undefined

        CZYORIG:     Y co-ordinate of start point for contact zone definition.Default=input
        model Y origin
        required: No; default: ; range: Undefined

        CZZORIG:     Z co-ordinate of start point for contact zone definition.Default=input
        model Z origin
        required: No; default: ; range: Undefined

        CZMWID:     Mining width as measured along either X or Y axis direction of model,
        depending on the DIRECTN parameter. Default is the cell size in the
        direction parallel to the mining face. ie YINC if DIRECTN='X' , XINC if
        DIRECTN='Y'
        required: No; default: ; range: Undefined

        CZBHHT:     Bench height increment as measured vertically upwards from CZZORIG.Default
        is Z direction cell size [ZINC] of the input model
        required: No; default: ; range: Undefined

        DIRECTN:     Direction of face advance [either 'X' or 'Y'] with a default of 'X'; this
        is perpendicular to the direction in which the mining width CZMWID is
        measured.
        required: No; default: X; range: Undefined

        PRINT:     Option  Description  0  for summary of input and total volumes by contact
        zone. =1 as 0 plus volumes by bench (0)
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.cozone).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'COZONE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def crscor(self,
                in_i,
                out_o,
                sampid_f,
                f1_to_10_f=['optional'],
                sampdist_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file. Must contain a sample identifier field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file includes LAG-L, DISTANCE, R-L the cross correlation function
        and SIGNIC the significance of the cross correlation function for use in
        graphical processes.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Sample identifier field in input file.
        required: Yes; default: ; range: 

        F1_to_10:     First variable for evaluation. If no variables are selected all variables
        will be processed.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SAMPDIST:     Option  Description  (0)  Distance between sample points to calculate the
        cross-correlation function. If no distance is specified the sample
        distance is lag distance.
        required: No; default: 0; range: Undefined

        PRINT:     >0 Display results on the screen (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.crscor).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CRSCOR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def csmodel(self,
                points_i,
                grade_f,
                quantile_i='optional',
                cutoff_i='optional',
                simmod_o='optional',
                statmod_o='optional',
                reserves_o='optional',
                plot_o='optional',
                xpppc_p=0,
                ypppc_p=0,
                zpppc_p=0,
                fullcell_p=1,
                quantile_p=2,
                cutoff_p='optional',
                density_p=1,
                rescsv_p=0,
                gplot_p=0,
                tplot_p=0,
                mplot_p=0,
                gtplot_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POINTS:     Input points file containing simulated points as created by SGSIM. This
        must include the coordinate fields XPT, YPT, ZPT, the grade field GRADE
        and the simulation (realization) number field SIMNUM. It must also include
        the implicit fields XMORIG1, YMORIG1, ZMORIG1, XINC1, YINC1, ZINC1, NX1,
        NY1, NZ1 defining the grid origin, size and number of points, as well as
        the fields XPPPC, YPPPC, ZPPPC defining the number of points per parent
        cell for the output model. The default value of SIMNUM must be set to the
        number of realizations.  These implicit fields will have been added
        automatically by the process SGSIM .
        required: Yes; default: ; range: 

        QUANTILE:     Input file containing list of percentile values defined using field
        PERCENT. The GRADE value corresponding to each PERCENT value is included
        in the output STAT MOD file. The maximum number of percentiles defined in
        the file is 30. If a QUANTILE file is not specified then percentiles at
        equal intervals can be defined using parameter QUANTILE .
        required: No; default: ; range: 

        CUTOFF:     Input file containing list of cutoff grades defined using field COGRADE.
        The proportion of each cell above cutoff, the grade above cutoff and the
        grade below cutoff are calculated and written to the STATMOD file. The
        maximum number of cutoffs defined in the file is 13 (single precision) or
        16 (double precision). If a CUTOFF file is not specified then a single
        cutoff can be defined using parameter CUTOFF .
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        SIMMOD:     Output block model file containing the simulated GRADE values for each
        cell and each realization. The values are calculated by averaging the
        simulated points lying within the cell according to the number of points
        per cell defined by the XPPPC , YPPPC and ZPPPC parameters. The SIMMOD
        file can be the same as the STATMOD file. Although SIMMOD and STATMOD are
        both optional, at least one of the two must be defined.
        required: No; default: ; range: 

        STATMOD:     Output block model file containing statistical parameters for each cell.
        The value of each cell for each realization is calculated by averaging the
        simulated points lying within the cell (as defined by the XPPPC , YPPPC
        and ZPPPC parameters) and then statistics (mean, variance, etc) are
        calculated for the simulated cell values for each cell. The statistics are
        stored in the STATMOD file. The STATMOD file will also includes the
        percentile values as defined by the QUANTILE file or the QUANTILE
        parameter, and the proportion and grade of each cell above cutoff for
        cutoffs defined by the CUTOFF file or the CUTOFF parameter. The STATMOD
        file can be the same as the SIMMOD file. Although SIMMOD and STATMOD are
        both optional, at least one of the two must be defined.
        required: No; default: ; range: 

        RESERVES:     Output file containing total tonnes above cutoff, grade above cutoff and
        grade below cutoff for those cutoffs defined by the CUTOFF file or the
        CUTOFF parameter. The four fields in the RESERVES file are CUTOFF,
        TONABOVE, GRDABOVE and GRDBELOW. If a RESERVES file is specified then the
        STATMOD file must also be defined.  If parameter FULLCELL=1 then the
        tonnes and grades apply to the EType estimate for parent cells. The EType
        is a smoothed estimate and does not therefore correctly represent the
        recovered values for Selective Mining Units (SMUs).  If FULLCELL=0 then
        the tonnes and grade give the average of the values for individual
        simulations. This represents the values for SMUs equal to the parent cell
        size.
        required: No; default: ; range: 

        PLOT:     Template name for output plot file(s) showing tonnes, grade and/or metal
        above cutoff (Y axis) against cutoff (X axis). The PLOT file template name
        should be a maximum of 18 characters. One or two characters are added to
        this name to create the actual file name, as follows: G - Grade T - Tonnes
        M - Metal GT - Grade and Tonnes, on same plot The parameters GPLOT , TPLOT
        , MPLOT and GTPLOT define which plots to create. A minimum of 2 cutoffs
        must be defined and a STATMOD file specified in order for the PLOT file(s)
        to be created.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     Field in the input POINTS sample file defining the simulated grade.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XPPPC:     Number of simulated points in the X direction to be averaged into a parent
        cell. If set to 0 then the value of the XPPPC parameter used by command
        SGSIM for creating the POINTS sample file will be used. This value is
        stored as the default value of the XPPPC field in the POINTS file.
        required: No; default: 0; range: 0,200

        YPPPC:     Number of simulated points in the Y direction to be averaged into a parent
        cell. If set to 0 then the value of the YPPPC parameter used by command
        SGSIM for creating the POINTS sample file will be used. This value is
        stored as the default value of the YPPPC field in the POINTS file.
        required: No; default: 0; range: 0,200

        ZPPPC:     Number of simulated points in the Z direction to be averaged into a parent
        cell. If set to 0 then the value of the ZPPPC parameter used by command
        SGSIM for creating the POINTS sample file will be used. This value is
        stored as the default value of the ZPPPC field in the POINTS file.
        required: No; default: 0; range: 0,200

        FULLCELL:     Flag to show whether the RESERVES files and plots are to be created using
        full (1) or partial cell evaluation.  Option  Description  0  Use partial
        cell evaluation.  1  Use full cell evaluation.  If full cell evaluation is
        selected then the mean grade over all realizations is calculated for each
        cell, and the cell is accepted or rejected depending on whether the mean
        is above or below cutoff. In this case the mean grade is the EType
        estimate which is a smoothed estimate and so the results would need to be
        adjusted for a specific size of selective mining unit (SMU).  For partial
        cell evaluation the proportion of each cell above cutoff and the grade
        above cutoff are calculated from the conditional distribution for each
        cell. Therefore full cell evaluation is based on an estimated grade,
        whereas partial cell evaluation takes account of the individual simulated
        grade for each cell. The results for partial cell evaluation give the
        average resource for an SMU size equal to the parent cell.
        required: No; default: 1; range: 0,1

        QUANTILE:     The number of percentiles minus 1 to be calculated and output in the
        STATMOD file. For example if QUANTILE = 5 then the 4 percentiles 20%, 40%,
        60%, 80% are calculated; if QUANTILE
        required: No; default: 2; range: 2,30

        CUTOFF:     The cutoff grade. The proportion of each cell above cutoff, the grade
        above cutoff and the grade below cutoff are calculated and written to the
        STATMOD file. If more than one cutoff is required then multiple cutoffs
        can be specified in the CUTOFF file. If a CUTOFF file is specified then
        the CUTOFF parameter will be ignored.
        required: No; default: ; range: Undefined

        DENSITY:     Density. This used for calculating tonnes above cutoff.
        required: No; default: 1; range: Undefined

        RESCSV:     Flag to show whether the RESERVES file should be created as a CSV file as
        well as a Datamine file, so that it can be read directly into Excel. The
        name of the CSV file will be the same as the Datamine file but with the
        extension .csv.  Option  Description  0  Do not create a CSV file.  1
        Create a CSV file.
        required: No; default: 0; range: 0,1

        GPLOT:     Flag to indicate whether a plot of grade above cutoff v cutoff should be
        created. The name of the plot file is defined by the plot file template
        PLOT , with the additional character G. A minimum of 2 cutoffs must be
        defined and a STATMOD file specified in order for the plot file to be
        created.  Option  Description  0  Do not create plot  1  Create plot;
        required: No; default: 0; range: 0,1

        TPLOT:     Flag to indicate whether a plot of tonnes above cutoff v cutoff should be
        created. The name of the plot file is defined by the plot file template
        PLOT , with the additional character T. A minimum of 2 cutoffs must be
        defined and a STATMOD file specified in order for the plot file to be
        created.  Option  Description  0  Do not create plot  1  Create plot
        required: No; default: 0; range: 0,1

        MPLOT:     Flag to indicate whether a plot of metal above cutoff v cutoff should be
        created. The name of the plot file is defined by the plot file template
        PLOT , with the additional character M. A minimum of 2 cutoffs must be
        defined and a STATMOD file specified in order for the plot file to be
        created.  Option  Description  0  Do not create plot  1  Create plot
        required: No; default: 0; range: 0,1

        GTPLOT:     Flag to indicate whether a plot of grade above cutoff v cutoff and tonnes
        above cutoff v cutoff should be created on the same plot. The name of the
        plot file is defined by the plot file template PLOT , with the additional
        characters GT. A minimum of 2 cutoffs must be defined and a STATMOD file
        specified in order for the plot file to be created.  Option  Description
        0  Do not create plot  1  Create plot
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.csmodel).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CSMODEL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def csowopt(self,
                statmod_i,
                reserves_o,
                oremod_o='optional',
                plot_o='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        STATMOD:     Conditionally simulated block model statistics file. This file will have
        been created as the output STATMOD file by CSMODEL, and must include the
        fields PAx, GAx and GBx for at least one value of cutoff grade x.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        RESERVES:     Output reserves file containing total tonnes and grade for blocks
        calculated as ore, classified by processing cost, metal price and cutoff.
        required: Yes; default: ; range: 

        OREMOD:     Output block model. This file includes flag field OWx which equals 1 if
        the block is ore and 0 if it is waste, for each cutoff x, for processing
        cost COSTMIN and metal price PRICEMIN .
        required: No; default: ; range: 

        PLOT:     Template name for output plot file(s) showing tonnes, grade and/or metal
        above cutoff (Y axis) against cutoff (X axis). The PLOT file template name
        should be a maximum of 23 characters. A single character is added to this
        name to create the actual file name, as follows: G - Grade T - Tonnes M -
        Metal The parameters GPLOT , TPLOT and MPLOT define which plots to create.
        A minimum of 2 cutoffs must have been defined in order for the PLOT
        file(s) to be created.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.csowopt).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'CSOWOPT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ddcopy(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ddcopy).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DDCOPY ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ddlist(self,
                in_i
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be displayed.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ddlist).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DDLIST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def decile(self,
                in_i,
                priout_o,
                value_f,
                decout_o='optional',
                splitout_o='optional',
                select_f='optional',
                cutoff_p='optional',
                topcut_p=0,
                tcutoff_p='optional',
                criteria_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PRIOUT:     Output print file containing sample decile information.
        required: Yes; default: ; range: 

        DECOUT:     Output file containing sample decile information. Not including the top
        10% subsplit
        required: No; default: ; range: 

        SPLITOUT:     Output file containing sample decile information. Including the top 10%
        subsplit
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Name of the field containing the grade to be processed.
        required: Yes; default: ; range: 

        SELECT:     Field containing the parameter for sample record selection.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTOFF:     Cutoff grade.
        required: No; default: ; range: Undefined

        TOPCUT:     Apply a topcut to the file: 0 = No topcut applied. 1 = Topcut applied at
        grade defined in TCUTOFF
        required: No; default: 0; range: 0,1

        TCUTOFF:     Grade to be applied as a topcut, if TOPCUT is set to 1.
        required: No; default: ; range: Undefined

        CRITERIA:     Value to be used in sample record selection - SELECT. eg. If ROCK is the
        field entered in SELECT and 2 is the value entered in CRITERIA, then the
        Decile analysis will only take place on records where ROCK = 2. This value
        must be numeric.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.decile).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DECILE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def declust(self,
                in_i,
                x_f,
                y_f,
                z_f,
                xgrid_p,
                ygrid_p,
                zgrid_p,
                out_o='optional',
                wtout_o='optional',
                wgts_tbl_o='optional',
                stat_tbl_o='optional',
                wtfield_f='optional',
                method_p=1,
                xorig_p=0,
                yorig_p=0,
                zorig_p=0,
                centre_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must contain a set of 3D coordinates (eg
        X,Y,Z) and at least one other field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing declustered samples. At least one of the two output
        files OUT or WTOUT must be selected.
        required: No; default: ; range: 

        WTOUT:     Output file containing declustered weights. This will be a copy of the IN
        file, but will also include the field DCWEIGHT. At least one of the two
        output files OUT or WTOUT must be selected.
        required: No; default: ; range: 

        WGTS_TBL:     Output file containing summary statistics for declustered weights.
        required: No; default: ; range: 

        STAT_TBL:     Output file containing summary statistics for declustered and clustered
        WTFIELD samples.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data
        required: Yes; default: X; range: 

        Y:     Y coordinate of sample data
        required: Yes; default: Y; range: 

        Z:     Z coordinate of sample data
        required: Yes; default: Z; range: 

        WTFIELD:     Field to be used for calculating declustered weights. This is only
        relevant if a WTOUT file has been specified and one or more of the grade
        fields in the IN file contain absent data values. Specifying a WTFIELD
        field ensures that records containing absent data values for that field
        will be ignored. If a WTFIELD field is not specified but a WTOUT file has
        been selected then the Z field is used.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XGRID:     Grid size in X
        required: Yes; default: ; range: 0.00001,+

        YGRID:     Grid size in Y
        required: Yes; default: ; range: 0.00001,+

        ZGRID:     Grid size in Z
        required: Yes; default: ; range: 0.00001,+

        METHOD:     Declustering method if OUT file specified:  1 = random selection within
        grid (different selection each run)  2 = pseudo random selection within
        grid (repeatable)  3 = nearest to grid centre  4 = average of samples
        within grid
        required: No; default: 1; range: 1,4

        XORIG:     X coordinate of grid origin
        required: No; default: 0; range: Undefined

        YORIG:     Y coordinate of grid origin
        required: No; default: 0; range: Undefined

        ZORIG:     Z coordinate of grid origin
        required: No; default: 0; range: Undefined

        CENTRE:     Flag to show whether the X, Y and Z coordinates of the grid centre should
        be included in the OUT file. If selected the names of the fields in the
        file will be XCENTRE, YCENTRE and ZCENTRE:
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.declust).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DECLUST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def decode(self,
                in_i,
                dict_i,
                out_o,
                code_f,
                text_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be decoded. This contains the field CODE (real name specified
        below) which is translated through the dictionary file DICT matching with
        the CODE field, and writing the equivalent TEXT field from the dictionary
        to the output file as field TEXT.
        required: Yes; default: ; range: 

        DICT:     Dictionary file (fields CODE and TEXT). There should be only one
        occurrence of each CODE value. This file MUST be sorted on CODE.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Decoded file. An exact copy of the input file with the decoded field TEXT
        added.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        CODE:     Field to be translated in input file.
        required: Yes; default: ; range: 

        TEXT:     Field holding translated text, on output file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.decode).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DECODE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def delete(self,
                in_i,
                confirm_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be deleted. If IN is a catalogue file, then all the files in the
        catalogue will be deleted if confirmed.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CONFIRM:     Option Description 1; If IN is a catalogue file, then a request for
        confirmation will be issued for each file in the catalogue. If IN is a
        individual database file, then confirmation that the file is to be deleted
        is requested. Default: (0). >>> OPERATING ON A CATALOGUE FILE INPUT <<<
        >>> ARE YOU SURE YOU WISH TO DELETE ALL FILES <<< >>> PRESS <RETURN> TO
        CONTINUE (OR ! TO TERMINATE) >
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.delete).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DELETE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def desurv(self,
                in1_i,
                out_o,
                in2_i='optional',
                bhid_f='BHID',
                xcollar_f='XCOLLAR',
                ycollar_f='YCOLLAR',
                zcollar_f='ZCOLLAR',
                from_f='FROM',
                to_f='TO',
                at_f='AT',
                brg_f='BRG',
                dip_f='DIP',
                survsmth_p=1,
                desurvmd_p=1,
                endpts_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Data file of downhole distances, sorted on BHID and FROM. Expects fields
        BHID, XCOLLAR, YCOLLAR, ZCOLLAR, FROM, TO; optional BRG, DIP.
        required: Yes; default: ; range: 

        IN2:     Survey data file, sorted on BHID and AT. Expects fields BHID, AT, BRG,
        DIP. If a borehole has Survey Data, then it must include a record for the
        collar location, i.e. AT=0
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output sample data file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Drillhole identifier.
        required: No; default: BHID; range: 

        XCOLLAR:     X co-ordinate of drillhole collar.
        required: No; default: XCOLLAR; range: 

        YCOLLAR:     Y co-ordinate of drillhole collar.
        required: No; default: YCOLLAR; range: 

        ZCOLLAR:     Z co-ordinate of drillhole collar.
        required: No; default: ZCOLLAR; range: 

        FROM:     Downhole distance to sample top.
        required: No; default: FROM; range: 

        TO:     Downhole distance to sample bottom.
        required: No; default: TO; range: 

        AT:     Downhole distance to survey point.
        required: No; default: AT; range: 

        BRG:     Bearing of drillhole.
        required: No; default: BRG; range: 

        DIP:     Dip of drillhole.
        required: No; default: DIP; range: 

        ----------
        PARAMETERS
        ----------

        SURVSMTH:     =0 to prevent samples being added to the output file.  =1 to add samples
        where there are more than one survey record per sample. (1).  When a hole
        sample is desurveyed the survey data (azimuth and dip) of the sample is
        used to locate the sample centre poi
        required: No; default: 1; range: 0,1

        DESURVMD:     Locate sample centers or end points on the desurveyed arcs. The default is
        1, to accurately locate the sample center points.  =0 : To accurately
        locate sample END points on the desurveyed arcs. =1 : To accurately locate
        sample CENTER points on the desurveyed arcs.
        required: No; default: 1; range: 0,1

        ENDPTS:     Write out fields containing the sample end point coordinates. The default
        value is 0, to not write out the sample end points.  =0 : Do not write
        sample end points to the output file. =1 : Write out numeric fields
        [XYZ]START and [XYZ]END containing the sample start and end point
        coordinates.
        required: No; default: 0; range: 0,1

        PRINT:     >=2 to display each output record and sample data file DD (0).
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.desurv).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DESURV ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def diffrn(self,
                in1_i,
                in2_i,
                out_o,
                key1_to_10_f,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     File to have records deleted (sorted on required keyfields).
        required: Yes; default: ; range: 

        IN2:     File containing keyfield values for deletion (sorted on required
        keyfields).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for file matching.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.diffrn).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DIFFRN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dilute(self,
                in_i,
                out_o,
                bhid_f,
                from_f,
                to_f,
                seamid_f,
                dilup_p,
                dildown_p,
                thinnest_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file. Must contain at least fields for BHID, FROM, TO and SEAMID.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Borehole identifier. May be numeric or alpha.
        required: Yes; default: BHID; range: 

        FROM:     Downhole FROM distance (top of intersection).
        required: Yes; default: FROM; range: 

        TO:     Downhole TO distance (base of intersection).
        required: Yes; default: TO; range: 

        SEAMID:     Identification for intersections. Must be numeric or alpha up to a maximum
        of 4 chars.
        required: Yes; default: SEAMID; range: 

        ----------
        PARAMETERS
        ----------

        DILUP:     Dilution distance up from FROM positions.
        required: Yes; default: ; range: Undefined

        DILDOWN:     Dilution distance down from TO positions.
        required: Yes; default: ; range: Undefined

        THINNEST:     Thinnest acceptable seam. Any thinner intersections are eliminated. Note:-
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dilute).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DILUTE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dilutmod(self,
                    modin_i,
                    modout1_o,
                    rock_f,
                    grade1_f,
                    resource_o='optional',
                    modout2_o='optional',
                    density_f='optional',
                    grade2_to_10_f=['optional'],
                    xwidth_p=1,
                    ywidth_p=1,
                    zwidth_p=1,
                    density_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODIN:     Input block model file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODOUT1:     Diluted output model file - same as MODIN except that all grades are
        diluted.
        required: Yes; default: ; range: 

        RESOURCE:     Resources table comparing tonnes and grade for undiluted and diluted
        models classified by *ROCK.
        required: No; default: ; range: 

        MODOUT2:     Combined output model file - includes both undiluted and diluted grade
        fields. Diluted grade field names have D as the first character.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        ROCK:     Rock field.
        required: Yes; default: ; range: 

        GRADE1:     Grade field 1
        required: Yes; default: ; range: 

        DENSITY:     Density field. If the model does not include a DENSITY field then the
        density can be set with parameter @DENSITY
        required: No; default: ; range: 

        GRADE2-10:     Additional, optional, grade fields.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XWIDTH:     Dilution width in X direction
        required: No; default: 1; range: Undefined

        YWIDTH:     Dilution width in Y direction
        required: No; default: 1; range: Undefined

        ZWIDTH:     Dilution width in Z direction
        required: No; default: 1; range: Undefined

        DENSITY:     Density value to be used if DENSITY field does not exist.
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dilutmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DILUTMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def discan(self,
                in_i,
                groupid_f,
                sampid_f,
                centrds_o='optional',
                functs_o='optional',
                scores_o='optional',
                f1_to_10_f=['optional'],
                resum_p=0,
                primat_p=0,
                prisco_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file. Must contain group and sample identity fields. A maximum of
        ten groups are evaluated. The file must be sorted on the *GROUPID field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        CENTRDS:     Optional output file containing group centroids identified by the field
        named in GROUPID.
        required: No; default: ; range: 

        FUNCTS:     Optional output file containing discriminant functions.
        required: No; default: ; range: 

        SCORES:     Optional output file containing the calculated scores for the individual
        samples and a misclassification field.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GROUPID:     Compulsory group identifier field contained in input file IN.
        required: Yes; default: ; range: 

        SAMPID:     Compulsory sample identifier field contained in input file IN.
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        RESUM:     Option  Description  (0)  Do not print summary statistics.  1  Do print
        summary statistics.
        required: No; default: 0; range: 0,1

        PRIMAT:     Option  Description  (0)  Option to display sums of squares matrices. Set
        to 1 for matrices to be displayed.
        required: No; default: 0; range: 0,1

        PRISCO:     Option  Description  (0)  Option to display group scores. Set to 1 for
        scores to be displayed. Note: do not use for large files.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.discan).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DISCAN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def discla(self,
                in_i,
                infuncts_i,
                incentrd_i,
                out_o,
                groupid_f,
                sampid_f,
                f1_to_10_f=['optional']
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file. Must contain sample identity field.
        required: Yes; default: ; range: 

        INFUNCTS:     Input file containing discriminant functions. Produced from process
        DISCAN.
        required: Yes; default: ; range: 

        INCENTRD:     Input file containing group centroids. Produced from process DISCAN. Must
        contain a group identity field specified in GROUPID.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing samples classified into groups identified by the
        GROUPID field and the discriminant scores..
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        GROUPID:     Compulsory group identifier field contained in INCENTRD.
        required: Yes; default: ; range: 

        SAMPID:     Compulsory sample identifier field in input file IN.
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.discla).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DISCLA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def displa(self,
                in_i,
                hardcopy_p=0,
                truesize_p=0,
                xoffset_p=0,
                yoffset_p=0,
                pause_p='optional',
                scale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Plot file. Must contain the fields X, Y, S1, S2 and CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE, XORIG, YORIG, XRT,
        YTP, XPICRT, YPICTP, CHARSIZE and ASPRATIO (numeric, implicit). IN may
        also be a catalogue file, in which case all files in the catalogue will be
        displayed in sequence.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        HARDCOPY:     Option Description 1 Graphics dump to printer [if available].
        required: No; default: 0; range: 0,1

        TRUESIZE:     Option Description 1 Plot at true size in millimetres.
        required: No; default: 0; range: 0,1

        XOFFSET:     Origin offset in X in millimetres (0). Only required if TRUESIZE used.
        required: No; default: 0; range: Undefined

        YOFFSET:     Origin offset in Y in millimetres (0). Only required if TRUESIZE used.
        required: No; default: 0; range: Undefined

        PAUSE:     Pause given number of units after displaying plot. -1 will prompt for
        <return> while in a macro.
        required: No; default: ; range: Undefined

        SCALE:     The scale factor. E.g. enter 1000 for a scale of 1:1000. Note that user
        data units of metres are assumed; if metres are not the unit, then the
        scale must be multiplied by factor f, where f=no. of metres in 1 user data
        unit [e.g. 0.3048 for feet]. If - [absent data] is entered, then the plot
        will be the true size [as defined in the prototype].
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.displa).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DISPLA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dmedit(self,
                in_i,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be edited.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     Send a complete record of the edit session to the printer or print file if
        ECHO=1 , PRINT=2.
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dmedit).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DMEDIT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dmfd(self,
                in_i
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dmfd).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DMFD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def drilgrid(self,
                    points_i,
                    srcparm_i,
                    cutoff_i,
                    casename_o,
                    grade_f,
                    cutoff_f,
                    x_or_ygstart_p,
                    xyginc_p,
                    ngrid_p,
                    vmodnum_p,
                    revenue_p,
                    procost_p,
                    model_i='optional',
                    vmodparm_i='optional',
                    in_i='optional',
                    outmodel_p=0,
                    outsamps_p=0,
                    plots_p=1,
                    tables_p=0,
                    gridmeth_p=1,
                    origmeth_p=3,
                    origsel_p=1,
                    nsim_p=1,
                    modx_popen_y_or_z_pclose_min_p='optional',
                    modx_popen_y_or_z_pclose_max_p='optional',
                    x_or_y_or_zpoints_p=1,
                    recovery_p=100,
                    sampcost_p=0,
                    cfactor_p=1,
                    density_p=1,
                    delete_p=1,
                    scroff1_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POINTS:     Input points file containing simulated points as created by SGSIM. This
        must include the coordinate fields XPT, YPT, ZPT, the grade field GRADE
        and the simulation (realization) number field SIMNUM. It must also include
        the implicit fields XMORIG1, YMORIG1, ZMORIG1, XINC1, YINC1, ZINC1, NX1,
        NY1, NZ1 defining the grid origin, size and number of points, as well as
        the fields XPPPC, YPPPC, ZPPPC defining the number of points per parent
        cell for the output model.  These implicit fields will have been added
        automatically by the process SGSIM
        required: Yes; default: ; range: 

        SRCPARM:     Search volume parameter file. This contains 24 compulsory fields defining
        the search volume and the number of samples needed for grade estimation.
        More than one search volume may be defined. All fields are numeric:
        SREFNUM Search volume reference number. SMETHOD Search volume shape. 1 =
        3D rectangle 2 = ellipsoid. SDIST1 Max search distance in direction 1.
        SDIST2 Max search distance in direction 2. SDIST3 Max search distance in
        direction 3. SANGLE1 First rotation angle for search vol. SANGLE2 Second
        rotation angle. SANGLE3 Third rotation angle. SAXIS1 Axis for 1st rotation
        (1=X,2=Y,3=Z). SAXIS2 Axis for 2nd rotation (1=X,2=Y,3=Z). SAXIS3 Axis for
        3rd rotation (1=X,2=Y,3=Z). MINNUM1 Min number of samples, 1st search vol.
        MAXNUM1 Max number of samples, 1st search vol. SVOLFAC2 Axis multiplying
        factor,2nd search vol. MINNUM2 Min number of samples, 2nd search vol.
        MAXNUM2 Max number of samples, 2nd search vol. SVOLFAC3 Axis multiplying
        factor,3rd search vol. MINNUM3 Min number of samples, 3rd search vol.
        MAXNUM3 Max number of samples, 3rd search vol. OCTMETH Octant method flag.
        0 = no octant search, 1 = use octants. MINOCT Minimum number of octants to
        be filled. MINPEROC Minimum number of samples in an octant. MAXPEROC
        Maximum number of samples in an octant. MAXKEY Maximum number of samples
        with the same key value within an octant SANGL1_F Name of field in the
        input prototype model file that contains the first rotation angle for
        dynamic anisotropy. SANGL2_F Name of field in the input prototype model
        file that contains the second rotation angle for dynamic anisotropy.
        SANGL3_F Name of field in the input prototype model file that contains the
        third rotation angle for dynamic anisotropy
        required: Yes; default: ; range: 

        CUTOFF:     Input file containing list of cutoff grades defined using field COGRADE
        required: Yes; default: ; range: 

        MODEL:     Input block model file containing cells covering the volume to be
        analysed. This must be same volume, or a subset, as the volume covered by
        the simulated points file.
        required: No; default: ; range: 

        VMODPARM:     Variogram model parameter file. Each record in this file defines a
        variogram model type and its parameters. VREFNUM Model variogram reference
        number. VANGLE1 Variogram anisotropy angle 1. VANGLE2 Variogram anisotropy
        angle 2. VANGLE3 Variogram anisotropy angle 3. VAXIS1 Model variogram
        rotation axis 1. VAXIS2 Model variogram rotation axis 2. VAXIS3 Model
        variogram rotation axis 3. NUGGET Nugget variance. ST1 Variogram model
        type for structure 1. 1 = Spherical. 2 = Power [eg 1 - linear]. 3 =
        Exponential. 4 = Gaussian. 5 = De Wijsian. ST1PAR1 1st parameter of
        structure 1 [Range 1 for spherical model]. ST1PAR2 2nd parameter of
        structure 1 [Range 2 for spherical model]. ST1PAR3 3rd parameter of
        structure 1 [Range 3 for spherical model]. ST1PAR4 4th parameter of
        structure 1 [C variance for spherical model]. STn Variogram model type for
        structure n. STnPARp pth parameter for structure n, where n<=3
        required: No; default: ; range: 

        IN:     Input file containing a compound (multiple) block model created and saved
        during a previous run of DRILGRID. It includes multiple models appended
        into a single file
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        CASENAME:     A case name or code that forms the first part of multiple output plot and
        table files that are created during processing. The second part of the
        file name is fixed. A description of each file is given in the main Help.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     Field in the input POINTS sample file defining the simulated grade
        required: Yes; default: X; range: 

        CUTOFF:     Field in the input CUTOFF file defining a set of cutoff grades
        required: Yes; default: Y; range: 

        ----------
        PARAMETERS
        ----------

        X/YGSTART:     Minimum size of drilling grid in the X/Y direction defined as a multiple
        of the simulated point spacing in X. For example if the X spacing between
        points in the POINTS file is 5m and X/YGSTART=2 then the minimum X grid
        size for drilling spacing will be 5*2=10m
        required: Yes; default: 1; range: Undefined

        XYGINC:     Increment in X/Y direction between successive drilling grid sizes defined
        as a multiple of the simulated point spacing in Y. For example if the Y
        spacing between points in the POINTS file is 5m and X/YGINC=1 then the
        increment between successive Y grid sizes will be 5*1=5m
        required: Yes; default: 1; range: Undefined

        NGRID:     Number of different drilling grid sizes
        required: Yes; default: 2; range: Undefined

        VMODNUM:     Variogram model number in VMODPARM file
        required: Yes; default: ; range: Undefined

        REVENUE:     Sales revenue per unit. For example if the simulated values are g/t then
        the revenue must be defined as $/g
        required: Yes; default: ; range: Undefined

        PROCOST:     Processing cost. For example if the simulated values are g/t and the
        revenue $/g then the processing cost should be $/t
        required: Yes; default: 0; range: Undefined

        OUTMODEL:     Flag to select whether output compound model is created  =0 : Output
        compound model is not created. =1 : Output compound model is created.
        required: No; default: 0; range: 0,1

        OUTSAMPS:     Flag to select whether output compound sample file is created  =0 : Output
        compound sample file is not created. =1 : Output compound sample file is
        created.
        required: No; default: 0; range: 0,1

        PLOTS:     Flag to select which plots to create  =0 : No plots created. Therefore no
        tables will be created either. Just create the compound model and sample
        file. =1 : Create plots showing relationship between estimation error and
        grid spacing/number of samples. =2 : Create other plots including
        misclassification cost analysis. =3 : Create all plots ie both 1 and 2.
        required: No; default: 1; range: 0,3

        TABLES:     Flag to select table output. Note that tables are only created if
        corresponding plots are selected  =0 : No tables created. =1 : Create
        tables for which plots have been selected using parameter PLOTS.
        required: No; default: 0; range: 0,1

        GRIDMETH:     Method for defining relationship between the size of the drilling grid in
        the X and Y directions  =1 : The drilling grid size increases in both X
        and Y as defined by parameters XGSTART, XGINC, NGRID, YGSTART, YGINC. =2 :
        The drilling grid size increases in X but is constant in Y as defined by
        parameters XGSTART, XGINC, NGRID, YGSTART. =3 : The drilling grid size
        increases in Y but is constant in X as defined by parameters YGSTART,
        YGINC, NGRID, XGSTART.
        required: No; default: 1; range: 1,3

        ORIGMETH:     Method for defining the origin for selecting samples from the simulated
        points file  =1 : Only use one grid origin position. This can lead to
        biased results as not all relative locations of samples and model cells
        will be tested. However it will result in amuch faster run time. =2 : All
        grid origin positions within a model cell are selected and the results are
        averaged over all combinations. =3 : Every nth possible grid origin
        position in X and Y are selected and the results are averaged over all
        combinations. The value of n is defined by parameter ORIGSEL.
        required: No; default: 3; range: 1,3

        ORIGSEL:     Origin selection number. If 1 then all possible origin positions will be
        selected. If 2 then every second origin position will be selected. If n
        then every nth origin position will be selected.
        required: No; default: 1; range: Undefined

        NSIM:     Number of simulations to be used. This must be less than or equal to the
        maximum number of simulations in the POINTS file. The default is the
        maximum number in the POINTS file
        required: No; default: 1; range: Undefined

        MODX(Y/Z)MIN:     Minimum X(Y/Z)C value of cell in input MODEL to be estimated. The default
        is the model origin
        required: No; default: ; range: Undefined

        MODX(Y/Z)MAX:     Maximum X(Y/Z)C value of cell in input MODEL to be estimated. The default
        is the maximum possible XC value in the model
        required: No; default: ; range: Undefined

        X/Y/ZPOINTS:     Number of discretisation points in X/Y/Z
        required: No; default: 1; range: Undefined

        RECOVERY:     Processing recovery expressed as a percentage
        required: No; default: 100; range: Undefined

        SAMPCOST:     Drilling and sampling cost in $/sample. The drilling component of the cost
        must therefore take account of the sample length
        required: No; default: 0; range: Undefined

        CFACTOR:     Cost factor. Dividing factor applied to cost values plotted on the Y axis.
        For example if CFACTOR=1000000 then the annotated units will be millions
        of dollars
        required: No; default: 1; range: Undefined

        DENSITY:     Density. This used for calculating tonnes
        required: No; default: 1; range: Undefined

        DELETE:     Flag to select whether temporary files are deleted when the command
        finishes  =0 : Do not delete temporary files. =1 : Delete temporary files.
        required: No; default: 1; range: 0,1

        SCROFF1:     Flag to select whether command output is sent to a log file. This
        parameter will be removed for the release version  =0 : Output is sent to
        the Command Window. =1 : Output is sent to the log file.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.drilgrid).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DRILGRID ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dtmcut(self,
                proto_i,
                wiretr1_i,
                wirept1_i,
                wiretr2_i,
                wirept2_i,
                cutmodou_o,
                results_o,
                density_f,
                cutfld_f,
                cutden_p,
                fillden_p,
                splits_p,
                cutval_p,
                fillval_p,
                perimin_i='optional',
                attrib_f='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input block model prototype.
        required: Yes; default: ; range: 

        WIRETR1:     Triangle file of original wireframe surface (DTM).
        required: Yes; default: ; range: 

        WIREPT1:     Point file of original wireframe surface (DTM).
        required: Yes; default: ; range: 

        WIRETR2:     Triangle file of update wireframe surface (DTM).
        required: Yes; default: ; range: 

        WIREPT2:     Point file of update wireframe surface (DTM).
        required: Yes; default: ; range: 

        PERIMIN:     Optional input perimeter file controlling sub-division of cut-and-fill
        volumes.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        CUTMODOU:     Output block model of cut and fill volumes.
        required: Yes; default: ; range: 

        RESULTS:     Output evaluation results data file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        DENSITY:     Density field in output block model.
        required: Yes; default: ; range: 

        CUTFLD:     Output numeric field defining cut and fill volumes.
        required: Yes; default: ; range: 

        ATTRIB:     Optional attribute field from input perimeter file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTDEN:     Density of cut volumes.
        required: Yes; default: 1; range: 0,99999

        FILLDEN:     Density of filled volumes.
        required: Yes; default: 1; range: 0,99999

        SPLITS:     Subcell splitting of cut and fill block model.
        required: Yes; default: 0; range: 0,3

        CUTVAL:     Value assigned to CUTFLD for cells inside cut volume.
        required: Yes; default: -1; range: 

        FILLVAL:     Value assigned to CUTFLD for cells inside fill volume.
        required: Yes; default: 1; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dtmcut).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DTMCUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dtmmod(self,
                wiretr_i,
                wirept_i,
                modelin_i,
                cutmodou_o,
                results_o,
                density_f,
                cutfld_f,
                fillden_p,
                splits_p,
                cutval_p,
                fillval_p,
                perimin_i='optional',
                modelou_o='optional',
                attrib_f='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Triangle file of update wireframe surface (DTM).
        required: Yes; default: ; range: 

        WIREPT:     Point file of update wireframe surface (DTM).
        required: Yes; default: ; range: 

        MODELIN:     Original block model.
        required: Yes; default: ; range: 

        PERIMIN:     Optional input perimeter file controlling sub-division of cut-and-fill
        volumes.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        CUTMODOU:     Output block model of cut and fill volumes.
        required: Yes; default: ; range: 

        RESULTS:     Output evaluation results data file.
        required: Yes; default: ; range: 

        MODELOU:     Updated block model, with cut volume removed.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        DENSITY:     Density field in input block model.
        required: Yes; default: ; range: 

        CUTFLD:     Output numeric field defining cut and fill volumes.
        required: Yes; default: ; range: 

        ATTRIB:     Optional attribute field from input perimeter file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        FILLDEN:     Density of filled volumes.
        required: Yes; default: 1; range: 0,99999

        SPLITS:     Subcell splitting of cut and fill block model.
        required: Yes; default: 0; range: 0,3

        CUTVAL:     Value assigned to CUTFLD for cells inside cut volume.
        required: Yes; default: -1; range: 

        FILLVAL:     Value assigned to CUTFLD for cells inside fill volume.
        required: Yes; default: 1; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dtmmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DTMMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def dxfout(self,
                in_i,
                layer_f='optional',
                tolernce_p=0.001,
                realwrld_p=0,
                dm_p=0,
                maxvert_p=2000,
                layernam_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Database plotfile to be output to AUTOCAD DXF format.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        LAYER:     Field containing layer identification. DXF entities will be allocated to
        layers numbered from 1 to n, depending on how many unique identifiers are
        present in IN. The default field name is LAYER
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        TOLERNCE:     Tolerance used in determining if lines can be reconstructed into polylines
        and individual characters into text strings (0.001).
        required: No; default: 0.001; range: Undefined

        REALWRLD:     If set to 1, back converts plotted millimeters to real world co-ordinates
        based on the scaling information provided in the XMIN, XMAX, YMIN, YMAX,
        XSCALE and YSCALE fields in the plot file (0).
        required: No; default: 0; range: 0,1

        DM:     If set to 1, copies DATAMINE colour numbers to the DXF file without
        translation. Otherwise, colours are converted according to a table which
        is suitable for AUTOCAD. (0)
        required: No; default: 0; range: 0,1

        MAXVERT:     Maximum allowable vertices in a single polygon in the DXF file. The
        default is 2000, but this may be too large for some CAD systems.
        required: No; default: 2000; range: Undefined

        LAYERNAM:     Set to 1 to put layer names into the output file without translation. The
        default is 0.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.dxfout).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'DXFOUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ellipse(self,
                wiretr_o,
                wirept_o,
                srcparm_i='optional',
                srefnum_p='optional',
                xcentre_p=0,
                ycentre_p=0,
                zcentre_p=0,
                print_p=0,
                sangle1_p=0,
                sangle2_p=0,
                sangle3_p=0,
                saxis1_p=3,
                saxis2_p=1,
                saxis3_p=3,
                sdist1_p=10,
                sdist2_p=10,
                sdist3_p=10
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SRCPARM:     Input search volume parameter file, as used in the ESTIMA process. This
        file must contains the fields SREFNUM, SANGLE1, SANGLE2, SANGLE3, SAXIS1,
        SAXIS2, SAXIS3, SDIST1, SDIST2, and SDIST3, which define the orientation
        and dimensions of the search volume.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Optional output wireframe triangle file. If this file is not specified a
        file with the name ELTR will be created.
        required: Yes; default: ; range: 

        WIREPT:     Optional output wireframe points file. The wireframe will be created to
        enclose the limits of the rotated model.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SREFNUM:     If a search volume parameter file (SRCPARM) is specified, then it must
        include a field SREFNUM which defines a unique reference number for each
        search volume. The SREFNUM parameter then defines which search volume will
        be used. If the SREFNUM parameter is set to absent data (the default),
        then the first search volume in the file will be used.
        required: No; default: ; range: Undefined

        XCENTRE:     The X coordinate of the centre of the ellipsoid.
        required: No; default: 0; range: Undefined

        YCENTRE:     The Ycoordinate of the centre of the ellipsoid. .
        required: No; default: 0; range: Undefined

        ZCENTRE:     The Z coordinate of the centre of the ellipsoid.
        required: No; default: 0; range: Undefined

        PRINT:     Print flag: =0 for minimum output. =1 for runtime information messages.
        required: No; default: 0; range: 0,1

        SANGLE1:     First rotation angle clockwise in degrees, around axis SAXIS1 . It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation.
        required: No; default: 0; range: -360,360

        SANGLE2:     Second rotation angle clockwise in degrees, around axis SAXIS2 . It must
        lie between 360.0 and +360.0. A value of zero indicates no rotation.
        required: No; default: 0; range: -360,360

        SANGLE3:     Third rotation angle clockwise in degrees, around axis SAXIS3 . It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation.
        required: No; default: 0; range: -360,360

        SAXIS1:     Axis around which first rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis.
        required: No; default: 3; range: 0,3

        SAXIS2:     Axis around which second rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis.
        required: No; default: 1; range: 0,3

        SAXIS3:     Axis around which third rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis.
        required: No; default: 3; range: 0,3

        SDIST1:     The length of the first axis of the ellipsoid. Initially, before any
        rotation, SDIST1 is along the X axis.
        required: No; default: 10; range: Undefined

        SDIST2:     The length of the second axis of the ellipsoid. Initially, before any
        rotation, SDIST2 is along the Y axis.
        required: No; default: 10; range: Undefined

        SDIST3:     The length of the third axis of the ellipsoid. Initially, before any
        rotation, SDIST3 is along the Z axis.
        required: No; default: 10; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ellipse).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ELLIPSE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def englog(self,
                in_i,
                showcode_p,
                dict_i='optional',
                remarks_i='optional',
                lhmargin_p=1,
                rhmargin_p=79,
                lines_p=0,
                noff_p=0,
                double_p=0,
                sysfile_p=0,
                eng_marg_p=0,
                eng_leng_p=79,
                precdent_p=0,
                nocomma_p=0,
                nonl_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     The input data file containing the coded log. This must contain at least
        the BHID and FROM fields. All fields which are to be decoded [the English
        fields] must be of the same type [alpha or numeric] and the same length
        [if alpha].
        required: Yes; default: ; range: 

        DICT:     The dictionary file containing the translated codes. It must contain the 3
        fields TYPE, CODE and TEXT.
        required: No; default: ; range: 

        REMARKS:     The remarks file contains the three fields BHID, FROM and TEXT, and should
        be sorted on BHID and FROM. The TEXT field is multi- character alpha.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SHOWCODE:     This parameter controls the output of codes if no english translation is
        given. Option Description 0 the code is ignored, i.e. treated as absent.
        (0) 1 the code is printed without translation
        required: Yes; default: 0; range: 0,1

        LHMARGIN:     Start column for printing (1).
        required: No; default: 1; range: 1,79

        RHMARGIN:     End column for printing (79).
        required: No; default: 79; range: 1,79

        LINES:     Number of lines per page of output (0). 0 - no paging.
        required: No; default: 0; range: Undefined

        NOFF:     Option Description (0) Show form feeds. 1 Suppresses form feeds.
        required: No; default: 0; range: 0,1

        DOUBLE:     Option Description (0) Single spacing [default]; 1 Double spacing.
        required: No; default: 0; range: 0,1

        SYSFILE:     Option Description (0) Send report to print file. 1 Send report to a
        system file rather than the print file. The file name is requested
        interactively.
        required: No; default: 0; range: 0,1

        ENG_MARG:     The number of spaces left as a margin on the lefthand side of the output
        report before the decoded text is written. Default is (0).
        required: No; default: 0; range: Undefined

        ENG_LENG:     The number of characters per line for the translated text part of the
        output report. This does not include the spaces defined by ENG_MARG.(79)
        required: No; default: 79; range: 1,79

        PRECDENT:     This parameter controls the output of the precedent. The precedent itself
        is defined interactively. Note that this parameter affects the printing of
        antecedents in the same way. Option Description 0 If there is no code in
        the IN file [ie if it is blank for an alpha field or '-' for numeric] then
        the precedent is not included in the report. (0) 1 The precedent [if it
        has been defined] will always appear in the output report, even if the
        coded field to which it applies is absent data.
        required: No; default: 0; range: 0,1

        NOCOMMA:     This parameter controls the output of a comma following each ENGLISH_FIELD
        . Option Description 0 a comma will be printed after each field, unless an
        antecedent has been specified (0) 1 there will be no automatic printing of
        commas. If required, they must be specified as antecedents.
        required: No; default: 0; range: 0,1

        NONL:     This parameter controls the output of a new-line following each drillhole
        interval. Option Description 0 a new-line will be output after each
        interval. (0) 1 a new-line will not be output after each interval.
        required: No; default: 0; range: 0,1

        PRINT:     nan
        required: No; default: 0; range: -1,0

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.englog).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ENGLOG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def envseq(self,
                envmodel_i,
                results_i,
                costs_i,
                out_o,
                envbest_f,
                envelope_f,
                hdgrade_p,
                distmeth_p,
                sequence_i='optional',
                grade_f='optional',
                value_f='optional',
                shapzone_f='optional',
                envnum_f='ENVNUM',
                density_f='optional',
                refz_p='optional',
                refx_p='optional',
                refy_p='optional',
                seqopt_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        ENVMODEL:     Input model file for evaluation. This will have been created as the output
        &ENVMODEL file by process MODENV. It must have the fields XMORIG, YMORIG,
        ZMORIG, NX, NY, NZ (implicit) and IJK, XC, YC and ZC (explicit). XINC,
        YINC and ZINC must exist as either explicit (sub-cells permitted) or
        implicit (no sub-cells). If it is a Rotated Model then it must also
        include the fields X0, Y0, Z0, ANGLE1, ANGLE2, ANGLE3, ROTAXIS1, ROTAXIS2,
        and ROTAXIS3. The file also has the fields *GRADE, *VALUE, *ENVBEST,
        *DENSITY, *OPTIMISE, *ENVELOPE and *SHAPZONE if specified. The value in
        the *ENVBEST field depend on the default value of the implicit field
        *OPTIMISE: 1 - (maximize ore tonnes) then the values in the two fields are
        ore tonnes. 2 - (maximize grade) then the values in the two fields are
        grade. 3 - (maximize metal) then the values in the two fields are metal
        content. 4 - (maximize dollars) then the values in the two fields are
        dollars.
        required: Yes; default: ; range: 

        RESULTS:     Input results summary file to report statistics for each envelope, with
        fields *ENVNUM, *ENVELOPE, *SHAPZONE, *GRADE, *VALUE, VOLUME, TONNES,
        MINX, MAXX, MINY, MAXY, MINZ, MAXZ, COGX, COGY, COGZ. Each combination of
        *ENVELOPE (and *SHAPZONE if supplied) is included by MODENV but only those
        records where *ENVELOPE has the value 'TOTAL' are used in the sequencing.
        required: Yes; default: ; range: 

        COSTS:     Input file to define the costs associated with alternate sequence
        combinations. The fields SIZE, HORDIST, VERDIST, PENALTY1, PENALTY2 are
        required. The file must have all combinations of the discrete values
        selected for SIZE, HORDIST and VERDIST and be sorted in the same field
        order.
        required: Yes; default: ; range: 

        SEQUENCE:     Optional input file to define required sequence relationships between
        envelopes. Three fields ENVNUM1, ENVNUM2 and SEQTYPE are required.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output sequence summary file, with pairs of sequence relationships in
        ENVNUM1 and ENVNUM2. The initial envelope value IVALUE, the penalty values
        PENALTY1 and PENALTY2 to the previous envelope, and PENALTY3 for prior
        envelopes and the final envelope value FVALUE are output. This file will
        also contain the centre of gravity of each envelope, if @DISTMETH=1, or
        the coordinates of the closest points, if @DISTMETH=2 stored in the fields
        (X1,Y1,Z1) and (X2,Y2,Z2).
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ENVBEST:     Numeric (explicit) field for the best envelope grade or value in the
        &ENVMODEL file.
        required: Yes; default: ENVBEST; range: 

        ENVELOPE:     Alphanumeric (explicit) field for the cell envelope code in the &ENVMODEL
        file.
        required: Yes; default: ENVELOPE; range: 

        GRADE:     Numeric (explicit) field for the grade of input model blocks.
        required: No; default: ; range: 

        VALUE:     Numeric (explicit) field for the value of input model blocks.
        required: No; default: ; range: 

        SHAPZONE:     Field in the input model to distinguish zones.
        required: No; default: ; range: 

        ENVNUM:     Numeric (explicit) field for the envelope number in the &ENVMODEL file.
        required: No; default: ENVNUM; range: 

        DENSITY:     Optional density field in the input model for average grade and tonnage
        calculations.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        HDGRADE:     Required head grade for economic envelopes. The definition of head grade
        depends on the value of @SEQOPT. An absent value will cause the head grade
        test to be ignored.
        required: Yes; default: ; range: Undefined

        DISTMETH:     Method for defining the envelope separation: 1 - measured by centre of
        gravity 2 - measured as the closest distance between the envelope
        surfaces.
        required: Yes; default: 1; range: 1,2

        REFZ:     Reference elevation for calculation of penalties for the initial envelope.
        If a &SEQUENCE file is not defined then the reference elevation would
        normally be the surface elevation. The coordinate system for defining
        @REFZ is the unrotated system used in &ENVMODEL.
        required: No; default: ; range: Undefined

        REFX:     Reference X coordinate for calculation of penalties for the initial
        envelope. If a &SEQUENCE file is not defined then the reference X
        coordinate would normally be the Easting of the existing or proposed
        shaft. The coordinate system for defining @REFX is the unrotated system
        used in &ENVMODEL. If the value is set to absent data (the default) then
        neither the X or Y reference coordinates are used.
        required: No; default: ; range: Undefined

        REFY:     Reference Y coordinate for calculation of penalties for the initial
        envelope. If a &SEQUENCE file is not defined then the reference Y
        coordinate would normally be the Easting of the existing or proposed
        shaft. The coordinate system for defining @REFY is the unrotated system
        used in &ENVMODEL. If the value is set to absent data (the default) then
        neither the X or Y reference coordinates are used.
        required: No; default: ; range: Undefined

        SEQOPT:     Method to be used for ranking the envelope sequence: 0 - Use the same
        method used for optimizing the &ENVMODEL model. This is recorded as the
        default value of implicit field OPTIMISE in file &ENVMODEL. 1 - Maximize
        ore tonnes ie minimize [below cutoff] waste. 2 - Maximize grade 3 -
        Maximize contained metal 4 - Maximize accumulated value ie for dollar
        value.
        required: No; default: 0; range: 0,4

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.envseq).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ENVSEQ ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def estima(self,
                proto_i,
                in_i,
                srcparm_i,
                estparm_i,
                model_o,
                vmodparm_i='optional',
                string_i='optional',
                sampout_o='optional',
                x_f='optional',
                y_f='optional',
                z_f='optional',
                zone1_f_f='optional',
                zone2_f_f='optional',
                key_f='optional',
                length_f_f='optional',
                dens_f_f='optional',
                section_f='SECTION',
                boundary_f='BOUNDARY',
                wstag_f='optional',
                bstag_f='optional',
                tag_f='optional',
                discmeth_p=1,
                xpoints_p=1,
                ypoints_p=1,
                zpoints_p=1,
                xdspace_p='optional',
                ydspace_p='optional',
                zdspace_p='optional',
                parent_p=1,
                dyankr_p=1,
                mindisc_p=1,
                copyval_p=0,
                fvaltype_p=1,
                fstep_p='optional',
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                zmin_p='optional',
                zmax_p='optional',
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                allwgts_p=0,
                linkmode_p=3,
                ucsamode_p=2,
                ucsbmode_p=3,
                ucscmode_p=2,
                plane_p=1,
                hangid_p='optional',
                footid_p='optional',
                tolrnc_p=0,
                ucsalimt_p=1,
                orgtag_p='optional',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input model prototype.  This is a standard block model file containing the
        13 compulsory fields. It may also contain the rotated model fields. If it
        includes cells then it must be sorted on IJK.
        required: Yes; default: ; range: 

        IN:     Input sample data. This must contain X,Y and Z fields and at least one
        grade field.
        required: Yes; default: ; range: 

        SRCPARM:     Search volume parameter file.  This contains 24 compulsory fields defining
        the search volume and the number of samples needed for grade estimation.
        More than one search volume may be defined. All fields are numeric:
        SREFNUM Search volume reference number. SMETHOD Search volume shape.  1 =
        3D rectangle  2 = ellipsoid.  SDIST1 Max search distance in direction 1.
        SDIST2 Max search distance in direction 2.  SDIST3 Max search distance in
        direction 3.  SANGLE1 First rotation angle for search vol.  SANGLE2 Second
        rotation angle.  SANGLE3 Third rotation angle.  SAXIS1 Axis for 1st
        rotation (1=X,2=Y,3=Z).  SAXIS2 Axis for 2nd rotation (1=X,2=Y,3=Z).
        SAXIS3 Axis for 3rd rotation (1=X,2=Y,3=Z).  MINNUM1 Min number of
        samples, 1st search vol.  MAXNUM1 Max number of samples, 1st search vol.
        SVOLFAC2 Axis multiplying factor,2nd search vol.  MINNUM2 Min number of
        samples, 2nd search vol.  MAXNUM2 Max number of samples, 2nd search vol.
        SVOLFAC3 Axis multiplying factor,3rd search vol.  MINNUM3 Min number of
        samples, 3rd search vol.  MAXNUM3 Max number of samples, 3rd search vol.
        OCTMETH Octant method flag.  0 = no octant search,  1 = use octants.
        MINOCT Minimum number of octants to be filled.  MINPEROC Minimum number of
        samples in an octant.  MAXPEROC Maximum number of samples in an octant.
        MAXKEY Maximum number of samples with the same key value within an octant
        SANGL1_F Name of field in the input prototype model file that contains the
        first rotation angle for dynamic anisotropy.  SANGL2_F Name of field in
        the input prototype model file that contains the second rotation angle for
        dynamic anisotropy.  SANGL3_F Name of field in the input prototype model
        file that contains the third rotation angle for dynamic anisotropy.
        required: Yes; default: ; range: 

        ESTPARM:     Estimation parameter file. Each record in the file describes an estimation
        method and its associated parameters. The fields are dependent on the
        estimation methods selected. All fields are optional except for VALUE_IN
        and SREFNUM.  General fields:  VALUE_IN 2A4 Field to be estimated.
        SREFNUM N Search volume reference number.  VALUE_OU 2A4 Field to be
        created in  MODEL (Default is VALUE_IN).  {ZONE1_F} A/N 1st field for
        zonal estimation.  The actual name of the field is given by ZONE1_F on
        command line eg ZONE1_F(ROCK). {ZONE2_F} A/N 2nd field for zonal
        estimation.  NUMSAM_F 2A4 Field to be created in MODEL for the number of
        samples.  SVOL_F 2A4 Field to be created in MODEL for dynamic search
        volume number. V  VAR_F 2A4 Field to be created in MODEL for variance of
        estimate.  MINDIS_F 2A4 Field to be created in MODEL for distance to
        nearest sample.  IMETHOD N Estimation method.  1 = Nearest neighbour (NN).
        2 = Inverse power of dist (IPD).  3 = Ordinary kriging (OK).  4 = Simple
        kriging (SK).  5 = Sichel's t estimator.  6 = Ordinary macro kriging.  7 =
        Simple macro kriging.  8 = Circular IPD, for estimating angles.  9 =
        Correlation factor method.  Fields for IPD:  ANISO N Anisotropy method:  0
        = no anisotropy.  1 = use search vol anisotropy.  2 = use ANANGLEn.
        ANANGLE1 N Anisotropy angle 1.  ANANGLE2 N Anisotropy angle 2.  ANANGLE3 N
        Anisotropy angle 3.  ANDIST1 N Anisotropy distance 1.  ANDIST2 N
        Anisotropy distance 2.  ANDIST3 N Anisotropy distance 3.  POWER N Power of
        distance for weighting.  ADDCON N Constant added to distance.  Fields for
        kriging:  VREFNUM N Variogram model reference number.  VANGL1_F 2A4 Name
        of field in input prototype model MODEL used to define the first variogram
        rotation angle for dynamic anisotropy.  VANGL2_F 2A4 Name of field in
        input prototype model MODEL used to define the second variogram rotation
        angle for dynamic anisotropy.  VANGL3_F 2A4 Name of field in input
        prototype model MODEL used to define the third variogram rotation angle
        for dynamic anisotropy.  LOG N Lognormal variogram flag.  0 = normal
        kriging.  1 = lognormal kriging.  KRIGNEGW N Treatment of -ve weights:  0
        = -ve weights kept and used.  1 = ignore samples with -ve weights
        KRIGVARS N Treatment of variance > sill:  0 = write variance to MODEL.  1
        = set variance to sill.  Fields for lognormal kriging:  GENCASE N
        Calculation method:  0 = Rendu's method.  1 = General case.  DEPMEAN N
        Deposit mean [If 0 then use kriged estimate]. Fields for general case:
        TOL N Tolerance for convergence.  MAXITER N Maximum number of iterations.
        Fields for simple kriging:  LOCALMNP N Method for calculation of local
        mean: 1 = use field defined in  PROTO 2 = use mean within search vol.
        LOCALM_F 2A4 Name of local mean field in PROTO; used if LOCALMNP=1
        required: Yes; default: ; range: 

        VMODPARM:     Variogram model parameter file. Each record in this file defines a
        variogram model type and its parameters.  Only the VREFNUM field is
        compulsory.  VREFNUM Model variogram reference number.  VANGLE1 Variogram
        anisotropy angle 1.  VANGLE2 Variogram anisotropy angle 2.  VANGLE3
        Variogram anisotropy angle 3.  VAXIS1 Model variogram rotation axis 1.
        VAXIS2 Model variogram rotation axis 2.  VAXIS3 Model variogram rotation
        axis 3.  NUGGET Nugget variance.  ST1 Variogram model type for structure
        1.  1 = Spherical.  2 = Power [eg 1 - linear].  3 = Exponential.  4 =
        Gaussian.  5 = De Wijsian.  ST1PAR1 1st parameter of structure 1 [Range 1
        for spherical model].  ST1PAR2 2nd parameter of structure 1 [Range 2 for
        spherical model].  ST1PAR3 3rd parameter of structure 1 [Range 3 for
        spherical model].  ST1PAR4 4th parameter of structure 1 [C variance for
        spherical model].  STn Variogram model type for structure n.  STnPARp pth
        parameter for structure n, where n<=9.
        required: No; default: ; range: 

        STRING:     Input string file holding the boundary strings which define the stratified
        unit[s] for unfolding.  7 fields are compulsory:  SECTION , BOUNDARY ,
        PVALUE , XP , YP , ZP and PTN.  3 optional fields are WSTAG , BSTAG and
        TAG.  The file must be sorted on SECTION , BOUNDARY PTN , with SECTION
        being the primary keyfield. It is assumed that the section numbering
        system is such that sorting on SECTION will ensure that physically
        adjacent sections are adjacent in the STRING file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output model containing estimated grades, variance etc.
        required: Yes; default: ; range: 

        SAMPOUT:     Output sample file containing details of weights for each sample for each
        cell estimated.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data in IN file. If not specified, then X is
        assumed. If the unfolding option is used, then the X coordinate must be
        set to the unfolded UCSA coordinate.
        required: No; default: ; range: 

        Y:     Y coordinate of sample data in IN file. If not specified, then Y is
        assumed. If the unfolding option is used, then the Y coordinate must be
        set to the unfolded UCSB coordinate.
        required: No; default: ; range: 

        Z:     Z coordinate of sample data in IN file. If not specified, then Z is
        assumed. If the unfolding option is used, then the Z coordinate must be
        set to the unfolded UCSC coordinate.
        required: No; default: ; range: 

        ZONE1_F:     First field for zonal control. A maximum of 202 zone combinations is
        permitted.
        required: No; default: ; range: 

        ZONE2_F:     Second field for zonal control. A maximum of 202 zone combinations is
        permitted.
        required: No; default: ; range: 

        KEY:     Key field used to specify the field limiting the number of samples for
        estimation. The field must exist in the IN file.
        required: No; default: ; range: 

        LENGTH_F:     Field used for length weighting in IPD. The field must exist in the IN
        file.
        required: No; default: ; range: 

        DENS_F:     Field used for density weighting in IPD. The field must exist in the IN
        file.
        required: No; default: ; range: 

        SECTION:     The name of the numeric field in the STRING file holding the section
        identifier; used if the unfolding option is required. The default field
        name is SECTION.
        required: No; default: SECTION; range: 

        BOUNDARY:     The name of the numeric field in the STRING file holding the boundary
        identifier; used if the unfolding option is required. The default field
        name is BOUNDARY.
        required: No; default: BOUNDARY; range: 

        WSTAG:     Within Section TAG; used if the unfolding option is required. This is a
        numeric field in the STRING file, defining the stratigraphical links
        between hangingwall and footwall points on strings within the same
        section. A value of 0 or - means that the point is not linked. The default
        field name is WSTAG.
        required: No; default: ; range: 

        BSTAG:     Between Section TAG; used if the unfolding option is required. This is a
        numeric field in the STRING file, defining the stratigraphical links
        between 2 points on strings on adjacent sections with the same BOUNDARY. A
        value of 0 or - means that the point is not linked. The default field name
        is BSTAG.
        required: No; default: ; range: 

        TAG:     A numeric tag field in the STRING file; used if the unfolding option is
        requires. It defines both the stratigraphical links between points on
        strings within the same section, and between points on adjacent sections
        with the same BOUNDARY. A value of 0 or - means that the point is not
        linked. The default field name is TAG.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DISCMETH:     Cell discretisation method:  Option  Description  1  - use XPOINTS ,
        YPOINTS , ZPOINTS to define the number of points in the X,Y,Z directions
        2  - use XDSPACE , YDSPACE , ZDSPACE to define the distance between
        points. The default is method (1).
        required: No; default: 1; range: 1,2

        XPOINTS:     Number of discretisation points in X. (1)
        required: No; default: 1; range: Undefined

        YPOINTS:     Number of discretisation points in Y. (1)
        required: No; default: 1; range: Undefined

        ZPOINTS:     Number of discretisation points in Z. (1)
        required: No; default: 1; range: Undefined

        XDSPACE:     Distance between discretisation points in X if DISCMETH=2. The default
        gives just one point.
        required: No; default: ; range: Undefined

        YDSPACE:     Distance between discretisation points in Y if DISCMETH=2. The default
        gives just one point.
        required: No; default: ; range: Undefined

        ZDSPACE:     Distance between discretisation points in Z if DISCMETH=2. The default
        gives just one point.
        required: No; default: ; range: Undefined

        PARENT:     Flag to control parent cell estimation:  Option  Description  0  -
        Estimate into individual subcells.  1  - Represent parent cell by a full
        3D matrix of points.  2  - Represent parent cell by a 3D matrix of points,
        but select only points lying within subcells. The default is (0).
        required: No; default: 1; range: 0,2

        DYANKR:     Flag to select whether the variogram model rotation angles should use the
        dynamic anisotropy option:  Option  Description  0  - Do not use dynamic
        anisotropy. Use angles VANGLEn as defined in the variogram model parameter
        file VMODPARM.  1  - If the search volume uses dynamic anisotropy, then
        the variogram model uses the same set of angles.  2  - Use dynamic
        anisotropy, but with a different set of angles from the search volume. The
        names of the corresponding fields are specified by fields VANGLn_F in the
        estimation parameter file ESTPARM.
        required: No; default: 1; range: 0,2

        MINDISC:     Minimum number of discretisation points. Only used if PARENT=2. The
        default is (1).
        required: No; default: 1; range: Undefined

        COPYVAL:     Flag controlling copying of values from PROTO to MODEL if there is
        insufficient data to estimate them:  Option  Description  0  - Assign
        absent data value[s] in MODEL.  1  - Copy from PROTO to MODEL. The default
        is (0).
        required: No; default: 0; range: 0,1

        FVALTYPE:     Flag for cell approximation for F values:  Option  Description  0  - The
        exact dimensions of the cell are used  1  - Each cell is approximated by
        one of a discrete number of cell sizes. The default is (1).
        required: No; default: 1; range: 1,2

        FSTEP:     Step size for cell approximation. This is only used if FVALTYPE=2.
        required: No; default: ; range: Undefined

        XMIN:     Minimum X value for model updating. The default is the X model origin.
        required: No; default: ; range: Undefined

        XMAX:     Maximum X value for model updating. The default is the maximum X value for
        PROTO.
        required: No; default: ; range: Undefined

        YMIN:     Minimum Y value for model updating. The default is the Y model origin.
        required: No; default: ; range: Undefined

        YMAX:     Maximum Y value for model updating. The default is the maximum Y value for
        PROTO.
        required: No; default: ; range: Undefined

        ZMIN:     Minimum Z value for model updating. The default is the Z model origin.
        required: No; default: ; range: Undefined

        ZMAX:     Maximum Z value for model updating. The default is the maximum Z value for
        PROTO.
        required: No; default: ; range: Undefined

        XSUBCELL:     Number of subcells per parent cell in X if PROTO is empty. The default is
        (1).
        required: No; default: 1; range: Undefined

        YSUBCELL:     Number of subcells per parent cell in Y if PROTO is empty. The default is
        (1).
        required: No; default: 1; range: Undefined

        ZSUBCELL:     Number of subcells per parent cell in Z if PROTO is empty. The default is
        (1).
        required: No; default: 1; range: Undefined

        ALLWGTS:     Flag controlling which samples are written to the sample output file if
        IMETHOD=9 [correlation factor method].  Option  Description  0  - Only
        samples with non-zero weights are written to the sample output file.  1  -
        All samples in the search volume including those with zero weights are
        written to the sample output file.
        required: No; default: 0; range: 0,1

        LINKMODE:     The method by which links between strings are created; used if the
        unfolding option is required.  Option  Description  0  - Within section
        links are defined by the WSTAG field, or by the TAG field if WSTAG does
        not exist. Between section links are defined by the BSTAG field, or by the
        TAG field if BSTAG does not exist.  1  Within section links are defined
        automatically. Between section links are defined by the BSTAG field, or by
        the TAG field if BSTAG does not exist.  2  - Within section links are
        defined by the WSTAG field, or by the TAG field if WSTAG does not exist.
        Between section links are defined automatically.  3  - Within section
        links are defined automatically. Between section links are defined
        automatically. For simple structures it is not essential to define tag
        points on the strings; using the default value (3) ensures that automatic
        linking will be applied both within and between sections.
        required: No; default: 3; range: 0,3

        UCSAMODE:     The type of UCSA coordinate; used if the unfolding option is required.
        Default (2).  Option  Description  1  - Coordinates are normalised.  2  -
        Coordinates are adjusted.  3  - Coordinates are true length.  4  -
        Coordinates are world X value.  5  - Coordinates are world Y value.  6  -
        Coordinates are world Z value.
        required: No; default: 2; range: 1,6

        UCSBMODE:     The type of UCSB coordinate; used if the unfolding option is required.
        Default (3).  Option  Description  1  - Coordinates are normalised.  2  -
        Coordinates are adjusted.  3  - Coordinates are true length.  4  -
        Coordinates are world X value.  5  - coordinates are world Y value.  6  -
        coordinates are world Z value.
        required: No; default: 3; range: 1,6

        UCSCMODE:     The type of UCSC coordinate; used if the unfolding option is required.
        Default (2).  Option  Description  1  - Coordinates are normalised.  2  -
        Coordinates are adjusted.  3  - Coordinates are true length.  4  -
        Coordinates are world X value.  5  - Coordinates are world Y value.  6  -
        Coordinates are world Z value.
        required: No; default: 2; range: 1,6

        PLANE:     The plane of the structural interpretations defined in the STRING file;
        used if the unfolding option is required. Default (1).  Option
        Description  1  - Vertical sectional interpretation.  2  - Interpretation
        in plan.
        required: No; default: 1; range: 1,2

        HANGID:     The value of the field BOUNDARY in the STRING file that defines the
        hangingwall of the unit, used if the unfolding option is required. It will
        be used if the UNITDEF file is not defined.
        required: No; default: ; range: Undefined

        FOOTID:     The value of the field BOUNDARY in the STRING file that defines the
        footwall of the unit, used if the unfolding option is required. It will be
        used if the UNITDEF file is not defined.
        required: No; default: ; range: Undefined

        TOLRNC:     Tolerance in the calculation of the UCSA coordinate expressed as a
        proportion of the UCSA width; used if the unfolding option is required.
        The default is (0).
        required: No; default: 0; range: Undefined

        UCSALIMT:     Flag to define the limits of the UCSA coordinate if UCSAMODE=1 or 2 and
        TOLRNC>0. The options below are defined in terms of the Normalized mode
        [UCSAMODE=1]. Default (1)  Option  Description  1  - UCSA values can be
        less than 0 and greater than 1  2  - UCSA values can be less than 0.
        Values calculated as greater than 1 are reset to 1  3  - UCSA values
        calculated as less than 0 are reset to 0. Values can be greater than 1  4
        - UCSA values calculated as less than 0 are reset to 0. Values calculated
        as greater than 1 are reset to 1
        required: No; default: 1; range: 1,4

        ORGTAG:     Tag number of points which define the origin surface from which the UCSB
        coordinate is measured. The default surface if ORGTAG is undefined (-) is
        created from the first points on each of the hangingwall and footwall
        strings.
        required: No; default: ; range: Undefined

        PRINT:     Display control:  Option  Description  0  Minimum output including
        progress message.  1  As 0 plus details of input parameters.  2  as 1 plus
        display of each cell value. The default is (0).
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.estima).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ESTIMA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def expfld(self,
                in_i,
                out_o,
                start_f,
                end_f,
                newfield_f,
                incrment_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file containing numeric explicit fields START and END defining the
        range.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing extra records between the given ranges, the actual
        value being held in field NEWFIELD.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        START:     Name of field giving the start of the range.
        required: Yes; default: ; range: 

        END:     Name of field giving the end of the range.
        required: Yes; default: ; range: 

        NEWFIELD:     Name of field in output file containing the value for the record within
        the range.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        INCRMENT:     Increment to be applied to START within range.
        required: Yes; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.expfld).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'EXPFLD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def expmmw(self,
                perimin_i,
                perimout_o,
                mmw_p,
                pinc_p=0.1,
                mode_p=1,
                nodiag_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     The input perimeter file. If MODE=1 then the fields required are XP,YP,ZP,
        PTN and PVALUE ie standard perimeter format. Any other fields in this file
        will not be copied to the output file. All valid perimeters in the file
        will be used. If MODE=2 or 3 then it must also contain PTYPE and PORIG
        fields. In addition the file must be sorted on the keyfields PORIG, PTYPE
        and PTN.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     The output perimeter file containing the expanded perimeters. It may also
        contain a copy of the original perimeters and the centre line strings
        depending on the value of parameter MODE. The file will contain the
        standard perimter fields XP,YP,ZP,PTN and PVALUE plus ,PTYPE and PORIG.
        Malformed input perimeters will be reported but not processed. In place
        processing is not permitted ie PERIMIN and PERIMOUT must be different
        files.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MMW:     The minimum mining width, measured perpendicular to the centre line of the
        perimeter. Any point on the expanded perimeter will be at least 0.5 x MMW
        from the centre line.
        required: Yes; default: ; range: Undefined

        PINC:     Numeric increment for PVALUEs for centre line string and adjusted
        perimeter as written to the PERIMOUT file. If the PVALUE of the input
        perimeter is P then its centre line string will have a PVALUE of P+PINC
        and the expanded perimeter will have a PVALUE of P+2xPINC. The default
        value is (0.1).
        required: No; default: 0.1; range: Undefined

        MODE:     This parameter defines the contents of both the PERIMIN and PERIMOUT
        files. It has values:  Option  Description  1  - PERIMIN: original
        perimeters PERIMOUT: original perimeters centre lines expanded perimeters.
        2  - PERIMIN: original perimeters centre lines PERIMOUT: original
        perimeters centre lines expanded perimeters.  3  - PERIMIN: original
        perimeters centre lines PERIMOUT: expanded perimeters For pass 1 MODE must
        be set to 1. For pass 2 MODE must be either 2 or 3. The default value of
        MODE is (1).
        required: No; default: 1; range: 1,3

        NODIAG:     This parameter specifies whether the centre line of a square perimeter
        should be the diagonal or the length. It has values:  Option  Description
        1  Centreline can be the diagonal  2  Centreline will not be the diagonal
        required: No; default: 1; range: 1,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.expmmw).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'EXPMMW ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def expndmod(self,
                    model_i,
                    modelout_o,
                    wiretype_p,
                    cellxmin_p,
                    cellymin_p,
                    cellzmin_p,
                    wiretr_i='optional',
                    wirept_i='optional',
                    perimin_i='optional',
                    defvals_i='optional',
                    density_f='optional',
                    name_f='optional',
                    value_f='optional',
                    density_p=1,
                    xmin_p='optional',
                    ymin_p='optional',
                    zmin_p='optional',
                    xmax_p='optional',
                    ymax_p='optional',
                    zmax_p='optional',
                    filvol_p=0
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODEL:     Input block Model file to be expanded.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file to constrain and define the expansion
        limits. The wireframe may consist of one or more solid wireframes, or one
        or more single surface DTMs. It may not contain both solid wireframes and
        DTMs.
        required: No; default: ; range: 

        WIREPT:     Input wireframe points file.
        required: No; default: ; range: 

        PERIMIN:     Input perimeter file to constrain the model expansion. This file can
        contain multiple perimeters. The model will be expanded to the limits of
        the perimeters and constrained by them.
        required: No; default: ; range: 

        DEFVALS:     Input file containing a list of default field values. This file must
        contain the fields NAME and VALUE. The VALUE field can be either alpha or
        numeric.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODELOUT:     Output expanded block model file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        DENSITY:     Name of the DENSITY field in the input block model
        required: No; default: ; range: 

        NAME:     Name of the NAME field in the default values file DEFVALS
        required: No; default: ; range: 

        VALUE:     Name of the VALUE field in the default values file DEFVALS
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        WIRETYPE:     Type of wireframe model to be filled with cells. Select one of the
        following options, with the default being 2:  Option  Description  1
        solid - create cells inside.  2  surface - create cells below.  3  surface
        - create cells above.  4  surface - create cells to the south.  5  surface
        - create cells to the north.  6  surface - create cells to the west.
        required: Yes; default: 2; range: 1,6

        CELLXMIN:     Minimum cell size in the X direction. If it is set to zero then seam
        filling is used - ie the cell is split once at the wireframe boundary.
        Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be zero.
        required: Yes; default: 2.5; range: Undefined

        CELLYMIN:     Minimum cell size in the X direction. If it is set to zero then seam
        filling is used - ie the cell is split once at the wireframe boundary.
        Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be zero.
        required: Yes; default: 2.5; range: Undefined

        CELLZMIN:     Minimum cell size in the X direction. If it is set to zero then seam
        filling is used - ie the cell is split once at the wireframe boundary.
        Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be zero.
        required: Yes; default: 2.5; range: Undefined

        DENSITY:     Default density value to be applied to new cells
        required: No; default: 1; range: Undefined

        XMIN:     Minimum value in the X direction that the output model must cover. This
        value will be used only if it is less than the minimum value defined by
        the input wireframe or perimeter(s)
        required: No; default: ; range: Undefined

        YMIN:     Minimum value in the Y direction that the output model must cover. This
        value will be used only if it is less than the minimum value defined by
        the input wireframe or perimeter(s)
        required: No; default: ; range: Undefined

        ZMIN:     Minimum value in the Z direction that the output model must cover. This
        value will be used only if it is less than the minimum value defined by
        the input wireframe or perimeter(s)
        required: No; default: ; range: Undefined

        XMAX:     Maximum value in the X direction that the output model must cover. This
        value will be used only if it is greater than the maximum value defined by
        the input wireframe or perimeter(s)
        required: No; default: ; range: Undefined

        YMAX:     Maximum value in the Y direction that the output model must cover. This
        value will be used only if it is greater than the maximum value defined by
        the input wireframe or perimeter(s)
        required: No; default: ; range: Undefined

        ZMAX:     Maximum value in the Z direction that the output model must cover. This
        value will be used only if it is greater than the maximum value defined by
        the input wireframe or perimeter(s)
        required: No; default: ; range: Undefined

        FILVOL:     Specify whether to use the input wireframe for cell splitting or to add a
        FILVOL field to the output model:  Option  Description  0  Use WIREFILL to
        split the cells against the wireframe.  1  Add a FILVOL filed to the
        output model containing the proportion between 0 and 1 of the cell
        inside/below the wireframe
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.expndmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'EXPNDMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def extend(self,
                in_i
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be extended.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.extend).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'EXTEND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def extndf(self,
                in_i
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be extended.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.extndf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'EXTNDF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def extra(self,
                in_i,
                out_o,
                print_p=0,
                approx_p=0,
                expression='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     Display output to command processor
        required: No; default: 0; range: 0 or 1

        APPROX:     Allow for rounding errors when making comparisons
        required: No; default: 0; range: undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.extra).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'EXTRA ' + ' '.join(dm_arg_list)

        self.run_command(command)    
        
        
    def factor(self,
                in_i,
                sampid_f,
                uscores_o='optional',
                rscores_o='optional',
                oscores_o='optional',
                f1_to_10_f=['optional'],
                maxit_p=0,
                eigenmin_p=1,
                numeigen_p=0,
                promaxcf_p=3,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        USCORES:     Optional output file for unrotated factor scores.
        required: No; default: ; range: 

        RSCORES:     Optional output file for varimax factor scores.
        required: No; default: ; range: 

        OSCORES:     Optional output file for promax factor scores.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Field containing sample identification
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MAXIT:     Number of iterations required, valid only for the unrotated PCA option in
        factor analysis. =(0) Non statistical factor analysis. =10 Maximum number
        of iterations allowed for statistical factor analysis.
        required: No; default: 0; range: 0,10

        EIGENMIN:     Option  Description  (1)  Eigenvalue required to select the number of
        components.
        required: No; default: 1; range: Undefined

        NUMEIGEN:     Option  Description  (0)  Maximum number of eigenvalues is set to the
        number of fields or to 10, whichever is the lower.
        required: No; default: 0; range: Undefined

        PROMAXCF:     Option  Description  (3)  Promax oblique rotation exponent. Range is 1-9.
        required: No; default: 3; range: 1,9

        PRINT:     > 0 Display scores on the screen (0). Note - Do not use for large files.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.factor).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FACTOR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def fdin(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output model file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.fdin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FDIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def fdout(self,
                in_i,
                tolton_p=0.5,
                format_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        TOLTON:     Minimum tonnage in parcel to be output (0.5)
        required: No; default: 0.5; range: Undefined

        FORMAT:     Output format for economic file (0).  Option  Description  0  Fixed
        format.  1  Comma separated.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.fdout).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FDOUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ffunc(self,
                vmodparm_i,
                out_o='optional',
                vmodnum_p=1,
                log_p=0,
                ipoints_p=6,
                jpoints_p=6,
                kpoints_p=6
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        VMODPARM:     Input variogram model file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Optional output file. This will contain the block dimensions and F value
        in fields XINC, YINC, ZINC and FVALUE.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VMODNUM:     Variogram model number, as defined by VREFNUMfield in VMODPARM file.
        Default (1).
        required: No; default: 1; range: Undefined

        LOG:     Log/Normal variogram flag. Default(0). The variogram model, as defined by
        VGRAM , is Normal if LOG =0 or Lognormal if LOG =1.
        required: No; default: 0; range: 0,1

        IPOINTS:     Number of discretisation points in X dimension to simulate block (6)
        required: No; default: 6; range: Undefined

        JPOINTS:     Number of discretisation points in Y dimension to simulate block (6)
        required: No; default: 6; range: Undefined

        KPOINTS:     Number of discretisation points in Z dimension to simulate block (6)
        required: No; default: 6; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ffunc).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FFUNC ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def filcom(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.filcom).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FILCOM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def filexp(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.filexp).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FILEXP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def filtpo(self,
                in1_i,
                out_o,
                x_f,
                y_f,
                in2_i='optional',
                z_f='optional',
                radius_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input points file. Must be sorted on X.
        required: Yes; default: ; range: 

        IN2:     Optional filter points file. Must be sorted on X.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output points file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field used as X coordinate for filter process.
        required: Yes; default: ; range: 

        Y:     Field used as Y coordinate for filter process.
        required: Yes; default: ; range: 

        Z:     Optional Z coordinate for filter process.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        RADIUS:     Optional, default = 0.0. Points within RADIUS of one another are filtered
        out. If Z is not defined, filter test is applied in a circle in the XY
        plane. If Z is defined filter test is applied within a sphere.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.filtpo).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FILTPO ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def format(self,
                in_i,
                repdef_i='optional',
                lhmargin_p=1,
                rhmargin_p=79,
                lines_p=20,
                hdsep_p=3,
                ftsep_p=3,
                gutter_p=1,
                keybreak_p=-1,
                noff_p=0,
                double_p=0,
                sysfile_p=0,
                print_p=1,
                pause_p=-1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file containing fields to display in the report body.
        required: Yes; default: ; range: 

        REPDEF:     Optional report definition file. Must contain the following fields :-
        REPNAME A8 Report name key. FIELD A8 Output data field name. INDEX N Field
        output order. WIDTH N Output field width in char. NDP N Decimal places for
        N,0=int. WRAPCHAR A4 [Y|N] wrap wide alphas. HT1 A12 FIELD header text,
        line 1. HT2 A12 FIELD header text, line 2. HT3 A12 FIELD header text, line
        3. FT1 A12 FIELD footer text, line 1. FT2 A12 FIELD footer text, line 2.
        FT3 A12 FIELD footer text, line 3. If REPDEF specified, a REPNAME key
        value identifying the report definition to use will be requested at the
        start of the interactive input stage.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LHMARGIN:     Start character column for report. (1) All report output is located
        relative to this position on the screen/paper.
        required: No; default: 1; range: Undefined

        RHMARGIN:     End character column for report. (79)
        required: No; default: 79; range: Undefined

        LINES:     Number of lines per page of output. (20) = 0 Continuous output, no paging.
        >= 1 Output 'N' lines of Header+Footer+ Data text per report page.
        required: No; default: 20; range: Undefined

        HDSEP:     Horizontal separator to use between header text and the data columns. (3)
        Only applies to fields specified with the optional REPDEF file. Option
        Description 0 No separator. 1 Output a blank line above data. 2 Output a
        dashed line above data. 3 Output a solid line above data.
        required: No; default: 3; range: 0,3

        FTSEP:     Horizontal separator to use between the data columns and the footer text.
        (3) Only applies to fields specified with the optional REPDEF file. Option
        Description 0 No separator. 1 Output a blank line below data. 2 Output a
        dashed line below data. 3 Output a solid line below data.
        required: No; default: 3; range: 0,3

        GUTTER:     Number of spaces between adjacent data field columns in output report. (1)
        Only applies to fields specified with the optional REPDEF file. Option
        Description 0 Data columns abut each other. >= 1: Insert 'N' spaces
        between columns.
        required: No; default: 1; range: Undefined

        KEYBREAK:     Action to take when any of the optional header/footer key fields specified
        with the ^ FIELD^ token q.v. change. (-1) Option Description -1 Output the
        footer and start a new page when any ^ FIELD^ changes. >= 0 Output the
        footer, then advance 'N' lines on the same page. If no room on that page
        for next header+footer and at least 1 data line, then start a new page.
        required: No; default: -1; range: Undefined

        NOFF:     Form-feed character output. (0) Option Description 0 Output a form-feed
        for new page. 1 Suppress form-feed output.
        required: No; default: 0; range: 0,1

        DOUBLE:     Line spacing for data column records.(0) Option Description 0 No spaces
        between data lines. 1 Inserts a blank line below each data line. i.e.
        "Double spaced"
        required: No; default: 0; range: 0,1

        SYSFILE:     System file output control. (0) Option Description 0 No system file
        output. 1 Report is output to a system file. If SYSFILE=1 , an output name
        will be requested during the interactive input.
        required: No; default: 0; range: 0,1

        PRINT:     Screen output control for report. (1) Option Description -1 Will stop
        screen output. >= 0: Report will appear on the screen.
        required: No; default: 1; range: -1,1

        PAUSE:     Display control for screen paging. (-1) Only used for screen output
        PRINT>=0. = -1 Wait until user presses RETURN before displaying next page.
        Option Description 0 Display all pages without pause. >= 1: Pause for 'N'
        seconds, then automatically display next page.
        required: No; default: -1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.format).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FORMAT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def fxin(self,
                out_o,
                filetype_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output model file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        FILETYPE:     Type of input data file. 1 = Results file 2 = Pit List file 3 = Mining
        Sequence file
        required: No; default: 1; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.fxin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FXIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def fxout(self,
                in_i,
                element_p,
                tolton_p=0.5,
                format_p=0,
                zonefld_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ELEMENT:     Number of elements to be processed (1) Limited to 10 for FOUR-X.
        required: Yes; default: 1; range: Undefined

        TOLTON:     Minimum tonnage in parcel to be output (0.5)
        required: No; default: 0.5; range: Undefined

        FORMAT:     Output format for economic file (0) 0 - fixed format 1 - comma separated
        required: No; default: 0; range: Undefined

        ZONEFLD:     Prompt for optional ZONE field (0) 0 - don't prompt for ZONE field 1 -
        prompt for ZONE field
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.fxout).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'FXOUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def gausan(self,
                in_i,
                value_f,
                numpoly_p,
                polyno_o='optional',
                trans_o='optional',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. A maximum of 99998 samples can be processed.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        POLYNO:     Optional output file containing polynomial coefficients. It includes the
        following explicit fields: POLYINDX - polynomial index number [0,1,2,..]
        COEFF - the polynomial coefficient. ESTVAR - estimated variance. It also
        includes an implicit field: POLYNUM - the number of polynomials used in
        the transformation,
        required: No; default: ; range: 

        TRANS:     Optional output file containing transformed values. It includes the
        following explicit fields: VALUE - the untransformed value. FREQENCY -
        number of occurences of VALUE ANAMOR - the transformed value INVERSE -
        inverse of the transformed value It also contains the following implicit
        fields: POLYNUM - the number of polynomials used in the transformation
        NUMSAMP - the number of transformed samples MEANORIG - mean of the
        original values VARORIG - variance of the original values MEANTRAN - mean
        of the transformed values VARTRAN - variance of the transformed values
        MEANINV - mean of the inverse values VARINV - variance of the inverse
        values
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Name of field in the IN file to be transformed.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NUMPOLY:     The number of polynomials to be used. A maximum of 30 is allowed.
        required: Yes; default: ; range: 1,30

        PRINT:     Controls the amount of text displayed: Option Description 0 Minimum output
        to screen 1 As 0 + polynomial coefficients 2 As 1 + reconstitution of
        variance table 3 As 2 + table of transformed values The default value is
        (0).
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.gausan).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'GAUSAN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def gausanam(self,
                    samples_i,
                    grade_f,
                    graph_o='optional',
                    stats_o='optional',
                    weight_f='optional'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     A Datamine Binary file (.dm) that contains sample positional information
        and supporting attributes.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        GRAPH:     A file containing the data required to construct scatter plot and
        histogram graphs relating to a locally-conditioned SMU model.
        required: No; default: ; range: 

        STATS:     A file containing summary statistical data (in Datamine binary format)
        relating to a locally-conditioned SMU model.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     The grade field (present in the samples file) that will be considered
        during anamorphosis.
        required: Yes; default: ; range: 

        WEIGHT:     An optional weighting field.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.gausanam).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'GAUSANAM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def gentra(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.gentra).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'GENTRA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def grade(self,
                proto_i,
                in_i,
                model_o,
                x_f,
                y_f,
                z_f,
                value_f,
                numsam_f='optional',
                variance_f='optional',
                zone_f='optional',
                length_f='LENGTH',
                minnum_p=3,
                maxnum_p=20,
                minoct_p=0,
                minperoc_p=1,
                maxperoc_p=0,
                imethod_p=2,
                power_p=2,
                nstruct_p=1,
                nugget_p=0,
                st1var_p=1,
                st2var_p=1,
                parent_p=0,
                xpoints_p=3,
                ypoints_p=3,
                zpoints_p=3,
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                print_p=0,
                sdist1_p=100,
                sdist2_p=100,
                sdist3_p=100,
                sangle1_p=0,
                saxis1_p=3,
                sangle2_p=0,
                saxis2_p=1,
                sangle3_p=0,
                saxis3_p=3,
                st1rang1_p=100,
                st1rang2_p=100,
                st1rang3_p=100,
                st2rang1_p=100,
                st2rang2_p=100,
                st2rang3_p=100
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input prototype model. This must contain at least the fields XC, YC, ZC,
        XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK. If the file
        contains cells and subcells, then these cells and subcells will be copied
        to the output model with the new grade field added. If the file does not
        contain cells and subcells then they will be created if there is
        sufficient data within the search ellipsoid.
        required: Yes; default: ; range: 

        IN:     Input sample data. This must contain the X, Y and Z coordinates of each
        sample and the grade field ( VALUE ) to be estimated.This will usually be
        a Drillhole file, but can be any file containing the four required fields
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output interpolated model. This will include all the fields in the input
        prototype model plus the estimated grade field (VALUE). In addition the
        number of samples field (NUMSAM) and the variance field (VARIANCE) will be
        included if they have been specified
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Name of the field containing the X coordinate of the sample.
        required: Yes; default: X; range: 

        Y:     Name of the field containing the Y coordinate of the sample.
        required: Yes; default: Y; range: 

        Z:     Name of the field containing the Z coordinate of the sample.
        required: Yes; default: Z; range: 

        VALUE:     Name of the field containing the grade to be estimated.
        required: Yes; default: ; range: 

        NUMSAM:     Name of the field to be created in the output MODEL file which is used to
        record the number of samples used for estimating each cell. If a field
        name is not specified the number of samples used will not be recorded.
        required: No; default: ; range: 

        VARIANCE:     Name of the field to be created in the output MODEL file which is used to
        record the kriged variance of the estimate of eachcell. This can only be
        used if Ordinary Kriging (IMETHOD=3) has been selected. If a field name is
        not specified then the variance will not be reorded.
        required: No; default: ; range: 

        ZONE:     Name of the zonal interpolation field. The field may be numeric or up to
        20 character alphanumeric. The field must exist in both the PROTO and IN
        files. If it is specified then cells in each ZONE will be interpolated
        using only samples with the same ZONE value.
        required: No; default: ; range: 

        LENGTH:     Name of the field used for length weighting of samples. This is only used
        if the Inverse Power of Distance interpolation method is selected
        (IMETHOD=2).
        required: No; default: LENGTH; range: 

        ----------
        PARAMETERS
        ----------

        MINNUM:     Minimum number of samples which must lie within the search ellipsoid in
        order for the model subcell to be estimated. If there are less than the
        minimum number and the input PROTOmodel contains cells, then an absent
        data value will be assigned to the grade field in the output model file
        MODELIf there are less than the minimum, but the input PROTOmodel does not
        contain any cells, then a cell will not be created in the output model
        file MODEL.
        required: No; default: 3; range: 11,400

        MAXNUM:     Maximum number of samples to be used for estimating the grade of a model
        cell. If more than the maximum number lie within the search ellipsoid,
        then the search ellipsoid is shrunk concentrically until just
        MAXNUMsamples remain. The maximum number cannot exceed 1400.
        required: No; default: 20; range: 11,400

        MINOCT:     The minimum number of octants to be filled before a subcell will be
        interpolated. If it is set to zero then octant search will not be used.
        required: No; default: 0; range: 0,8

        MINPEROC:     The minimum number of samples in an octant before it is considered to be
        filled.
        required: No; default: 1; range: 0,1400

        MAXPEROC:     The maximum number of samples in an octant, to be used for interpolation.
        If there are more than the maximum number in any octant, then the samples
        closest to subcell centre are selected. If set to zero there is no limit
        on the number of samples.
        required: No; default: 0; range: 0,1400

        IMETHOD:     Interpolation method: 1: Nearest Neighbour 2: Inverse Power of Distance
        3:Ordinary Kriging with a one or two structure spherical variogram model .
        required: No; default: 2; range: 1,3

        POWER:     Weighting power if Inverse Power of Distance is selected (IMETHOD=2).
        required: No; default: 2; range: Undefined

        NSTRUCT:     Number of structures in the variogram model. This parameter is only used
        if Ordinary Kriging is selected (IMETHOD=3).
        required: No; default: 1; range: 1,2

        NUGGET:     Nugget variance of spherical variogram model. This parameter is only used
        if Ordinary Kriging is selected (IMETHOD=3).
        required: No; default: 0; range: 0,+

        ST1VAR:     Spatial variance (ie C value) of the first structure of the spherical
        variogram model. This parameter is only used if Ordinary Kriging is
        selected (IMETHOD=3).
        required: No; default: 1; range: 0.000001,+

        ST2VAR:     Spatial variance (ie C value) of the second structure of the spherical
        variogram model. This parameter is only used if Ordinary Kriging is
        selected (IMETHOD=3) and two structures have been specified (NSTRUCT=2).
        required: No; default: 1; range: 0.000001,+

        PARENT:     Flag to control parent cell estimation: 0:estimate a grade for each
        individual subcell. 1:estimate a grade for the parent cell and assign that
        grade to all subcells lying within the parent cell.
        required: No; default: 0; range: 0,1

        XPOINTS:     Number of discretisation points in the X direction.Discretisation points
        are used to simulate each cell or subcell for the purpose of grade
        estimation. They are only used for Inverse Power of Distance (IMETHOD=2)
        and Ordinary Kriging (IMETHOD=3) estimation methods. If Inverse Power of
        Distance is used then XPOINTS, YPOINTS and ZPOINTS may all be 1, and so
        the subcell is represented by a single point at its centre. If Ordinary
        Kriging is used then the total number of discretisation points (XPOINTS x
        YPOINTS x ZPOINTS) must be greater than or equal to 2.
        required: No; default: 3; range: 1,6

        YPOINTS:     Number of discretisation points in the Y direction.Discretisation points
        are used to simulate each cell or subcell for the purpose of grade
        estimation. They are only used for Inverse Power of Distance (IMETHOD=2)
        and Ordinary Kriging (IMETHOD=3) estimation methods. If Inverse Power of
        Distance is used then XPOINTS, YPOINTS and ZPOINTS may all be 1, and so
        the subcell is represented by a single point at its centre. If Ordinary
        Kriging is used then the total number of discretisation points (XPOINTS x
        YPOINTS x ZPOINTS) must be greater than or equal to 2.
        required: No; default: 3; range: 1,6

        ZPOINTS:     Number of discretisation points in the Z direction.Discretisation points
        are used to simulate each cell or subcell for the purpose of grade
        estimation. They are only used for Inverse Power of Distance (IMETHOD=2)
        and Ordinary Kriging (IMETHOD=3) estimation methods. If Inverse Power of
        Distance is used then XPOINTS, YPOINTS and ZPOINTS may all be 1, and so
        the subcell is represented by a single point at its centre. If Ordinary
        Kriging is used then the total number of discretisation points (XPOINTS x
        YPOINTS x ZPOINTS) must be greater than or equal to 2.
        required: No; default: 3; range: 1,6

        XSUBCELL:     Number of subcells per parent cell to be created in the X direction.This
        only applies if there are no cells in the input prototype model PROTO, and
        therefore cells (and subcells) are created by the GRADEprocess.
        required: No; default: 1; range: 1,20

        YSUBCELL:     Number of subcells per parent cell to be created in the Y direction.This
        only applies if there are no cells in the input prototype model PROTO, and
        therefore cells (and subcells) are created by the GRADEprocess.
        required: No; default: 1; range: 1,20

        ZSUBCELL:     Number of subcells per parent cell to be created in the Z direction.This
        only applies if there are no cells in the input prototype model PROTO, and
        therefore cells (and subcells) are created by the GRADEprocess.
        required: No; default: 1; range: 1,20

        PRINT:     Display control: 0: minimum output including progress message. 1: as 0
        plus details of input parameters. 2: as 1 plus display of each cell value.
        required: No; default: 0; range: 0,2

        SDIST1:     Length of the search ellipsoid axis in the X direction.
        required: No; default: 100; range: 0.00001,+

        SDIST2:     Length of the search ellipsoid axis in the Y direction. .
        required: No; default: 100; range: 0.00001,+

        SDIST3:     Length of the search ellipsoid axis in the Z direction. .
        required: No; default: 100; range: 0.00001,+

        SANGLE1:     First rotation angle (in degrees) for the search ellipsoid. The rotation
        is around the axis defined by SAXIS1.
        required: No; default: 0; range: -360,360

        SAXIS1:     Coordinate axis about which rotation SANGLE1 is applied. Specify 1 for the
        X axis, 2 for the Y axis, or 3 for the Z axis.
        required: No; default: 3; range: 1,3

        SANGLE2:     Second rotation angle (in degrees) for the search ellipsoid. The rotation
        is around the axis defined by SAXIS2.
        required: No; default: 0; range: -360,360

        SAXIS2:     Coordinate axis about which rotation SANGLE2 is applied. Specify 1 for the
        X axis, 2 for the Y axis, or 3 for the Z axis.
        required: No; default: 1; range: 1,3

        SANGLE3:     Third rotation angle (in degrees) for the search ellipsoid. The rotation
        is around the axis defined by SAXIS3.
        required: No; default: 0; range: -360,360

        SAXIS3:     Coordinate axis about which rotation SANGLE3 is applied. Specify 1 for the
        X axis, 2 for the Y axis, or 3 for the Z axis.
        required: No; default: 3; range: 1,3

        ST1RANG1:     Variogram range (ie A value) in the X direction of the first structure of
        the spherical variogram model. This parameter is only used if Ordinary
        Kriging is selected (IMETHOD=3).
        required: No; default: 100; range: 0.000001,+

        ST1RANG2:     Variogram range (ie A value) in the Y direction of the first structure of
        the spherical variogram model. This parameter is only used if Ordinary
        Kriging is selected (IMETHOD=3).
        required: No; default: 100; range: 0.000001,+

        ST1RANG3:     Variogram range (ie A value) in the Z direction of the first structure of
        the spherical variogram model. This parameter is only used if Ordinary
        Kriging is selected (IMETHOD=3).
        required: No; default: 100; range: 0.000001,+

        ST2RANG1:     Variogram range (ie A value) in the X direction of the second structure of
        the spherical variogram model. This parameter is only used if Ordinary
        Kriging is selected (IMETHOD=3) and two structures have been specified
        (NSTRUCT=2).
        required: No; default: 100; range: 0.000001,+

        ST2RANG2:     Variogram range (ie A value) in the Y direction of the second structure of
        the spherical variogram model. This parameter is only used if Ordinary
        Kriging is selected (IMETHOD=3) and two structures have been specified
        (NSTRUCT=2).
        required: No; default: 100; range: 0.000001,+

        ST2RANG3:     Variogram range (ie A value) in the Z direction of the second structure of
        the spherical variogram model. This parameter is only used if Ordinary
        Kriging is selected (IMETHOD=3) and two structures have been specified
        (NSTRUCT=2).
        required: No; default: 100; range: 0.000001,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.grade).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'GRADE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def griddc(self,
                in_i,
                out_o,
                x_or_y_or_z_f,
                grade_f,
                xgridmin_p,
                xgridmax_p,
                gridinc_p,
                yfactor_p,
                zfactor_p,
                wtout_o='optional',
                summary_o='optional',
                zone1_f='optional',
                zone2_f='optional',
                maxmean_p=0,
                norig_p=1,
                excel_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must contain a set of 3D coordinates (eg
        X,Y,Z) and at least one other field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing declustered grid sizes and corresponding average
        grade values.
        required: Yes; default: ; range: 

        WTOUT:     Output file containing declustered weights. This will be a copy of the IN
        file for samples with a non-absent GRADE value, but will also include the
        field DCWEIGHT
        required: No; default: ; range: 

        SUMMARY:     Output file containing a single record summarising the optimum results for
        each zone combination
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X/Y/Z:     X, Y or Z sample coordinate
        required: Yes; default: X/Y/Z; range: 

        GRADE:     Field to be used for calculating declustered weights.
        required: Yes; default: X/Y/Z; range: 

        ZONE1:     First sample classification field.
        required: No; default: ; range: 

        ZONE2:     Second sample classification field.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XGRIDMIN:     Minimum grid size in X
        required: Yes; default: 10; range: Undefined

        XGRIDMAX:     Maximum grid size in X
        required: Yes; default: 100; range: Undefined

        GRIDINC:     Grid increment size in X
        required: Yes; default: 10; range: Undefined

        YFACTOR:     Grid size factor in Y, e.g. if this is set to 3 then the grid cell size in
        the Y direction will be 3 times the X grid cell size.
        required: Yes; default: 1; range: Undefined

        ZFACTOR:     Grid size factor in Z.
        required: Yes; default: 1; range: Undefined

        MAXMEAN:     Flag to identify whether minimum or maximum declustered mean grade is used
        to define the optimum. The declustered sample weights for the optimum grid
        size are output to the WTOUT file. The optimum declustered mean and
        corresponding grid size are reported to the Command Window for both values
        of GSLIB:  =0 : Use the grid with the minimum declustered mean to define
        the optimum.  =1 : Use the grid with the maximum declustered mean to
        define the optimum.
        required: No; default: 0; range: 0,1

        NORIG:     Number of origins. Each grid size is tested for NORIG origin locations.
        Between 1 and 10 origins can be used. The origins are spaced at regular
        intervals along the diagonal of the 3D rectangle with sides defined by
        XGRID, YFACTOR and ZFACTOR.
        required: No; default: 1; range: 1,10

        EXCEL:     Set to 1 to automatically display a graph in Excel of grid size against
        grade.  See "Excel Output", above
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.griddc).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'GRIDDC ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def grton(self,
                polyno_i,
                qtn_o,
                qtr_o='optional',
                support_p=0,
                blockvar_p='optional',
                maxiter_p=100,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POLYNO:     Input file containing polynomial coefficients. This file is created as
        output by process GAUSAN. The following fields are required: POLYINDX -
        polynomial index number [0,1,2,..] COEFF - the polynomial coefficient.
        POLYNUM - the number of polynomials used in the transformation.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        QTN:     Compulsory output file containing grade and tonnage values for different
        cut-offs. Change of support calculations are NOT used. It includes the
        following explicit fields: CUTOFF - actual cut-off grade ANAMOR - gaussian
        anamorphose TONABOVE - ratio of tons mined above cut-off METABOVE - ratio
        of metal recovered above cut-off GRDABOVE - average grade above cut-off
        TONBELOW - ratio of tons mined below cut-off It also includes the
        following implicit field. CHSUPP - change of support variable. This is
        always set to 1.
        required: Yes; default: ; range: 

        QTR:     Optional output file containing grade and tonnage values for different
        cut-offs. Change of support calculations ARE used. It includes the
        following explicit fields: CUTOFF - actual cut-off grade ANAMOR - gaussian
        anamorphose TONABOVE - ratio of tons mined above cut-off METABOVE - ratio
        of metal recovered above cut-off GRDABOVE - average grade above cut-off
        TONBELOW - ratio of tons mined below cut-off It also includes the
        following implicit fields. CHSUPP - change of support variable. BLOCKVAR -
        block variance, as defined by parameter BLOCKVAR.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SUPPORT:     Change of support flag: Option Description 0 Support change calculations
        not used 1 Support change calculations used The default value is (0).
        required: No; default: 0; range: 0,1

        BLOCKVAR:     The block variance. This parameter is compulsory if a change of support is
        required; ie if SUPPORT=1.
        required: No; default: ; range: Undefined

        MAXITER:     Maximum number of iterations. The default value is (100).
        required: No; default: 100; range: Undefined

        PRINT:     Controls the amount of text displayed: The default value is (0). Option
        Description 0 Minimum output to screen 1 As 0 + grade/tonnage results 2 As
        1 + display for each iteration
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.grton).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'GRTON ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def hisfit(self,
                in_i,
                modelou_o='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Raw data file. Must contain at least one numeric explicit field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODELOU:     Histogram model output file. The histogram distribution model parameters
        can be written to this file. The models written to this file can be
        retrieved at any time while running the program. The process will generate
        the required fields:- MODELREF, FIELD, DISTTYPE, NUM.COMP, MEAN1,
        STD.DEV1, PROP1,.,MEAN8, STD.DEV8, PROP8.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.hisfit).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'HISFIT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def histog(self,
                in_i,
                out_o,
                value_f,
                binsize_p,
                minimum_p,
                numbins_p,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. This will contain one record for each histogram bin and nine
        fields LOWER, MIDDLE, UPPER, FREQENCY, CUMFREQ., AVIVAL, FREQ-%, CUMF-%,
        TOTVAL.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Field to be histogrammed (numeric).
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        BINSIZE:     Bin width.
        required: Yes; default: ; range: Undefined

        MINIMUM:     Lower bound of first bin.
        required: Yes; default: ; range: Undefined

        NUMBINS:     Number of bins (max 50).
        required: Yes; default: ; range: 1,50

        PRINT:     >=1 display all records, all samples outside bins, the output file DD (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.histog).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'HISTOG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def holes3d(self,
                collar_i,
                sample1_to_10_i,
                out_o,
                survey_i='optional',
                holesmry_o='optional',
                errors_o='optional',
                bhid_f='BHID',
                xcollar_f='XCOLLAR',
                ycollar_f='YCOLLAR',
                zcollar_f='ZCOLLAR',
                from_f='FROM',
                to_f='TO',
                at_f='AT',
                brg_f='BRG',
                dip_f='DIP',
                survsmth_p=1,
                endpoint_p=0,
                dipmeth_p=1,
                inclmiss_p=0,
                prompt_p=1,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        COLLAR:     Data file of drillhole collar locations. Expects fields BHID, XCOLLAR,
        YCOLLAR and ZCOLLAR.
        required: Yes; default: ; range: 

        SAMPLE1-10:     Sample data files. This file is compulsory and must include fields BHID,
        FROM, and TO. It will probably also include at least one sample attribute
        field, such as grade or lithology.
        required: Yes; default: ; range: 

        SURVEY:     Optional survey data file. Expects fields BHID, AT, BRG, DIP. If a
        borehole has Survey Data, then it must include a record for the collar
        location, i.e. AT=0. If a survey file is not specified it is assumed that
        all holes are vertical. If the survey file only includes a subset of the
        total number of holes, then it is assumed that all holes which are not
        included in the survey file are vertical.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output desurveyed sample data file. This will include fields BHID, FROM,
        TO, LENGTH, X, Y, Z, A0, B0, and all other fields which were included in
        the sample file(s). The X,Y and Z fields are the coordinates of the centre
        of each sample. The A0 and B0 fields are the azimuth and dip of the
        sample, respectively.  This cannot be the same file name as ERRORS (see
        below)  For more information on Downhole Survey files, click here.
        required: Yes; default: ; range: 

        HOLESMRY:     Optional output file containing a summary of the drillholes in each of the
        input files. It shows the number of records in each input file for each
        drillhole identifier (BHID). This can be very useful for validating the
        data, and showing what data is missing from which holes.
        required: No; default: ; range: 

        ERRORS:     Optional output file containing a list of surveys and samples which do not
        pass the validation tests. This cannot be the same file name as the OUT
        file (see above).  Tests 1-4 refer to the SURVEY file, tests 5-7 are
        applied to the data in files SAMPLE1 to SAMPLE6, and test 7 is on the
        COLLAR file  a survey file has been specified.  each BHID has a survey
        reading for AT=0.  each BHID in the (merged) sample file has at least one
        entry in the SURVEY file.  the downhole TO value of a sample is greater
        then the downhole FROM value.  Holes with more than 10,000 survey points
        are identified. Only a subset will be processed as described in the Using
        Downhole Survey Data section above.  the FROM/TO interval for one sample
        does not overlap the FROM/TO interval of the next sample.  the FROM/TO
        interval is not duplicated.  XCOLLAR, YCOLLAR and ZCOLLAR are not absent
        data. Only one of the errors 4-6 will be reported even if a sample fails
        more than one of these tests.  The output file will contain the following
        fields:  - FILE: the name of the file in which the error was identified,
        - PROBLEM: a brief description of the problem,  - BHID: the drillhole
        identifier,  - FROM: the downhole FROM distance of the sample,  - TO: the
        downhole TO distance of the sample.  In order to correct the problems it
        will be necessary to edit the original data files.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Drillhole identifier.
        required: No; default: BHID; range: 

        XCOLLAR:     X co-ordinate of drillhole collar.
        required: No; default: XCOLLAR; range: 

        YCOLLAR:     Y co-ordinate of drillhole collar.
        required: No; default: YCOLLAR; range: 

        ZCOLLAR:     Z co-ordinate of drillhole collar.
        required: No; default: ZCOLLAR; range: 

        FROM:     Downhole distance to sample top.
        required: No; default: FROM; range: 

        TO:     Downhole distance to sample bottom.
        required: No; default: TO; range: 

        AT:     Downhole distance to survey point.
        required: No; default: AT; range: 

        BRG:     Bearing of drillhole.
        required: No; default: BRG; range: 

        DIP:     Dip of drillhole. Dip values must always be positive when referring to the
        downwards direction if using this command in a batch process.  For more
        information on Downhole Survey files, click here.
        required: No; default: DIP; range: 

        ----------
        PARAMETERS
        ----------

        SURVSMTH:     Option  Description  0  Prevent samples being added to the output file.  1
        add samples where there are more than one survey record per sample.  When
        a hole sample is desurveyed the survey data (azimuth and dip) of the
        sample is used to locate the sample centre point in space. A desurveyed
        drillhole file contains a set of samples each with a calculated center
        point in XYZ world space.  Sometimes raw drillhole data tables to be
        desurveyed may contain more than one survey record within one sample, each
        with different azimuth and dips. Since a sample is by definition a
        straight line its location in space cannot be calculated using more than
        one survey record. The SURVSMTH parameter is used to automatically divide
        up samples where more than one survey records lie within a sample.  The
        samples are split in half until only one survey record lies within each
        sample. Therefore many samples may be created. The default value of
        SURVSMTH is 1 which will cause extra samples to be created so that no
        sample contains more than one survey record within its FROM and TO values.
        For no extra samples to be created the SURVSMTH parameter should be set to
        zero.  If the SURVSMTH parameter is set to zero and a sample does contain
        more than one survey record not all survey records will be taken into
        account. Traditionally this has been resolved by first compositing the
        samples to reduce their lengths. The SURVSMTH parameter avoids this
        requirement.  It is often the case that the first one or two samples in
        exploration holes contain more than one survey record because they are
        relatively long. This is because sample divisions have not had to have
        been created through assay and lithological identification near the
        surface.
        required: No; default: 1; range: 0,1

        ENDPOINT:     set to 1 to include the X, Y and Z coordinates of the start and end of
        each sample in the desurveyed output file. Fields XSTART, YSTART, ZSTART,
        XEND, YEND and ZEND are created in the output file.
        required: No; default: 0; range: 0,1

        DIPMETH:     Set to 1 to ensure that positive dip values point downwards, or -1 to
        point upwards
        required: No; default: 1; range: 0,1

        INCLMISS:     INCLude MISSing samples parameter.  0: the OUT file will not include FROM
        / TO intervals that were missing from the input sample files  1: the OUT
        file will include a record for every missing FROM / TO interval in the
        input sample files. The grades will all be set to absent data
        required: No; default: 0; range: 0,1

        PROMPT:     Set to 1 (default) to pause HOLES3D execution if an error occurs. Set to 0
        to continue processing script if errors are encountered (useful when
        running HOLES3D from script as processing will continue).
        required: No; default: 1; range: 0,1

        PRINT:     Option  Description  1  to display each individual process which is run by
        the HOLES3D superprocess.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.holes3d).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'HOLES3D ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def holmer(self,
                in1_i,
                in2_i,
                out_o,
                bhid_f,
                from_f,
                to_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input file 1. Must contain at least fields for BHID, FROM,and TO.
        required: Yes; default: ; range: 

        IN2:     Input file 2. Must contain at least fields for BHID, FROM,and TO.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        BHID:     Borehole identifier. May be numeric or alpha.
        required: Yes; default: BHID; range: 

        FROM:     Downhole FROM distance (top of intersection).
        required: Yes; default: FROM; range: 

        TO:     Downhole TO distance (base of intersection).
        required: Yes; default: TO; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.holmer).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'HOLMER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def igesin(self,
                proto_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     File containing plot prototype.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Plotfile to be created (may be same as IN; if it is, the original data in
        the file is overwritten).
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.igesin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'IGESIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def igesout(self,
                in_i
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Database plotfile to be output to AUTOCAD IGES format.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.igesout).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'IGESOUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ijkgen(self,
                proto_i,
                in_i,
                out_o,
                x_f,
                y_f,
                z_f,
                psmodel_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input prototype model describing the model parameters. Normally set up by
        PROTOM. Must contain the numeric fields XC, YC, ZC, IJK (explicit) and
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ (implicit) and XINC, YINC, ZINC
        (either, as required). For recalculation of IJK in an existing model, may
        be the same file as IN.
        required: Yes; default: ; range: 

        IN:     Input file to be converted into a model. Must contain the fields X , Y and
        Z representing (sub-)cell centre locations. This can be an existing model
        for recalculation of IJK.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model file. May be the same as IN where IN already contains model
        fields; in this case, recalculation is in-place. IJK will be set to absent
        (-) if the record lies outside the model limits.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Explicit numeric field in IN containing the X co-ordinate of the
        (sub-)cell centre.
        required: Yes; default: X; range: 

        Y:     Explicit numeric field in IN containing the Y co-ordinate of the
        (sub-)cell centre.
        required: Yes; default: Y; range: 

        Z:     Explicit numeric field in IN containing the Z co-ordinate of the
        (sub-)cell centre.
        required: Yes; default: Z; range: 

        ----------
        PARAMETERS
        ----------

        PSMODEL:     Option  Description  0  Just generate IJK field without copying additional
        attributes to the output model. This is the recommended option if your
        output file already contains the expected attributes.  1  Place all other
        model fields as well as IJK into the output model.  This will copy
        standard fields from the prototype to the output file, overwriting any
        fields of the same name copied from the input points file.
        required: Yes; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ijkgen).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'IJKGEN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def indata(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File containing Data Definition.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     File to be created (may be same as IN; if it is, then original data in
        file is overwritten).
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.indata).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INDATA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def indest(self,
                proto_i,
                in_i,
                srcparm_i,
                estparm_i,
                vmodparm_i='optional',
                model_o='optional',
                avgrades_o='optional',
                indicate_o='optional',
                sampout_o='optional',
                x_f='optional',
                y_f='optional',
                z_f='optional',
                zone1_f_f='optional',
                zone2_f_f='optional',
                key_f='optional',
                length_f_f='optional',
                dens_f_f='optional',
                discmeth_p=1,
                xpoints_p=1,
                ypoints_p=1,
                zpoints_p=1,
                xdspace_p='optional',
                ydspace_p='optional',
                zdspace_p='optional',
                parent_p=0,
                mindisc_p=1,
                copyval_p=0,
                fvaltype_p=1,
                fstep_p='optional',
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                zmin_p='optional',
                zmax_p='optional',
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                order_p=3,
                grmethod_p=3,
                pgfields_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input model prototype. This is a standard block model file containing the
        13 compulsory fields. It may also contain the rotated model fields. If it
        includes cells then it must be sorted on IJK.
        required: Yes; default: ; range: 

        IN:     Input sample data. This must contain X,Y and Z fields and at least one
        grade field.
        required: Yes; default: ; range: 

        SRCPARM:     Search volume parameter file. This contains 24 compulsory fields defining
        the search volume and the number of samples needed for grade estimation.
        More than one search volume may be defined. All fields are numeric:
        SREFNUM: Search volume reference number.  SMETHOD: Search volume shape.  1
        = 3D rectangle  2 = ellipsoid.  SDIST1: Max search distance in direction
        1.  SDIST2: Max search distance in direction 2.  SDIST3: Max search
        distance in direction 3.  SANGLE1: First rotation angle for search vol.
        SANGLE2: Second rotation angle.  SANGLE3: Third rotation angle.  SAXIS1:
        Axis for 1st rotation (1=X,2=Y,3=Z).  SAXIS2: Axis for 2nd rotation
        (1=X,2=Y,3=Z).  SAXIS3: Axis for 3rd rotation (1=X,2=Y,3=Z).  MINNUM1: Min
        number of samples, 1st search vol.  MAXNUM1: Max number of samples, 1st
        search vol.  SVOLFAC2: Axis multiplying factor,2nd search vol.  MINNUM2:
        Min number of samples, 2nd search vol.  MAXNUM2: Max number of samples,
        2nd search vol.  SVOLFAC3: Axis multiplying factor,3rd search vol.
        MINNUM3: Min number of samples, 3rd search vol.  MAXNUM3: Max number of
        samples, 3rd search vol.  OCTMETH: Octant method flag.  0 = no octant
        search,  1 = use octants.  MINOCT: Minimum number of octants to be filled.
        MINPEROC: Minimum number of samples in an octant.  MAXPEROC: Maximum
        number of samples in an octant.  MAXKEY: Maximum number of samples with
        the same key value within an octant.
        required: Yes; default: ; range: 

        ESTPARM:     Estimation parameter file.  Each record in the file describes an
        estimation method and its associated parameters. The fields are dependent
        on the estimation methods selected. All fields are optional except for
        VALUE_IN, SREFNUM and CUTOFF. General fields:  VALUE_IN: Grade field to be
        estimated.  SREFNUM: Search volume reference number.  CUTOFF: Cutoff grade
        for indicator calculation.  VALUE_OU: Output indicator estimated grade
        field to be created in MODEL (Default is VALUE_IN). The required field
        name must be specified in the first record of the Estimation Parameter
        file. Values in subsequent records will be ignored.  {ZONE1_F}: A/N 1st
        field for zonal estimation. The actual name of the field is given by the
        ZONE1_F field. e.g. ZONE1_F(ROCK).  {ZONE2_F}: A/N 2nd field for zonal
        estimation.  NUMSAM_F: Field to be created in MODEL for the number of
        samples.  SVOL_F: Field to be created in MODEL for dynamic search volume
        number.  VAR_F: Field to be created in MODEL for variance of estimate.
        MINDIS_F: Field to be created in MODEL for distance to nearest sample.
        IMETHOD: Estimation method.  1 = Nearest neighbour (NN).  2 = Inverse
        power of dist (IPD).  3 = Ordinary kriging (OK).  4 = Simple kriging (SK).
        5 = Sichel's t estimator.  Fields for IPD:  ANISO: Anisotropy method:  0 =
        no anisotropy.  1 = use search vol anisotropy.  2 = use ANANGLEn.
        ANANGLE1: N Anisotropy angle 1.  ANANGLE2: N Anisotropy angle 2.
        ANANGLE3:N Anisotropy angle 3.  ANDIST1: N Anisotropy distance 1.
        ANDIST2: N Anisotropy distance 2.  ANDIST3: N Anisotropy distance 3.
        POWER: N Power of distance for weighting.  ADDCON: N Constant added to
        distance.  Fields for kriging:  VREFNUM: Variogram model reference number.
        LOG: N Lognormal variogram flag. 0 = normal kriging. 1 = lognormal
        kriging.  KRIGNEGW: N Treatment of -ve weights: 0 = -ve weights kept and
        used. 1 = ignore samples with -ve weights  KRIGVARS: N Treatment of
        variance > sill: 0 = write variance to MODEL. 1 = set variance to sill.
        Fields for lognormal kriging:  GENCASE: N Calculation method: 0 = Rendu's
        method. 1 = General case.  DEPMEAN: N Deposit mean [If 0 then use kriged
        estimate]. Fields for general case:  TOL: N Tolerance for convergence.
        MAXITER: N Maximum number of iterations. Fields for simple kriging:
        LOCALMNP: N Method for calculation of local mean: 1 = use field defined in
        PROTO 2 = use mean within search vol.  LOCALM_F: Name of local mean field
        in PROTO; used if LOCALMNP=1
        required: Yes; default: ; range: 

        VMODPARM:     Variogram model parameter file. Each record in this file defines a
        variogram model type and its parameters. Only the VREFNUM field is
        compulsory.  VREFNUM: Model variogram reference number.  VANGLE1:
        Variogram anisotropy angle 1.  VANGLE2: Variogram anisotropy angle 2.
        VANGLE3: Variogram anisotropy angle 3.  VAXIS1: Model variogram rotation
        axis 1.  VAXIS2: Model variogram rotation axis 2.  VAXIS3: Model variogram
        rotation axis 3.  NUGGET: Nugget variance.  ST1: Variogram model type for
        structure 1.  1 = Spherical.  2 = Power [eg 1 - linear].  3 = Exponential.
        4 = Gaussian.  5 = De Wijsian.  ST1PAR1: 1st parameter of structure 1
        [Range 1 for spherical model].  ST1PAR2: 2nd parameter of structure 1
        [Range 2 for spherical model].  ST1PAR3: 3rd parameter of structure 1
        [Range 3 for spherical model].  ST1PAR4: 4th parameter of structure 1 [C
        variance for spherical model].  STn: Variogram model type for structure n.
        STnPARp pth parameter for structure n, where n<=9.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output model containing estimated grades, variance etc.
        required: No; default: ; range: 

        AVGRADES:     Output file containing cutoff grade ranges and average grade used for each
        range. It will include zone field(s), if any, plus the following fields:
        BIN: bin or grade range number LO_CUT: lower cutoff grade UP_CUT: upper
        cutoff grade NSAMPLES: number of samples in IN file lying within the bin
        BINGRADE: bin grade used for indicator kriging. This is dependent on the
        GRMETHOD parameter . SAMPMEAN: mean grade of samples in IN file lying
        within the bin
        required: No; default: ; range: 

        INDICATE:     Output indicator file. This is a copy of the sample input IN file, but
        also includes the 0/1 indicator values for each cutoff
        required: No; default: ; range: 

        SAMPOUT:     Output sample file containing details of weights for each sample for each
        cell estimated.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data in IN file. If not specified, then X is
        assumed.
        required: No; default: ; range: 

        Y:     Y coordinate of sample data in IN file. If not specified, then Y is
        assumed.
        required: No; default: ; range: 

        Z:     Z coordinate of sample data in IN file. If not specified, then Z is
        assumed.
        required: No; default: ; range: 

        ZONE1_F:     First field for zonal control.
        required: No; default: ; range: 

        ZONE2_F:     Second field for zonal control.
        required: No; default: ; range: 

        KEY:     Key field used to specify the field limiting the number of samples for
        estimation. The field must exist in the IN file.
        required: No; default: ; range: 

        LENGTH_F:     Field used for length weighting in IPD. The field must exist in the IN
        file.
        required: No; default: ; range: 

        DENS_F:     Field used for density weighting in IPD. The field must exist in the IN
        file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DISCMETH:     Cell discretisation method:  Option  Description  1  - use XPOINTS ,
        YPOINTS , ZPOINTS to define the number of points in the X,Y,Z directions.
        2  - use XDSPACE , YDSPACE , ZDSPACE to define the distance between
        points. The default is method (1).
        required: No; default: 1; range: 1,2

        XPOINTS:     Number of discretisation points in X. (1)
        required: No; default: 1; range: Undefined

        YPOINTS:     Number of discretisation points in Y. (1)
        required: No; default: 1; range: Undefined

        ZPOINTS:     Number of discretisation points in Z. (1)
        required: No; default: 1; range: Undefined

        XDSPACE:     Distance between discretisation points in X if DISCMETH=2. The default
        gives just one point.
        required: No; default: ; range: Undefined

        YDSPACE:     Distance between discretisation points in Y if DISCMETH=2. The default
        gives just one point.
        required: No; default: ; range: Undefined

        ZDSPACE:     Distance between discretisation points in Z if DISCMETH=2. The default
        gives just one point.
        required: No; default: ; range: Undefined

        PARENT:     Flag to control parent cell estimation:  Option  Description  0  -
        Estimate into individual subcells.  1  - Represent parent cell by a full
        3D matrix of points.  2  - Represent parent cell by a 3D matrix of points,
        but select only points lying within subcells. The default is (0).
        required: No; default: 0; range: 0,2

        MINDISC:     Minimum number of discretisation points. Only used if PARENT=2. The
        default is (1).
        required: No; default: 1; range: Undefined

        COPYVAL:     Flag controlling copying of values from PROTO to MODEL if there is
        insufficient data to estimate them:  Option  Description  0  - Assign
        absent data value[s] in MODEL.  1  - Copy from PROTO to MODEL. The default
        is (0).
        required: No; default: 0; range: 0,1

        FVALTYPE:     Flag for cell size approximation for F values:  Option  Description  1  -
        The exact dimensions of the cell are used  2  - Each cell is approximated
        by one of a discrete number of cell sizes. The default is (1).
        required: No; default: 1; range: 1,2

        FSTEP:     Step size for cell approximation. This is only used if FVALTYPE=2.
        required: No; default: ; range: Undefined

        XMIN:     Minimum X value for model updating. The default is the X model origin.
        required: No; default: ; range: Undefined

        XMAX:     Maximum X value for model updating. The default is the maximum X value for
        PROTO.
        required: No; default: ; range: Undefined

        YMIN:     Minimum Y value for model updating. The default is the Y model origin.
        required: No; default: ; range: Undefined

        YMAX:     Maximum Y value for model updating. The default is the maximum Y value for
        PROTO.
        required: No; default: ; range: Undefined

        ZMIN:     Minimum Z value for model updating. The default is the Z model origin.
        required: No; default: ; range: Undefined

        ZMAX:     Maximum Z value for model updating. The default is the maximum Z value for
        PROTO.
        required: No; default: ; range: Undefined

        XSUBCELL:     Number of subcells per parent cell in X if PROTO is empty. The default is
        (1).
        required: No; default: 1; range: Undefined

        YSUBCELL:     Number of subcells per parent cell in Y if PROTO is empty. The default is
        (1).
        required: No; default: 1; range: Undefined

        ZSUBCELL:     Number of subcells per parent cell in Z if PROTO is empty. The default is
        (1).
        required: No; default: 1; range: Undefined

        ORDER:     Order relation correction method:  Option  Description  1  Downwards.  2
        Upwards.  3  Average of methods 1 and 2.
        required: No; default: 3; range: 1,3

        GRMETHOD:     Method for specifying average grade within each cutoff range:  Option
        Description  1  Average of minimum and maximum cutoff values.  2  Average
        calculated from samples in IN file. Mean grade for top bin.  3  Average
        calculated from samples in IN file. Median grade for top bin.  4  Specify
        values using BINGRADE and ABVGRADE fields in ESTPARM file.
        required: No; default: 3; range: 1,4

        PGFIELDS:     Flag to select whether the proportion above cutoff fields (PRABn) and the
        grade above cutoff fields (GRABn) should be included in the output MODEL
        file:  Option  Description  0  Do not include the PRABn and GRABn fields.
        1  Include the PRABn and GRABn fields.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.indest).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INDEST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def inpddf(self,
                out_o,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Database file to be created. If OUT is a catalogue file, then all files in
        the catalogue will be input.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     >=1 to display each record (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.inpddf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INPDDF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)     
        
        
    def inpfml(self,
                out_o,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     File to be created.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     >=1 to display each record (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.inpfml).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INPFML ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def inputc(self,
                out_o,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     File to be created.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     >=1 to display each record (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.inputc).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INPUTC ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def inputd(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     File to be created.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.inputd).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INPUTD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def inputw(self,
                in_i,
                out_o,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File containing Data Definition.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     File to be created (may be same as IN; if it is, the original data in file
        is overwritten).
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     >=1 Display each record (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.inputw).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'INPUTW ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ipdnpg(self,
                proto_i,
                in_i,
                model_o,
                x_f,
                y_f,
                z_f,
                value_f,
                type_p,
                radius_p='optional',
                minnop_p=5,
                maxnop_p=1000,
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Prototype model. Must contain at least the fields XC, YC, ZC, XINC, YINC,
        ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK. May contain cells and sub-
        cells.
        required: Yes; default: ; range: 

        IN:     Input sample data (sorted on X). Must contain the fields X , Y , Z ,
        VALUE.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output interpolated model.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Name of sample X field.
        required: Yes; default: X; range: 

        Y:     Name of sample Y field.
        required: Yes; default: Y; range: 

        Z:     Name of sample Z field.
        required: Yes; default: Z; range: 

        VALUE:     Name of field to be interpolated.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        TYPE:     (1) Type of interpolation to be used :- Option Description 1 Moving mode 2
        Moving median 3 Varying quantile 4 Angle-weighted varying quantile
        required: Yes; default: 1; range: 1,4

        RADIUS:     Search radius [mean cell dimension].
        required: No; default: ; range: Undefined

        MINNOP:     Minimum number of samples (5).
        required: No; default: 5; range: Undefined

        MAXNOP:     Maximum number of samples (1000).
        required: No; default: 1000; range: Undefined

        XSUBCELL:     No. of sub-cells/cell in X (1).
        required: No; default: 1; range: Undefined

        YSUBCELL:     No. of sub-cells/cell in Y (1).
        required: No; default: 1; range: Undefined

        ZSUBCELL:     No. of sub-cells/cell in Z (1). Above three parameters only used if input
        prototype does not already contain cells.
        required: No; default: 1; range: Undefined

        PRINT:     >=2 Display co-ordinates and interpolated values.
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ipdnpg).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'IPDNPG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def isohol(self,
                in_i,
                plot_o,
                pxmin_p,
                pxmax_p,
                pymin_p,
                pymax_p,
                pzmin_p,
                pzmax_p,
                vertexag_p,
                rotate_p,
                elevate_p,
                proto_i='optional',
                value_f='optional',
                bhid_f='BHID',
                x_f='X',
                y_f='Y',
                z_f='Z',
                length_f='LENGTH',
                a0_f='A0',
                b0_f='B0',
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input drillhole data file. Must contain fields BHID,X,Y,Z,LENGTH,A0,B0, +
        VALUE field.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        Without a plot prototype, PXMIN ,.... PZMAX define the region to be mapped
        to the screen.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Field containing colour codes.
        required: No; default: ; range: 

        BHID:     Drillhole identifier field (if not BHID).
        required: No; default: BHID; range: 

        X:     Name of X field (if not X).
        required: No; default: X; range: 

        Y:     Name of Y field (if not Y).
        required: No; default: Y; range: 

        Z:     Name of Z field (if not Z).
        required: No; default: Z; range: 

        LENGTH:     Name of LENGTH field (if not LENGTH).
        required: No; default: LENGTH; range: 

        A0:     Name of A0 field (if not A0).
        required: No; default: A0; range: 

        B0:     Name of B0 field (if not B0).
        required: No; default: B0; range: 

        ----------
        PARAMETERS
        ----------

        PXMIN:     X value of left-hand side of region to be plotted.
        required: Yes; default: ; range: Undefined

        PXMAX:     X value of right-hand side of region to be plotted.
        required: Yes; default: ; range: Undefined

        PYMIN:     Y value of front of region to be plotted.
        required: Yes; default: ; range: Undefined

        PYMAX:     Y value of back of region to be plotted.
        required: Yes; default: ; range: Undefined

        PZMIN:     Z value of bottom of region to be plotted.
        required: Yes; default: ; range: Undefined

        PZMAX:     Z value of top of region to be plotted.
        required: Yes; default: ; range: Undefined

        VERTEXAG:     Vertical exaggeration required.
        required: Yes; default: ; range: Undefined

        ROTATE:     The rotation angle in degrees horizontally of the viewpoint, clockwise
        from the model Y axis (45).
        required: Yes; default: 45; range: 0,360

        ELEVATE:     The rotation angle in degrees vertically of the viewpoint, upwards from
        model X-Y plane (45).
        required: Yes; default: 45; range: -90,90

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.isohol).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ISOHOL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def isomet(self,
                in_i,
                plot_o,
                field_f,
                vmin_p,
                vmax_p,
                vertexag_p,
                gridint_p,
                proto_i='optional',
                rotate_p=45,
                elevate_p=45,
                plane_p='XY',
                position_p='optional',
                top_p='optional',
                bottom_p='optional',
                pxmin_p='optional',
                pxmax_p='optional',
                pymin_p='optional',
                pymax_p='optional',
                xinc_p='optional',
                yinc_p='optional',
                zinc_p='optional',
                ndx_p=0,
                ndy_p=0,
                ndz_p=0,
                colint_p=0,
                colst_p=1,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK + FIELD field.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE, XORIG,
        YORIG, XRT, YTP, XPICRT, YPICTP (numeric, implicit). Only the values of
        fields XORIG, YORIG, XRT, YTP, XPICRT and YPICTP are used. If no PROTO
        file entered, scaling is fully automatic.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FIELD:     Field to be plotted.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VMIN:     Minimum mesh value.
        required: Yes; default: ; range: Undefined

        VMAX:     Maximum mesh value.
        required: Yes; default: ; range: Undefined

        VERTEXAG:     Vertical exaggeration required.
        required: Yes; default: ; range: Undefined

        GRIDINT:     Grid interval for mesh.
        required: Yes; default: ; range: Undefined

        ROTATE:     The rotation angle in degrees horizontally of the viewpoint, clockwise
        from the model Y axis (45).
        required: No; default: 45; range: 0,360

        ELEVATE:     The rotation angle in degrees vertically of the viewpoint, upwards from
        model X-Y plane (45).
        required: No; default: 45; range: -90,90

        PLANE:     Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane.
        required: No; default: XY; range: Undefined

        POSITION:     Position of the plane. For example if the XY plane is used a Z position is
        needed. Only required if neither TOP nor BOTTOM are specified.
        required: No; default: ; range: Undefined

        TOP:     Value of FIELD for which top of seam surface required. Only required if
        neither POSITION nor BOTTOM appear.
        required: No; default: ; range: Undefined

        BOTTOM:     Value of FIELD for which base of seam surface required. Only required if
        neither POSITION nor TOP appear. Both TOP and BOTTOM set for an isopach.
        required: No; default: ; range: Undefined

        PXMIN:     Minimum X value for area covered by mesh.
        required: No; default: ; range: Undefined

        PXMAX:     Maximum X value for area covered by mesh.
        required: No; default: ; range: Undefined

        PYMIN:     Minimum Y value for area covered by mesh.
        required: No; default: ; range: Undefined

        PYMAX:     Maximum Y value for area covered by mesh.
        required: No; default: ; range: Undefined

        XINC:     Grid increment on the X axis. Default is PXMAX- PXMIN.
        required: No; default: ; range: Undefined

        YINC:     Grid increment on the Y axis. Default is PYMAX- PYMIN.
        required: No; default: ; range: Undefined

        ZINC:     Grid increment on the Z axis. Default is VMAX- VMIN.
        required: No; default: ; range: Undefined

        NDX:     Number of decimal places for grid annotation on the X axis (0).
        required: No; default: 0; range: Undefined

        NDY:     Number of decimal places for grid annotation on the Y axis (0).
        required: No; default: 0; range: Undefined

        NDZ:     Number of decimal places for grid annotation on the Z axis (0).
        required: No; default: 0; range: Undefined

        COLINT:     Mesh interval for colour. If 0 then all of mesh is plotted in (0).
        required: No; default: 0; range: Undefined

        COLST:     Start colour for mesh (1).
        required: No; default: 1; range: 1,64

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0). N.B. Scaling is
        fully automatic in this process.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.isomet).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ISOMET ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def isoper(self,
                proto_i,
                perimin_i,
                plot_o,
                pxmin_p,
                pxmax_p,
                pymin_p,
                pymax_p,
                pzmin_p,
                pzmax_p,
                rotate_p=45,
                elevate_p=45,
                charsize_p=4,
                aspratio_p=0.9,
                colour_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Prototype plot file. Only the plot area data is used. Any scaling and data
        ranges (XMIN, XMAX etc ) are ignored.
        required: Yes; default: ; range: 

        PERIMIN:     Perimeter input file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PXMIN:     X value of left-hand side of region to be plotted.
        required: Yes; default: ; range: Undefined

        PXMAX:     X value of right-hand side of region to be plotted.
        required: Yes; default: ; range: Undefined

        PYMIN:     Y value of front of region to be plotted.
        required: Yes; default: ; range: Undefined

        PYMAX:     Y value of back of region to be plotted.
        required: Yes; default: ; range: Undefined

        PZMIN:     Z value of bottom of region to be plotted.
        required: Yes; default: ; range: Undefined

        PZMAX:     Z value of top of region to be plotted.
        required: Yes; default: ; range: Undefined

        ROTATE:     The rotation angle in degrees horizontally of the viewpoint, clockwise
        from the data Y axis (45).
        required: No; default: 45; range: 0,360

        ELEVATE:     The rotation angle in degrees vertically of the viewpoint, upwards from
        data X-Y plane (45).
        required: No; default: 45; range: -90,90

        CHARSIZE:     Character size in millimetres (4).
        required: No; default: 4; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.isoper).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ISOPER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def isotri(self,
                proto_i,
                wiretr_i,
                wirept_i,
                plot_o,
                pxmin_p,
                pxmax_p,
                pymin_p,
                pymax_p,
                pzmin_p,
                pzmax_p,
                rotate_p=45,
                elevate_p=30,
                hidden_p=0,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Prototype plot file.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file .
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PXMIN:     Minimum data X value to be plotted.
        required: Yes; default: ; range: Undefined

        PXMAX:     Maximum data X value to be plotted.
        required: Yes; default: ; range: Undefined

        PYMIN:     Minimum data Y value to be plotted.
        required: Yes; default: ; range: Undefined

        PYMAX:     Maximum data Y value to be plotted.
        required: Yes; default: ; range: Undefined

        PZMIN:     Minimum data Z value to be plotted.
        required: Yes; default: ; range: Undefined

        PZMAX:     Maximum data Z value to be plotted.
        required: Yes; default: ; range: Undefined

        ROTATE:     The rotation angle of the direction of view, in degrees horizontally and
        clockwise from the data Y axis. Default (45). E.g. if model Y and X axes
        are parallel to North 45 = Looking North-East 225 = Looking South-West
        required: No; default: 45; range: 0,360

        ELEVATE:     The rotation angle of the direction of view, in degrees vertically from
        data X-Y plane. Default (30). E.g. if model Y and X axes are parallel to
        North 0 = Looking horizontally, along X-Y plane. +90 = Looking vertically
        downwards -90 = Looking vertically upwards
        required: No; default: 30; range: -90,90

        HIDDEN:     Control of hidden line display.  Option  Description  0  Hidden lines are
        NOT displayed.  1  Hidden lines are displayed.
        required: No; default: 0; range: 0,1

        CHARSIZE:     Character size in millimetres.
        required: No; default: 3; range: 

        ASPRATIO:     Aspect ratio, width / ht. for chars.
        required: No; default: 0.9; range: 

        COLOUR:     Colour [as 'pen' number] for plot. NOTE: This variable name was missing
        during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: 

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file. N.B. Scaling is fully
        automatic in this process.
        required: No; default: 0; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.isotri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ISOTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def join(self,
                in1_i,
                in2_i,
                out_o,
                key1_to_10_f=['optional'],
                subsetr_p=0,
                subsetf_p=0,
                cartjoin_p=0,
                keytol_p=1e-05,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     First file to be updated (sorted on required keyfields).
        required: Yes; default: ; range: 

        IN2:     Second file (update file) (sorted on required keyfields).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for matching.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SUBSETR:     Controls whether all records or a subset are written to the output file.
        If set to (0) all records are written.
        required: No; default: 0; range: 0,1

        SUBSETF:     Controls whether all fields or a subset is written to the output file. If
        set to (0) all fields are written. With SUBSETR and SUBSETF set to 0 JOIN
        writes out all records and all fields from both input files. With
        SUBSETR=1 and SUBSETF=0 a relational subset join is carried out. With
        SUBSETR=0 and SUBSETF=1 a relational weave is carried out. With SUBSETR=1
        and SUBSETF=1 a relational subset weave is carried out.
        required: No; default: 0; range: 0,1

        CARTJOIN:     If set to (0) and if no keyfields are specified the process will terminate
        with an error. If set to 1 the full Cartesian product is produced and
        written to the output file. No keyfields should be specified to produce
        the Cartesian product.
        required: No; default: 0; range: 0,1

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        PRINT:     >=1 Display messages on Data definitions. Default is (0)
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.join).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'JOIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def kna(self,
            samples_i,
            testblks_i,
            epar_i,
            fields_i,
            vmodel_i,
            spar_i,
            xpt_or_ypt_or_zpt_f,
            vsetnum_p,
            prnt_p,
            out_o='optional',
            key_f='optional',
            blkgroup_f='optional',
            nokstats_p=0,
            blkcov_p=0,
            nblkcov_p=20,
            nthreads_p=-1
            ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     A file containing sample positional information and supporting attributes.
        required: Yes; default: ; range: 

        TESTBLKS:     A file containing centre positions of test blocks to perform grade
        estimation on. It can optionally contain a numeric field to specify groups
        of blocks to calculate statistics per group which must be specified as the
        BLKGROUP field.
        required: Yes; default: ; range: 

        EPAR:     The input estimation parameter file used to specify parameters and for
        each estimation. This must contain the following fields: SREFNUM IMETHOD
        DISCX DISCY DISCZ BLKSZX BLKSZY BLKSZZ SREFNUM defines the reference of
        the search parameters found in the SPAR file. IMETHOD is used to specify
        the Interpolation method 3=Ordinary Kriging (default) 4=Simple Kriging
        using sample means 10=Simple Kriging using means defined in FIELDS
        11=Simple Kriging using local means defined in the prototype). DISCX,
        DISCY, DISCZ specify the number of discretization points. BLKSZX, BLKSZY,
        BLKSZZ specify the dimensions of the cells to be interpolated into.
        required: Yes; default: ; range: 

        FIELDS:     A file that contains field names of variables to be used in estimation.
        Input variables must be included under the mandatory column IN_VAR and
        each of these fields must be present in the SAMPLES and VGRAM file. If
        more than 1 variable is supplied Multivariate (Co)Kriging will be
        performed. If IMETHOD=10 is used, the column SKMEAN must be used to
        specify the mean per variable. If IMETHOD=11 is used the column LOC_MEAN
        must be used to specify the local mean fields in the prototype model.
        required: Yes; default: ; range: 

        VMODEL:     The input (cross-)variogram model parameter file. If more than 1 variable
        is suppled in the FIELDS file (i.e. multivariate estimation), this file
        must contain the columns GRADE and GRADE2.
        required: Yes; default: ; range: 

        SPAR:     The input search parameter file. This must contain the following 12
        mandatory fields: SREFNUM which is used to store a reference number for
        each record which is then specified by the SREFNUM parameter in COKRIG.
        SDIST1, SDIST2, SDIST3 specifying the search distances in the X, Y and Z
        directions respectively. SAXIS1, SAXIS2, SAXIS3 specifying the first,
        second and third axes which the search volume is to be rotated around (1 =
        x, 2 = Y, 3 = Z). SANGLE1, SANGLE2, SANGLE3 which specify the clockwise
        angles which search volume is rotated around the axes specified by SAXIS1,
        SAXIS2, SAXIS3. MINNUM1 which is the minimum number of samples required
        per estimate MAXNUM1 which is the optimum number of samples to be used per
        estimate.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     The output file which will contain statistics for each estimation which
        has been performed.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        XPT/YPT/ZPT:     X/Y/Z coordinate of sample data in the SAMPLE file.
        required: Yes; default: XPT/YPT/ZPT; range: 

        KEY:     Key field used to specify the field limiting the number of samples for
        estimation using the optional OPTKEY and MAXKEY parameters in the SPAR
        file. The field must exist in the SAMPLES file.
        required: No; default: ; range: 

        BLKGROUP:     Numeric field in the PROTO file used to split test blocks into groups to
        calculate statistics from.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VSETNUM:     The reference number of the variogram model set to be used from the VMODEL
        file
        required: Yes; default: 1; range: Undefined

        PRNT:     The level of detail for text printed to the command window. A value of 0
        only prints errors, a value of 1 additionally prints warnings and
        progress, a value of 2 additionally prints further information.
        required: Yes; default: 0; range: 0,1

        NOKSTATS:     Set this parameter to 1 to prevent output of Kriging statistics. Typically
        used with BLKCOV=1 when testing the number of discretization points to be
        used.
        required: No; default: 0; range: 0,1

        BLKCOV:     Set this parameter to 1 to calculate and output block covariance.
        Typically used for testing discretization.
        required: No; default: 0; range: 0,1

        NBLKCOV:     The number of random samples to use for calculating block covariance per
        KNA run. A value of at least 20 is recommended to ensure reasonable
        precision.
        required: No; default: 20; range: Undefined

        NTHREADS:     Number of threads to be used for the main calculation. Any value less than
        1 will automatically select the values based on the number of virtual
        cores on the computer.
        required: No; default: -1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.kna).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'KNA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def layout(self,
                in_i,
                text_i='optional',
                outlines_i='optional',
                patterns_i='optional',
                collars_i='optional',
                holes_i='optional',
                geol_i='optional',
                coordmod_p=0,
                coordtyp_p=0,
                loyorig_p='optional',
                loxorig_p='optional',
                haxiscol_p=8,
                vaxiscol_p=10,
                charsize_p=3,
                dimenu_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Blast outline for composite design. The file must contain the fields:-
        XP,YP,ZP,PTN,PVALUE (numeric, explicit). It may also contain the field
        BENCH; if it does not contain this field, all bench numbers will be taken
        as 1. The PVALUE field contains a Blast number. The file may contain many
        blasts; one is selected at the start of the process.
        required: Yes; default: ; range: 

        TEXT:     Input/output text file for text added to the drawing. If this file does
        not exist, it will be created. If it does exist, it must have the fields
        BENCH, BLAST, COMPOSIT, XT, YT, ANGLE, CHARSIZE, ASPRAT, (all numeric) and
        TEXT (40 characters). Any existing text in the file for the current bench
        and blast will be plotted on the screen.
        required: No; default: ; range: 

        OUTLINES:     Input/output perimeters. If this file does not exist, it will be created.
        It must contain the fields XP, YP, ZP, PTN, PVALUE, P, PTYPE, BENCH,
        BLAST. The PVALUE field will contain the perimeter number. Any perimeter
        defined with the DIGITISER [/CD] or NEW PERIMETER [/EN] commands may be
        written to the OUTLINES file by the WRITE PERIMETER [/FW] command.
        Perimeters will be overwritten if they match the perimeter number (PVALUE)
        of the perimeter being written.
        required: No; default: ; range: 

        PATTERNS:     Input/output pattern file. If this file does not exist, it will be
        created. It must contain the fields ROW, XS, XSPACING, YSPACING, PATTERN
        (all numeric) and PATTEXT (16 character alphanumeric).
        required: No; default: ; range: 

        COLLARS:     Input/output collars file. Fields required are XCOLLAR, YCOLLAR, ZCOLLAR,
        BENCH, BLAST and BHID (A/N). Additional fields used if available are BRG,
        DIP, HLENGTH, PATTERN, NSAMP and SNFIRST. If this file does not exist it
        will be created with all the above fields. At least one of the COLLARS or
        HOLES files must be specified.
        required: No; default: ; range: 

        HOLES:     Blast hole samples file. Fields required are X, Y, Z and BHID (A/N).
        Additional fields used if available are BENCH, BLAST, A0, B0, LENGTH,
        SAMPLE, FROM and TO. If this file does not exist it will be created with
        all the above fields. If it contains any grade values, these may be
        displayed either numerically or by colour besides each blast-hole. This
        file will be written to by the WRITE BLAST HOLES [/FL] command. If any
        entries exist on the file for the current Bench and Blast they will first
        be overwritten. If the BENCH and BLAST fields do not exist, then all
        entries will be deleted before the new holes are written. At least one of
        the COLLARS or HOLES files must be specified.
        required: No; default: ; range: 

        GEOL:     Geological boundaries. This file must contain the fields X,Y,Z,PTN and
        PVALUE. The values are assumed to be (unclosed) strings rather than
        perimeters. Any strings on this file may be plotted over the blast.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        COORDMOD:     Coordinate verification mode, controls the prompting for coordinates in
        the LAY DOWN PATTERN [/BP] and DEFINE HOLE [/BD] commands.  Option
        Description  0  No coordinate prompting  1  Coordinates are prompted for.
        required: No; default: 0; range: 0,1

        COORDTYP:     Coordinate type:  Option  Description  0  Conventional rhs  1  LO co-
        ordinate system.
        required: No; default: 0; range: 0,1

        LOYORIG:     For COORDTYP=1 only; the LO Y co-ordinate origin [including - sign] for
        internal co-ordinate conversion.
        required: No; default: ; range: Undefined

        LOXORIG:     For COORDTYP=1 only; the LO X co-ordinate origin for internal co-ordinate
        conversion.
        required: No; default: ; range: Undefined

        HAXISCOL:     Colour for horizontal axis lines; these are X axis lines [ COORDTYP=0] or
        LO Y lines [ COORDTYP=1] (8).
        required: No; default: 8; range: 1,64

        VAXISCOL:     Colour for vertical axis lines; these are Y axis lines [ COORDTYP=0] or LO
        X lines [ COORDTYP=1] (10).
        required: No; default: 10; range: 1,64

        CHARSIZE:     Character size for display in mm (3).
        required: No; default: 3; range: Undefined

        DIMENU:     Toggle between cursor and digitiser mode.  Option  Description  0  ;
        Cursor mode.  1  ; Digitiser mode. All commands available from digitiser.
        Default is 0 (0) Commands --------
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.layout).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LAYOUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def link(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Database file name.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.link).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LINK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def link3d(self,
                perimin_i,
                wireptin_i,
                wiretrin_i,
                section_i='optional',
                wireptou_o='optional',
                wiretrou_o='optional',
                perimout_o='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                attrib5_f='optional',
                maxpts_p=500,
                copyper_p=0,
                copywf_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input string file. If the file already exists, it must contain the fields
        XP ,YP, ZP, PTN and PVALUE. If this file does not exist, it will be
        created with explicit numeric fields XP, YP, ZP, PID, PTN, PVALUE, , and
        TAG plus any additional attribute fields which are specified (see below).
        If this file is also to be used as the wireframe points file it must
        contain an explicit numeric field PID.
        required: Yes; default: ; range: 

        WIREPTIN:     Input wireframe point file. If the file already exists, it must contain
        the fields XP ,YP, ZP and PID. If this file does not exist, it will be
        created with explicit numeric fields XP, YP, ZP, PID, PTN, PVALUE, , and
        TAG plus any additional attribute fields which are specified (see below).
        If this file is also to be used as the string file it must contain the
        explicit numeric fields PTN and PVALUE.
        required: Yes; default: ; range: 

        WIRETRIN:     Input wireframe triangle file. If this does not exist, it will be created
        with explicit numeric fields PID1, PID2, PID3, TRIANGLE, SID plus any
        additional attribute fields which are specified (see below). If the file
        already exists, it must contain all the five fields mentioned above.
        required: Yes; default: ; range: 

        SECTION:     Optional section definition file. If this file does not exist it will be
        created. This file must contain the fields XCENTRE, YCENTRE, ZCENTRE,
        SAZI, SDIP, HSIZE, VSIZE, DPLUS, DMINUS and TEXT. All fields are numeric
        except for TEXT which must be 6 words long. It is advisable to specify a
        section file as this is used to change views from within LINK3D. Views can
        be created and stored in the section file from within LINK3D.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        WIREPTOU:     Optional output point file [for wireframe model] This file has all the
        same fields as the input string file, as well as new PID and TAG fields.
        required: No; default: ; range: 

        WIRETROU:     Output triangle file [for wireframe model].
        required: No; default: ; range: 

        PERIMOUT:     Optional output string file.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        ATTRIB1:     Optional attribute field 1. If specified, this field will appear in the
        output file with a value specified for each digitised point. Attribute
        fields may be numeric or alphanumeric. If alphanumeric attributes are
        used, they MUST already exist in the PERIMIN file. In LINK3D Attributes
        need only be specified if the PERIMIN file is being created. The process
        automatically picks up non-standard fields as attributes.
        required: No; default: ; range: 

        ATTRIB2:     Optional attribute field 2.
        required: No; default: ; range: 

        ATTRIB3:     Optional attribute field 3.
        required: No; default: ; range: 

        ATTRIB4:     Optional attribute field 4.
        required: No; default: ; range: 

        ATTRIB5:     Optional attribute field 5. LINK3D can handle up to 10 attribute fields at
        once.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MAXPTS:     Maximum number of points in any one string. The maximum number of strings
        that can be handled has been set for your installation. This is typically
        500 strings (the actual number is displayed by LINK3D at run time). If
        MAXPTS is absent, a value is calculated that will avoid LINK3D having to
        page strings to and from a temporary disk file. (500).
        required: No; default: 500; range: Undefined

        COPYPER:     If set to 1, then all strings will be copied from PERIMIN to PERIMOUT ,
        subject to any retrieval criteria. Default is no copy. If PERIMOUT is not
        set, COPYPER is ignored.
        required: No; default: 0; range: 0,1

        COPYWF:     If set to 1, then all points and triangles will be copied from WIREPTIN to
        WIREPTOU and from WIRETRIN to WIRETROU , subject to any retrieval
        criteria. Default is no copy. If WIREPTOU and WIRETROU are not set,
        COPYPWF is ignored.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.link3d).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LINK3D ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def list(self,
                in_i,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f1_to_10_f=['optional'],
                prompt_p=20
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be displayed. If IN is a catalogue file, then all the files in the
        catalogue will be displayed.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F1_to_10:     Optional first listed field. None specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PROMPT:     Page length for display; 0=infinite (20).
        required: No; default: 20; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.list).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LIST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def listc(self,
                in_i,
                prompt_p=20
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Character file to be displayed. If IN is a catalogue file, then all files
        in the catalogue will be displayed.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PROMPT:     Page length for display; 0=infinite (20).
        required: No; default: 20; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.listc).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LISTC ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def listdr(self,
                out_o='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output catalogue file, giving list of files to be used by processes
        APPEND, DELETE, DISPLA, INPDDF, LIST and OUTPUT.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.listdr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LISTDR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def loadcf(self,
                print_p=0,
                level_p=0,
                encrypt_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ----------
        PARAMETERS
        ----------

        PRINT:     Macro line display (0). =0 Do not display.=1 Display each line of the
        macro file as loaded.
        required: No; default: 0; range: 0,1

        LEVEL:     Level of menu compilation . =0 Standard compilation. =1 'Optimise' for
        !SCREEN processing (0).
        required: No; default: 0; range: 0,1

        ENCRYPT:     Encryption level (0). =0 None. =1 Macro is encrypted
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.loadcf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LOADCF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def lunicond(self,
                    ucmodel_i,
                    outmdoel_o,
                    kriging_f,
                    outfield_f,
                    smumodel_i='optional',
                    cutmin_p=0,
                    cutint_p=10,
                    cutnum_p=10
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        UCMODEL:     A model file containing the conditioned panels. This model is the output
        model from the process UNIFCOND, containing the uniform conditioned
        distribution (metal, grade and proportion at each cut-off).
        required: Yes; default: ; range: 

        SMUMODEL:     An SMU model, containing a linear estimate of a grade, for the
        localization ranking of the uniform conditioned panel distribution.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUTMDOEL:     The output locally-conditioned model.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KRIGING:     The field in the input SMU model containing the linear estimated values
        upon which the UC distribution will be ranked.
        required: Yes; default: ; range: 

        OUTFIELD:     The field in the output locally-conditioned model (OUTMODEL) to contain
        the values resulting from localized uniform conditioning.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTMIN:     The minimum cutoff grade to be considered during Uniform Conditioning.
        required: No; default: 0; range: 

        CUTINT:     The size of each grade cutoff interval
        required: No; default: 10; range: 

        CUTNUM:     The number of grade cutoff intervals to considered during Uniform
        Conditioning.
        required: No; default: 10; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.lunicond).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'LUNICOND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def makedtm(self,
                wiretr_o,
                wirept_o,
                xpt_f,
                ypt_f,
                zpt_f,
                perimin_i='See Documentation',
                stringin_i='See Documentation',
                pointsin_i='See Documentation',
                boundary_p=0,
                incperim_p=1,
                tol_p=1e-05,
                flattri_p=0,
                trim_p=0,
                trimang_p=0,
                trimlen_p=0,
                crest_p=0,
                cresadj_p=0,
                valley_p=0,
                valleyadj_p=0,
                key_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file containing XP,YP,ZP,PTN, PVALUE fields. Closed
        strings will be used as boundaries to the triangulation, and may be
        included in the triangulation if @INCPERIM is 1.
        required: Yes*; default: ; range: 

        STRINGIN:     Input string file containing XP,YP,ZP,PTN and PVALUE fields. String
        segments are included in the triangulation as 3D edge constraints,
        breaklines. Strings may be open or closed.
        required: Yes*; default: ; range: 

        POINTSIN:     Input point file containing XPT,YPT,ZPT fields.
        required: Yes*; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Output wireframe points file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        XPT:     X field in input file
        required: Yes; default: ; range: 

        YPT:     Y field in input file
        required: Yes; default: ; range: 

        ZPT:     Z field in input file
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        BOUNDARY:     Boundary specifier for perimeters:  0 - outermost strings are an external
        boundary. 1 - outermost strings are an internal boundary.
        required: No; default: 0; range: 0,1

        INCPERIM:     Include perimeter strings in the triangulation :  0 - perimeter strings
        are NOT included within the triangulation. 1 - perimeter strings ARE
        included within the triangulation.
        required: No; default: 1; range: 0,1

        TOL:     Tolerance distance below which points can be moved to avoid sliver
        triangles around breaklines
        required: No; default: 0.00001; range: Undefined

        FLATTRI:     Avoid flat triangles:  0 - do not avoid flat triangles. 1 - flip
        connection to try to avoid flat triangles.
        required: No; default: 0; range: 0,1

        TRIM:     Trim edge triangles:  0 - do not trim edge triangles. 1 - iteratively
        remove triangles from the edge of the dtm until the constraints from
        @TRIMANG and @TRIMLEN are met.
        required: No; default: 0; range: 0,1

        TRIMANG:     Minimum (2D) angle allowed in an edge triangle to avoid trimming
        required: No; default: 0; range: 0,360

        TRIMLEN:     Maximum (2D) edge length allowed in an edge triangle to avoid trimming
        required: No; default: 0; range: Undefined

        CREST:     Add automatic crest spurs to minimise upper plateaus:  0 - do not add
        crest spurs. 1 - add crest spurs.
        required: No; default: 0; range: 0,1

        CRESADJ:     Vertical distance to offset the crest spurs
        required: No; default: 0; range: Undefined

        VALLEY:     Add automatic valley spurs to minimise lower plateaus:  0 - do not add
        valley spurs. 1 - add valley spurs.
        required: No; default: 0; range: 0,1

        VALLEYADJ:     Vertical distance to offset the valley spurs
        required: No; default: 0; range: 0,1

        KEY:     Add automatic key spurs:  0 - do not add key spurs. 1 - add key spurs.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.makedtm).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MAKEDTM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def manova(self,
                in_i,
                value_f,
                key1_to_10_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file, sorted on required keyfields.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Field for analysis of variance.
        required: Yes; default: ; range: 

        KEY1_to_10:     Keyfield 1 to 10 for replicate observations.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.manova).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MANOVA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def mdtran(self,
                in_i,
                proto_i,
                out_o,
                protorot_i='optional',
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                factor_p=1,
                inverse_p=0,
                print_p=0,
                angle1_p=0,
                angle2_p=0,
                angle3_p=0,
                rotaxis1_p=3,
                rotaxis2_p=1,
                rotaxis3_p=3,
                x0_p=0,
                y0_p=0,
                z0_p=0,
                xr0_p=0,
                yr0_p=0,
                zr0_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model to be rotated. Must contain at least the fields XC, YC, ZC,
        XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, and IJK. May also
        contain value fields. It must be sorted by IJK.
        required: Yes; default: ; range: 

        PROTO:     Prototype model defining output model. Must contain at least the fields
        XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ and IJK.
        May contain cells and subcells. Any fields which are in PROTO but not in
        IN will have their values carried across into OUT.
        required: Yes; default: ; range: 

        PROTOROT:     Optional file containing the rotation and translation parameters stored as
        the default of implicit fields ANGLE1, ANGLE2, ANGLE3, X0, Y0, Z0, XMORIG,
        YMORIG, ZMORIG, ROTAXIS1, ROTAXIS2 and ROTAXIS3. Fields XMORIG, YMORIG and
        ZMORIG correspond to parameters XR0, YR0 and ZR0. The other nine fields
        have the same name as the corresponding parameters. If this file is
        specified and has valid values for all twelve fields then the parameter
        entries for rotation and translation are ignored. This file can be created
        using the Rotated Model option in process PROTOM. Data will then be
        transformed into the local (rotated) coordinate system of the model.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model. Will have default field values from PROTO for XC, YC, ZC,
        XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, and NZ. Will also
        contain any value fields from IN and PROTO. It will be sorted by IJK.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XSUBCELL:     Cell division in X direction in OUT. Only used if PROTO is empty. Default
        (1), max 20.
        required: No; default: 1; range: 1,20

        YSUBCELL:     Cell division in Y direction in OUT. Only used if PROTO is empty. Default
        (1), max 20.
        required: No; default: 1; range: 1,20

        ZSUBCELL:     Cell division in Z direction in OUT. Only used if PROTO is empty. Default
        (1), max 20.
        required: No; default: 1; range: 1,20

        FACTOR:     Co-ordinate scaling factor. Default (1). The rotated co-ordinate system
        units will be e.g. 0.3048 for a grid in metres on an unrotated grid in
        feet.
        required: No; default: 1; range: Undefined

        INVERSE:     Inverse transformation. Default (0).  Option  Description  0  Rotate from
        IN through {ANGLE1, ANGLE2,ANGLE3} to OUT.  1  Inverse transformation to
        above; OUT is in rotated system; IN is in unrotated system; ANGLE1-3 are
        same angles as for 0.
        required: No; default: 0; range: 0,1

        PRINT:     Print flag. Default (0). 0 - minimum output. 1 - details of each subcell
        in output model.
        required: No; default: 0; range: 0,1

        ANGLE1:     First rotation angle clockwise in degrees, around axis ROTAXIS1. It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation. (0)
        required: No; default: 0; range: -360, 360

        ANGLE2:     Second rotation angle clockwise in degrees, around axis ROTAXIS2. It must
        lie between 360.0 and +360.0. A value of zero indicates no rotation. (0)
        required: No; default: 0; range: -360, 360

        ANGLE3:     Third rotation angle clockwise in degrees, around axis ROTAXIS3. It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation. (0)
        required: No; default: 0; range: -360, 360

        ROTAXIS1:     Axis around which first rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis. (3)
        required: No; default: 3; range: 0,3

        ROTAXIS2:     Axis around which second rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis. (1)
        required: No; default: 1; range: 0,3

        ROTAXIS3:     Axis around which third rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis. (3)
        required: No; default: 3; range: 0,3

        X0:     X co-ordinate of known point in both systems, in unrotated co-ordinate
        system (0).
        required: No; default: 0; range: Undefined

        Y0:     Y co-ordinate of known point in both systems, in unrotated co-ordinate
        system (0).
        required: No; default: 0; range: Undefined

        Z0:     Z co-ordinate of known point in both systems, in unrotated co-ordinate
        system (0).
        required: No; default: 0; range: Undefined

        XR0:     X co-ordinate of known point in both systems, in rotated co-ordinate
        system (0).
        required: No; default: 0; range: Undefined

        YR0:     Y co-ordinate of known point in both systems, in rotated co-ordinate
        system (0).
        required: No; default: 0; range: Undefined

        ZR0:     Z co-ordinate of known point in both systems, in rotated co-ordinate
        system (0).
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.mdtran).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MDTRAN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def mgsort(self,
                in_i,
                out_o,
                key1_to_10_f,
                order_p=1,
                keysfrst_p=1,
                roworder_p=1,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be sorted.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Sorted file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for sorting on.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ORDER:     Option  Description  1  For ascending order  2  For descending order (1).
        required: No; default: 1; range: 1,2

        KEYSFRST:     Option  Description  0  output fields in the same order as the input table
        1  output key fields first
        required: No; default: 1; range: 0,1

        ROWORDER:     Option  Description  0  Rows which contain duplicate key field values
        could be in any order (faster)  1  Rows which contain duplicate key field
        values will be in the input file order (slower) (1)
        required: No; default: 1; range: 0,1

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.mgsort).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MGSORT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def mikest(self,
                proto_i,
                samples_i,
                spar_i,
                epar_i,
                fields_i,
                vmodel_i,
                outmodel_o='optional',
                avgrades_o='optional',
                indicate_o='optional',
                sampout_o='optional',
                xpt_f='optional',
                ypt_f='optional',
                zpt_f='optional',
                zone1_f_f='optional',
                zone2_f_f='optional',
                key_f='optional',
                order_p=3,
                grmethod_p=3,
                pgfields_p=0,
                da_axis1_or_2_or_3_p='3/01/2003'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input model prototype  This is a standard block model file containing the
        13 compulsory fields. It may also contain the rotated model fields. If it
        includes cells then it must be sorted on IJK.
        required: Yes; default: ; range: 

        SAMPLES:     Input sample data  This must contain X,Y and Z fields and at least one
        grade field.
        required: Yes; default: ; range: 

        SPAR:     Search volume parameter file  The file contains 13 required fields as
        described below. For optional fields refer to the COKRIG online Help .
        Required Fields:  SREFNUM: Search volume reference number.  SMETHOD:
        Search volume shape.  1 = 3D rectangle  2 = ellipsoid.  SDIST1: Max search
        distance in direction 1.  SDIST2: Max search distance in direction 2.
        SDIST3: Max search distance in direction 3.  SANGLE1: First rotation angle
        for search vol.  SANGLE2: Second rotation angle.  SANGLE3: Third rotation
        angle.  SAXIS1: Axis for 1st rotation (1=X,2=Y,3=Z).  SAXIS2: Axis for 2nd
        rotation (1=X,2=Y,3=Z).  SAXIS3: Axis for 3rd rotation (1=X,2=Y,3=Z).
        MINNUM1: Min number of samples, 1st search vol.  MAXNUM1: Max number of
        samples, 1st search vol.
        required: Yes; default: ; range: 

        EPAR:     Estimation parameter file.  Each record in the file describes an
        estimation method and its associated numeric parameters. There are 9
        required fields as described below. EREFNUM: Estimation reference number
        CUTOFF: Cutoff grade for indicator calculation.  IMETHOD: Estimation
        method. This must be set to 3 for each record  3 = Ordinary kriging (OK).
        SREFNUM: Search volume reference number  VSETNUM: Variogram model set
        number. This must be different for each cutoff.  DISCX: Number of
        discetisation points in X  DISCY: Number of discetisation points in Y
        DISCZ: Number of discetisation points in Z  PARENT: =0 for estimating into
        subcells. =1 for estimating parent cell  Optional Fields  only used if
        @GRMETHOD=4  BINGRADE: This field contains the average grade in the bin
        below the cutoff.  ABVGRADE: This field contains the average grade in the
        bin above cutoff and is only used for the top bin.  For other optional
        fields refer to the EPAR section of the online help for COKRIG .
        required: Yes; default: ; range: 

        FIELDS:     Estimation Fields file. This file is used to define field names associated
        with each EREFNUM defined in the EPAR file. There are two required fields
        as described below:  EREFNUM: Estimation reference number. The EREFNUM
        values must match the EREFNUMs in the EPAR file.  IN_VAR: The input grade
        field for which indicators are estimated. The value of this field must be
        the same in all records.  Optional Fields  EST: The name of the output MIK
        estimate field. This is only required for record 1 of the FIELDS file. If
        the EST field is not specified the value will be set to the value of the
        IN_VAR field.  Other optional fields such as NUMSAMP can be defined in the
        FIELDS file. These fields will then be recorded in the OUTMODEL file. For
        information on these additional fields refer to the FIELDS section of the
        COKRIG online help .
        required: Yes; default: ; range: 

        VMODEL:     Variogram model parameter file. Each record in this file defines a
        variogram model type and its parameters. There are 13 required fields as
        described below. VSETNUM: Model variogram set number.  VANGLE1: Variogram
        anisotropy angle 1.  VANGLE2: Variogram anisotropy angle 2.  VANGLE3:
        Variogram anisotropy angle 3.  VAXIS1: Model variogram rotation axis 1.
        VAXIS2: Model variogram rotation axis 2.  VAXIS3: Model variogram rotation
        axis 3.  NUGGET: Nugget variance.  ST1: Variogram model type for structure
        1.  1 = Spherical.  2 = Not used.  3 = Exponential.  4 = Gaussian.
        ST1PAR1: 1st parameter of structure 1 [Range 1 for spherical model].
        ST1PAR2: 2nd parameter of structure 1 [Range 2 for spherical model].
        ST1PAR3: 3rd parameter of structure 1 [Range 3 for spherical model].
        ST1PAR4: 4th parameter of structure 1 [C variance for spherical model].
        Optional fields:  STn: Variogram model type for structure n. STnPARp: pth
        parameter for structure n, where n<=9.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUTMODEL:     Output model containing estimated MIK grades, etc.
        required: No; default: ; range: 

        AVGRADES:     Output file containing cutoff grade ranges and average grade used for each
        range. It will include zone field(s), if any, plus the following fields:
        BIN: bin or grade range number  LO_CUT: lower cutoff grade. UP_CUT: upper
        cutoff grade.  NSAMPLES: number of samples in SAMPLES file lying within
        the bin. BINGRADE: bin grade used for indicator kriging. This is dependent
        on the GRMETHOD parameter. SAMPMEAN: mean grade of samples in SAMPLES file
        lying within the bin.
        required: No; default: ; range: 

        INDICATE:     Output indicator file. This is a copy of the sample input SAMPLES file,
        but also includes the 0/1 indicator values for each cutoff
        required: No; default: ; range: 

        SAMPOUT:     Output sample file containing details of weights for each sample for each
        cell estimated.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        XPT:     X coordinate of sample data in SAMPLES file. If not specified, then XPT is
        assumed.
        required: No; default: ; range: 

        YPT:     Y coordinate of sample data in SAMPLES file. If not specified, then YPT is
        assumed.
        required: No; default: ; range: 

        ZPT:     Z coordinate of sample data in SAMPLES file. If not specified, then ZPT is
        assumed.
        required: No; default: ; range: 

        ZONE1_F:     First field for zonal control. If a field is specified it must be present
        in both the SAMPLES and PROTO files.
        required: No; default: ; range: 

        ZONE2_F:     Second field for zonal control. If a field is specified it must be present
        in both the SAMPLES and PROTO files.
        required: No; default: ; range: 

        KEY:     Key field used to specify the field limiting the number of samples for
        estimation using the optional OPTKEY and MAXKEY parameters in the SPAR
        file. The field must exist in the SAMPLES file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ORDER:     Order relation correction method:  Downwards.  Upwards.  Average of
        methods 1 and 2.
        required: No; default: 3; range: 1,3

        GRMETHOD:     Method for specifying average grade within each cutoff range:  Average of
        minimum and maximum cutoff values.  Average calculated from samples in
        SAMPLES file. Mean grade for top bin.  Average calculated from samples in
        SAMPLES file. Median grade for top bin.  Specify values using BINGRADE and
        ABVGRADE fields in EPAR file.
        required: No; default: 3; range: 1,4

        PGFIELDS:     Flag to select whether the proportion above cutoff fields (PRABn) and the
        grade above cutoff fields (GRABn) should be included in the OUTMODEL file:
        Do not include the PRABn and GRABn fields.  Include the PRABn and GRABn
        fields.
        required: No; default: 0; range: 0,1

        DA_AXIS1/2/3:     DA_AXIS1/2/3 Axis of first / second / third rotation angle used for both
        search volume and variogram model dynamic anisotropy. 1=X, 2=Y, 3=Z
        required: No; default: 3/01/2003; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.mikest).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MIKEST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def mikscell(self,
                    modelin_i,
                    modelout_i,
                    grade_f,
                    axis_p,
                    f1tof10_f='optional',
                    minvol_p=0,
                    tolernce_p=0.0001
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODELIN:     Convert Multiple Indicator Kriging (MIK) output created by ESTIMA or
        INDEST to individual subcells for each grade range.
        required: Yes; default: ; range: 

        MODELOUT:     Output model file containing individual subcell for each grade range.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        Grade:     Grade field in input model containing the MIK grade - that is the grade
        above a cutoff of zero.
        required: Yes; default: ; range: 

        F1 to F10:     Grade fields in input model. Will be copied to the output model.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        Axis:     Axis along which the dimension of the subcell will be proportioned. Along
        the other two axes the dimensions of the subcell will be the size of the
        parent cell (3):  =1 : subcell will have variable length along the X axis.
        Along axes Y and Z it will be the size of the parent cell.  =2 : subcell
        will have variable length along the Y axis. Along axes X and Z it will be
        the size of the parent cell.  =3 : subcell will have variable length along
        the Z axis. Along axes X and Y it will be the size of the parent cell.
        required: Yes; default: 3; range: 1,3

        MINVOL:     The minimum volume of a subcell. If the subcell is less than the minimum
        it will be combined with the subcell with the next lowest grade. If the
        lowest grade subcell is less than MINVOL it will be combined with the
        subcell in thegrade range above
        required: No; default: 0; range: 

        TOLERNCE:     This defines the smallest subcell that will be included in MODELOUT as a
        proportion of the parent cell size. The default of 0.0001 means that the
        subcell size along each axis cannot be less than 0.01% of the parent cell
        size.
        required: No; default: 0.0001; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.mikscell).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MIKSCELL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def minewd(self,
                in_i,
                out_o,
                minwid_p,
                widdir_p,
                oreval_f='optional',
                oremin_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file containing the ore blocks of the main reef. This must be
        a regular model with no sub-cells.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output additional arcs file for input to LGST.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        OREVAL:     A field in the model file which contains a value which is to be compared
        with OREMIN.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINWID:     Minimum mining width.
        required: Yes; default: ; range: Undefined

        WIDDIR:     Bearing in degrees clockwise from the postive Y-direction (North) along
        which the minimum mining width extension is to be made. e.g. If the main
        reef lies North-West to South-East and dips down towards the North-East,
        this might be 45 degrees.
        required: Yes; default: North; range: Undefined

        OREMIN:     Minimum value of field OREVAL for a cell to be treated as ore.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.minewd).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MINEWD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def minlay(self,
                plot_o,
                proto_i='optional',
                section_i='optional',
                icon_i='optional',
                sectid_p='optional',
                nopos_p=0,
                asize_p=0,
                scale_p='optional',
                xorig_p='optional',
                yorig_p='optional',
                append_p=1,
                unit_p=0,
                coortyp_p=0,
                loyorig_p=0,
                loxorig_p=0,
                lozorig_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype. If an input plot prototype is supplied, then in addition
        to the normal DATAMINE plot file fields it must also contain the implicit
        fields XCENTRE, YCENTRE, ZCENTRE, SAZI and SDIP. The default values of
        these fields, together with the default values of XMIN, XMAX, YMIN and
        YMAX fields completely define the position, orientation and size of the
        viewing plane that will be used in the current run of MINLAY.
        required: No; default: ; range: 

        SECTION:     Section definition file. This file will contain the positions,
        orientations and sizes of a number of sections. It must contain the
        explicit fields SVALUE, XCENTRE, YCENTRE, ZCENTRE, SDIP, SAZI, HSIZE and
        VSIZE. It may also optionally contain the field STHICK.
        required: No; default: ; range: 

        ICON:     Icon file. An icon is a small number of plot file records that describe
        some feature that is commonly required on mine plans, e.g. mine shafts.
        This input/output icon file may contain a number of user-defined icons. In
        addition to the normal DATAMINE plot file fields, the icon file will
        contain the explicit fields IVALUE, ITEXT, IXSIZE and IYSIZE.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file. This file will contain all of the plot data that has
        been generated during the current operation of MINLAY. In addition to the
        normal DATAMINE plot file fields, it will also contain the implicit fields
        XCENTRE, YCENTRE, ZCENTRE, SAZI and SDIP, the default values of which will
        define the section orientation and size of plot generated in MINLAY.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SECTID:     If no input plot prototype file has been supplied, the section orientation
        used in the current run of MINLAY may be defined by specifying a section
        identifier, which corresponds to the supplied section definition file.
        required: No; default: ; range: Undefined

        NOPOS:     The user may want to generate or edit a plot that has no positional
        meaning, e.g. a flowsheet diagram. If this is is the case, this parameter
        must be set to 1 and the plot will be treated as a plan view with plotted
        millimetres matching X and Y coordinate data. (0)
        required: No; default: 0; range: 0,1

        ASIZE:     Type of A size paper, for initial plot size if no prototype file supplied.
        (0)
        required: No; default: 0; range: Undefined

        SCALE:     Initial plot scale factor if no prototype file supplied. E.g. enter 1000
        for a scale of 1:1000. Note that user data units of metres are assumed; if
        metres are not the unit, then the scale must be multiplied by factor f,
        where f=no. of metres in 1 user data unit [e.g. 0.3048 for feet].
        required: No; default: ; range: Undefined

        XORIG:     If no input plot prototype file has been supplied, and this XORIG
        parameter is left unset, then the defined data area will be centred in the
        plot area in the X axis direction. If an XORIG distance is supplied, this
        will be used for the X positioning of the data area.
        required: No; default: ; range: Undefined

        YORIG:     If no input plot prototype file has been supplied, and this YORIG
        parameter is left unset, then the defined data area will be centred in the
        plot area in the Y axis direction. If a YORIG distance is supplied, this
        will be used for the Y positioning of the data area.
        required: No; default: ; range: Undefined

        APPEND:     If an input plot prototype file has been supplied, any plot records in
        this file may automatically copied to the final output plot file, by
        setting this parameter to 1, or may be omitted by setting to 0. (1)
        required: No; default: 1; range: Undefined

        UNIT:     This parameter indicates the type of data that will be brought into the
        process. The default is metric (0) and a unit value of 1 indicates user
        units of imperial feet.
        required: No; default: 0; range: 0,1

        COORTYP:     Parameter to be set to 1 for the use of the LO coordinate system,
        otherwise the conventional rhs is used (0).
        required: No; default: 0; range: 0,1

        LOYORIG:     Local Y origin to be used for internal coordinate conversion (0).
        required: No; default: 0; range: Undefined

        LOXORIG:     Local X origin to be used for internal coordinate conversion (0).
        required: No; default: 0; range: Undefined

        LOZORIG:     Local Z origin to be used for internal coordinate conversion (0).
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.minlay).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MINLAY ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def minper(self,
                perimin_i,
                shedres_i,
                stringin_i,
                perimout_o,
                perim_f,
                mine_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file, which must contain the fields XP, YP, ZP, PTN and
        PVALUE.
        required: Yes; default: ; range: 

        SHEDRES:     Input schedule data file, which must contain at least the fields TONNES,
        TOTALTON and another field whose entries correspond with the PVALUE
        entries in the PERIMIN file. If this file has been produced using the
        PRODSH process, it will contain the fields PNAME, PNUM, SNUM, TONNES,
        TOTALTON PRATE and a number of grade fields.
        required: Yes; default: ; range: 

        STRINGIN:     Input mining string file, which defines the direction of mining. It may
        contain just one string, that will be applied to all the perimeters.
        Alternatively, it may contain a number of strings, which define different
        mining directions for each of the input perimeters. In the latter case,
        there must be match between the PVALUE entries in the PERIMIN and STRINGIN
        files.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output perimeter file, which will contain the perimeters which have been
        modified according to the input schedule data.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        PERIM:     Field name in the input SHEDRES file that corresponds with the PVALUE
        entries in the input PERIMIN file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINE:     Flag indicating whether the output perimeter file should contain unmined
        perimeters, 0, or the mined perimters, (1).
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.minper).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MINPER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def minwid(self,
                in_i,
                out_o,
                interval_o,
                value_f,
                density_f,
                cutoff_p,
                minore_p,
                minwaste_p,
                dilute_p,
                dilp_p,
                diln_p,
                dilint_p,
                narwast1_p,
                narwast2_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample file, in BHID and FROM order.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file of composites in standard
        required: Yes; default: ; range: 

        INTERVAL:     Output file of composite interval and dilution types.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Value which is to control compositing. This may be a grade or a calculated
        equivalent value from grades of different metals.
        required: Yes; default: ; range: 

        DENSITY:     Density field.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTOFF:     Minimum value of VALUE which is worth mining (0).
        required: Yes; default: 0; range: Undefined

        MINORE:     Minimum mining width for ore.
        required: Yes; default: ; range: Undefined

        MINWASTE:     Minimum width for internal waste (0).
        required: Yes; default: 0; range: Undefined

        DILUTE:     Allow dilution of composites to create minimum ore width if non-zero (1).
        required: Yes; default: 1; range: 0,1

        DILP:     Dilution interval added to the ore composite in the down hole direction
        (0).
        required: Yes; default: 0; range: 0,+

        DILN:     Dilution interval added to the ore composite in the up hole direction (0).
        required: Yes; default: 0; range: 0,+

        DILINT:     Dilution splitting interval to be used when diluting narrow ore with
        adjacent waste (0).
        required: Yes; default: 0; range: 0,+

        NARWAST1:     Test for carrying narrow waste to be applied to either [1] or both [2]
        adjacent wide ores (1).
        required: Yes; default: 1; range: 1,2

        NARWAST2:     Allow narrow waste to be expanded into adjacent wide ore to meet the
        minimum waste width if non-zero (0).
        required: Yes; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.minwid).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MINWID ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def minzon(self,
                in_i,
                zonedef_i,
                rules_i,
                scratch_i,
                out_o,
                minadv_p,
                thresh_i='optional',
                reserves_o='optional',
                sliceno_f='SLICENO',
                slicewid_f='SLICEWID',
                priorty1_f='optional',
                priorty2_f='optional',
                priorty3_f='optional',
                priorty4_f='optional',
                priorty5_f='optional',
                print1_f='optional',
                print2_f='optional',
                print3_f='optional',
                print4_f='optional',
                print5_f='optional',
                zxorig_p='optional',
                zyorig_p='optional',
                zzorig_p='optional',
                minwid_p=0,
                maxwid_p=0,
                minbht_p='optional',
                directn_p=1,
                incrment_p=1,
                exzone_p='optional',
                onlyrule_p=0,
                truevol_p=0,
                density_p=1,
                slicefld_p=1,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model. Must contain at least the fields XC, YC, ZC, XINC, YINC,
        ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK. May contain cells and sub-
        cells.
        required: Yes; default: ; range: 

        ZONEDEF:     Zone definition file. Must contain the fields SEQNO, ZONE, FIELD, TEST1,
        VALUE1, TEST2, and VALUE2. May also contain SUBZONE field. Must be sorted
        by SEQNO, SUBZONE.
        required: Yes; default: ; range: 

        RULES:     Rules file. Must contain the fields TARGET and ADJACENT.
        required: Yes; default: ; range: 

        SCRATCH:     Working file.
        required: Yes; default: ; range: 

        THRESH:     Threshold file. Must contain the fields ZONE, GRADE and THRESH.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model. Will contain all fields of IN input model plus ZONE, and
        optionally SLICENO and SLICEWID.
        required: Yes; default: ; range: 

        RESERVES:     Output reserves file. Will contain the fields BENCH, ZONE and TONNES.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SLICENO:     Field name to hold slice number if SLICEFLD=1. Default is SLICENO.
        required: No; default: SLICENO; range: 

        SLICEWID:     Field name to hold slice width if SLICEFLD=1. Default is SLICEWID.
        required: No; default: SLICEWID; range: 

        PRIORTY1:     First field in model to be used in slice combination. Printed if PRINT=2.
        required: No; default: ; range: 

        PRIORTY2:     Second field in model to be used in slice combination. Printed if PRINT=2.
        required: No; default: ; range: 

        PRIORTY3:     Third field in model to be used in slice combination. Printed if PRINT=2.
        required: No; default: ; range: 

        PRIORTY4:     Fourth field in model to be used in slice combination. Printed if PRINT=2.
        required: No; default: ; range: 

        PRIORTY5:     Fifth field in model to be used in slice combination. Printed if PRINT=2.
        required: No; default: ; range: 

        PRINT1:     First field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto
        maximum of 5 fields.
        required: No; default: ; range: 

        PRINT2:     Second field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto
        maximum of 5 fields.
        required: No; default: ; range: 

        PRINT3:     Third field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto
        maximum of 5 fields.
        required: No; default: ; range: 

        PRINT4:     Fourth field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto
        maximum of 5 fields.
        required: No; default: ; range: 

        PRINT5:     Fifth field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto
        maximum of 5 fields.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINADV:     Mining advance distance.
        required: Yes; default: ; range: Undefined

        ZXORIG:     X co-ordinate of origin for zone modelling. Default is the input model X
        origin.
        required: No; default: ; range: Undefined

        ZYORIG:     Y co-ordinate of origin for zone modelling. Default is the input model Y
        origin.
        required: No; default: ; range: Undefined

        ZZORIG:     Z co-ordinate of origin for zone modelling. Default is the input model Z
        origin.
        required: No; default: ; range: Undefined

        MINWID:     Minimum mining width, measured perpendicular to the mining advance.
        Default (0) ensures no minimum mining width is applied.
        required: No; default: 0; range: Undefined

        MAXWID:     Maximum mining width, measured perpendicular to the mining advance.
        Default (0) ensures no maximum mining width is applied.
        required: No; default: 0; range: Undefined

        MINBHT:     Mining bench height. Default is the input model parent cell Z dimension.
        required: No; default: ; range: Undefined

        DIRECTN:     Direction of mining advance. Default (1).  Option  Description  1
        Positive X (West to East)  2  Negative X (East to West)  3  Positive Y
        (South to North)  4  Negative Y (North to South)
        required: No; default: 1; range: 1,4

        INCRMENT:     Increment distance for shrinking. Default (1).
        required: No; default: 1; range: Undefined

        EXZONE:     A value of the ZONE field - 4 character alpha - which will be excluded
        from the output model. Cells or sub-cells with this ZONE value will not be
        written to the OUT file. Must be enclosed in quotes e.g. EXZONE='HG'.
        Default is to write all ZONE values.
        required: No; default: ; range: Undefined

        ONLYRULE:     Flag to always combine narrow slices. Default (0).  Option  Description  0
        Slices less than MINWID will always be combined with an adjacent slice.  1
        Slices less than MINWID will be combined with an adjacent slice if one
        satisfies criteria in RULES file or PRIORTY1-5 fields, only.
        required: No; default: 0; range: 0,1

        TRUEVOL:     Volume flag in output model. Default (0).  Option  Description  0  All
        slices will have the full volume of MINADV (advance distance) x MINBHT
        (bench height).  1  Slices containing missing cells or subcells will have
        their Z dimension reduced so that they have the true volume.
        required: No; default: 0; range: Undefined

        DENSITY:     Density value to be used in calculations. If a DENSITY field exists in the
        input model the DENSITY parameter will be ignored. Default (1).
        required: No; default: 1; range: Undefined

        SLICEFLD:     Write slice width and number to OUT file. Default (1). 0 - Slice width and
        number are not written to OUT file. 1 - OUT file will contain fields
        holding slice width and number. Field names are defined by SLICENO and
        SLICEWID.
        required: No; default: 1; range: Undefined

        PRINT:     Print flag. Default (0). 0 - minimum output. 1 - summary of tonnes per
        zone per bench. 2 - details of combination of slices including values of
        first five fields specified as PRIORTY1..5 , PRINT1..5.
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.minzon).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MINZON ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def mod2blks(self,
                    model_i,
                    blocks_o,
                    results_o,
                    depend_o,
                    dependst_o,
                    setabsnt_p,
                    q1nx_or_y_or_z_p,
                    q2nx_or_y_or_z_p,
                    q3nx_or_y_or_z_p,
                    q4nx_or_y_or_z_p,
                    wiretr_o='optional',
                    wirept_o='optional',
                    density_f='optional',
                    phase_f='optional',
                    density_p='optional'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODEL:     The block model from which to create the mining block outlines and
        reserves. This must be a regular block model. You should also be aware of
        how many cells it contains  each model cell will produce mining block
        outline for use in the scheduler. If you have a geological resource model
        it is probable that you should use the REBLOCK process to regularise the
        model and increase its parent cell size.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        BLOCKS:     The output mining block perimeter strings. These are created at the top of
        each model cell. This will contain a BLOCKID value that is equal to the
        IJK value of the model cell from which it was created. It also contains
        the fields DPLUS, DMINUS and PFLOW which are used by the scheduler in
        Studio OP.
        required: Yes; default: ; range: 

        RESULTS:     The output results file. This contains the values from each cell and the
        VOLUME and TONNES of each cell.
        required: Yes; default: ; range: 

        DEPEND:     Output dependency file for use in Studio OP scheduling. This will contain
        the fields BLOCKID1, BLOCKID2, PERCENT and TYPE.
        required: Yes; default: ; range: 

        DEPENDST:     This is a string file that represents the dependencies that MOD2BLKS has
        created. It can be used for visualisation of the dependencies.
        required: Yes; default: ; range: 

        WIRETR:     Output mining blocks wireframe triangle file. Used for visualisation -
        contains DEPANIM field representing dependencies.
        required: No; default: ; range: 

        WIREPT:     Output mining blocks wireframe point file. Used for visualisation.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        DENSITY:     The model field which contains density values. This is used to calculate
        mining block tonnages.
        required: No; default: ; range: 

        PHASE:     An optional model numeric PHASE field. If set this is transferred to the
        mining block reserves and strings. If not set the output PHASE number is
        1.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SETABSNT:     If set to 1 then absent model density values will be set to the default
        density value. The default value for SETABSNT is 1.
        required: Yes; default: 0; range: 0,1

        Q1NX/Y/Z:     First quadrant: number of cells in X/Y/Z for dependency creation
        required: Yes; default: 1 (X) 0 (Y) 1 (Z); range: -10, 10

        Q2NX/Y/Z:     Second quadrant: number of cells in X/Y/Z for dependency creation
        required: Yes; default: 0 (X) -1 (Y) 1 (Z); range: -10, 10

        Q3NX/Y/Z:     Third quadrant: number of cells in X/Y/Z for dependency creation
        required: Yes; default: -1 (X) 0 (Y) 1 (Z); range: -10, 10

        Q4NX/Y/Z:     Fourth quadrant: number of cells in X/Y/Z for dependency creation
        required: Yes; default: 0 (X) 1 (Y) 1 (Z); range: -10, 10

        DENSITY:     The default density to be used if the model file does not contain a
        density field or if the model density value is absent and SETABSNT=1.
        required: No; default: ; range: -

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.mod2blks).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MOD2BLKS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def mod2xyz(self,
                in1_i,
                in2_i,
                out_o,
                x_f,
                y_f,
                z_f,
                f1_to_10_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input model containing fields F1, F2, etc.
        required: Yes; default: ; range: 

        IN2:     Input file containing fields X, Y and Z
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Copy of IN2 file with extra fields F1, F2, etc from input model file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate field in IN2 file.
        required: Yes; default: ; range: 

        Y:     Y coordinate field in IN2 file.
        required: Yes; default: ; range: 

        Z:     Z coordinate field in IN2 file.
        required: Yes; default: ; range: 

        F1_to_10:     1st field in IN1 model to be copied to the OUT file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.mod2xyz).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MOD2XYZ ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def modconf(self,
                simmod_i,
                conf_tbl_o,
                conf_plt_o='optional',
                cutint_p=1,
                cutmax_p=10,
                pcint_p=5,
                density_p=1,
                factor_p=1,
                plot_tbl_p=0,
                display_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SIMMOD:     The simulated model created using the CSMODEL process.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        CONF_TBL:     Output table template for 2 model confidence tables. File names are
        created automatically from the template.
        required: Yes; default: ; range: 

        CONF_PLT:     Output plot template for displaying confidence values. File names are
        created automatically from the template.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTINT:     Defines the cutoff interval between successive cutoff grades.
        required: No; default: 1; range: 0.00001,9999999

        CUTMAX:     For regular cutoff grades, this field defines the maximum cutoff grade for
        percentile tables and graphs. All simulations and the Etype estimator must
        have at least one value above the maximum cutoff value. If the selected
        maximum cutoff does not meet these criteria, then it will be automatically
        reduced.
        required: No; default: 10; range: 0.00002,9999999

        PCINT:     Defines the interval between successive percentiles in the output
        confidence table 2.
        required: No; default: 5; range: 2.5,25

        DENSITY:     The density parameter that is used for tonnage calculations.
        required: No; default: 1; range: Undefined

        FACTOR:     Dividing factor applied to Tonnes and Metal values before plotting - used
        to reduce the amount of annotation.
        required: No; default: 1; range: Undefined

        PLOT_TBL:     Flag to specify whether a plot data table is output for every plot file
        created. The plot data table contains the data used to create the CONF_PLT
        plot files, and could be used to recreate the plot in other software such
        as Excel. The plot data table name is the same as the plot file, except
        that "_P" is replaced by "_T".
        required: No; default: 0; range: 0,1

        DISPLAY:     Flag to display whether the plot files are displayed as the process is
        run.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.modconf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MODCONF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def modenv(self,
                in_i,
                grade_f,
                cutoff_p,
                hdgrade_p,
                maxwaste_p,
                maxore_p,
                pdwvalue_p,
                pdwgrade_p,
                optimise_p,
                dilute_p,
                envtype_p,
                envnum_p,
                inmodel_p,
                shapemth_p,
                mmuincx_p,
                mmuincy_p,
                mmuincz_p,
                mmusizex_p,
                mmusizey_p,
                mmusizez_p,
                pdwsizex_p,
                pdwsizey_p,
                pdwsizez_p,
                shape_i='optional',
                exclude_i='optional',
                out_o='optional',
                envmodel_o='optional',
                results_o='optional',
                value_f='optional',
                shapzone_f='optional',
                envbest_f='ENVBEST',
                envelope_f='ENVELOPE',
                envnum_f='ENVNUM',
                hdgrade_f='optional',
                mined_f='MINED',
                density_f='DENSITY',
                defgrade_p=0,
                defvalue_p=0,
                density_p=1,
                pdwaste_p=0,
                optwaste_p=0,
                pdwonly_p=0,
                mmuslopn_p=0,
                mmuslops_p=0,
                mmuslope_p=0,
                mmuslopw_p=0,
                mmuslopi_p=0,
                mmuminx_p='optional',
                mmuminy_p='optional',
                mmuminz_p='optional',
                mmumaxx_p='optional',
                mmumaxy_p='optional',
                mmumaxz_p='optional',
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                envout_p=1,
                xoverlap_p=2,
                calcenv_p=1,
                progress_p=5000,
                info_p=2
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file for evaluation. This must have the fields XMORIG, YMORIG,
        ZMORIG, NX, NY, NZ (implicit) and IJK, XC, YC and ZC (explicit). XINC,
        YINC and ZINC must exist as either explicit (sub-cells permitted) or
        implicit (no sub-cells). There must also be at least one explicit numeric
        data field, to be specified as *VALUE or *GRADE. The records may be in any
        order, but speed is increased if they are in IJK order. If it is a Rotated
        Model then it must also include the fields X0, Y0, Z0, ANGLE1, ANGLE2,
        ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3.
        required: Yes; default: ; range: 

        SHAPE:     Input envelope shape template file to define one or more envelope shapes,
        or the orientation of the default envelope shape. Must contain fields XC,
        YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK and
        optionally *ZONE. If the envelope orientation is not parallel to the input
        model then this model file must be a Rotated Model that include the fields
        X0, Y0, Z0, ANGLE1, ANGLE2, ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3.
        required: No; default: ; range: 

        EXCLUDE:     Optional input file to supply those values of one field in the input model
        that define an area for exclusion from the envelope. A maximum of 50
        values is allowed. The field name in this file should be the same as a
        field in the input model file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model file with the additional field *MINED. May be the same as &IN
        if no new fields are created.
        required: No; default: ; range: 

        ENVMODEL:     Output model with the envelope grade distribution, where the envelope
        mimimum mining unit increment defines the cell size. The file is a
        standard model file with the fields *VALUE, *GRADE, *ENVBEST, *DENSITY,
        *ENVELOPE and *SHAPZONE if specified. The value in the *ENVBEST field
        depends on the value of @OPTIMISE: - if @OPTIMISE=1 (maximise ore tonnes)
        then the value in the field is ore tonnes. - if @OPTIMISE=2 (maximise
        grade) then the value in the field is grade. - if @OPTIMISE=3 (maximise
        metal) then the value in the field is metal content. - if @OPTIMISE=4
        (maximise dollars) then the value in the field is dollars.
        required: No; default: ; range: 

        RESULTS:     Output results file to report statistics for each envelope, with fields
        *ENVNUM, *ENVELOPE, *SHAPZONE (if specified), *VALUE, *GRADE, VOLUME,
        TONNES, MINX, MAXX, MINY, MAXY, MINZ, MAXZ, COGX, COGY, COGZ. *ENVELOPE
        and *SHAPZONE fields are reported individually and in total.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     Numeric (explicit) field for the grade of input model blocks.
        required: Yes; default: ; range: 

        VALUE:     Numeric (explicit) field for the value of input model blocks.
        required: No; default: ; range: 

        SHAPZONE:     Field in the input model and envelope shape template file when different
        envelope shapes are allowed in different mining areas.
        required: No; default: ; range: 

        ENVBEST:     Numeric (explicit) field for the best envelope grade or value in the
        &ENVMODEL file.
        required: No; default: ENVBEST; range: 

        ENVELOPE:     Alphanumeric (explicit) field for the cell type in the &ENVMODEL file. The
        default name ENVELOPE is used if none is supplied.
        required: No; default: ENVELOPE; range: 

        ENVNUM:     Numeric (explicit) field for the envelope number in the &ENVMODEL and
        &RESULTS files. The default name ENVNUM is used if none is supplied.
        required: No; default: ENVNUM; range: 

        HDGRADE:     Optional field for the head grade of envelopes in which the block
        participates. The envelope head grade must be greater than the head grade
        value supplied from any participating block. Absent values are ignored.
        required: No; default: ; range: 

        MINED:     Proportion of block within the envelope
        required: No; default: MINED; range: 

        DENSITY:     Optional density field in the input model for average grade and tonnage
        calculations.
        required: No; default: DENSITY; range: 

        ----------
        PARAMETERS
        ----------

        CUTOFF:     Cutoff grade to be applied to input model blocks.
        required: Yes; default: 0; range: Undefined

        HDGRADE:     Required head grade for economic envelopes.
        required: Yes; default: 0; range: Undefined

        MAXWASTE:     Maximum waste material in an envelope, expressed as a volume fraction, for
        an envelope evaluation to be accepted as an alternative in the optimal
        selection. The default (1.0) allows any proportion of waste provided the
        head grade target is met. The value cannot be lower than the @PDWASTE
        value.
        required: Yes; default: 1; range: 0,1

        MAXORE:     Maximum ore material in a pre-defined waste shape, expressed as a volume
        fraction.
        required: Yes; default: 0; range: 0,1

        PDWVALUE:     Maximum value for a pre-defined waste shape.
        required: Yes; default: 0; range: Undefined

        PDWGRADE:     Maximum grade for a pre-defined waste shape.
        required: Yes; default: 0; range: Undefined

        OPTIMISE:     Method for selecting optimal envelope position where alternate positions
        are available to be considered: 1 - Maximize ore tonnes ie minimize [below
        cutoff] waste. 2 - Maximize grade 3 - Maximize contained metal 4 -
        Maximize accumulated value ie for dollar value.
        required: Yes; default: 2; range: 1,4

        DILUTE:     Include waste with ore in envelope grade calculations, and *ENVBEST
        output: 0 - Ore only 1 - Ore and waste
        required: Yes; default: 1; range: 0,1

        ENVTYPE:     Report the minimum or maximum envelope in the results file for sequencing.
        Both minimum and maximum envelopes are generated in the optimiser. 0 -
        maximum envelope 1 - minimum envelope
        required: Yes; default: 1; range: 0,1

        ENVNUM:     Apply a unique numbering scheme to the envelopes. Having unique numbers
        can slow down processing by [very] approximately 20%. 0 - apply the same
        number to all envelopes 1 - Make envelope numbers unique
        required: Yes; default: 1; range: 0,1

        INMODEL:     Constrain envelopes to the volume of the input model occupied by blocks: 0
        - unconstrained 1 - envelope volume to be completely occupied by blocks in
        the input model.
        required: Yes; default: 0; range: 0,1

        SHAPEMTH:     Method for selection from alternative envelope shapes when zones are
        specified: 0 - envelope shape matching block zone 1 - envelope shape with
        minimum zone dilution 2 - envelope shape with best value irrespective of
        zone combination
        required: Yes; default: 0; range: 0,2

        MMUINCX:     Number of envelope increments within the minimum envelope dimension in X
        coordinate.
        required: Yes; default: 1; range: 1,+

        MMUINCY:     Number of envelope increments within the minimum envelope dimension in Y
        coordinate.
        required: Yes; default: 1; range: 1,+

        MMUINCZ:     Number of envelope increments within the minimum envelope dimension in Z
        coordinate.
        required: Yes; default: 1; range: 1,+

        MMUSIZEX:     Minimum envelope dimension in the horizontal X coordinate.
        required: Yes; default: 0; range: Undefined

        MMUSIZEY:     Minimum envelope dimension in the horizontal Y coordinate.
        required: Yes; default: 0; range: Undefined

        MMUSIZEZ:     Minimum envelope dimension in the vertical Z coordinate.
        required: Yes; default: 0; range: Undefined

        PDWSIZEX:     Minimum pre-defined waste shape dimension in the horizontal X coordinate.
        required: Yes; default: 0; range: Undefined

        PDWSIZEY:     Minimum pre-defined waste shape dimension in the horizontal Y coordinate.
        required: Yes; default: 0; range: Undefined

        PDWSIZEZ:     Minimum pre-defined waste shape dimension in the vertical Z coordinate.
        required: Yes; default: 0; range: Undefined

        DEFGRADE:     Default grade for envelope volume not modelled with blocks, or blocks with
        an absent grade or value.
        required: No; default: 0; range: Undefined

        DEFVALUE:     Default value for envelope volume not modelled with blocks, or blocks with
        an absent grade or value. This parameter is expressed as value per unit
        volume.
        required: No; default: 0; range: Undefined

        DENSITY:     Density value where a density field is not supplied, the value is absent,
        or the envelope volume is not modelled with blocks. If set to zero then
        absent blocks are assumed to be air.
        required: No; default: 1; range: Undefined

        PDWASTE:     Maximum pre-defined waste material in an envelope, expressed as a volume
        fraction, for an envelope evaluation to be accepted as an alternative in
        the optimal selection. The default value of 0 allows no pre-defined waste,
        and a value between 0 and 1 allows pre-defined waste to be taken as a last
        resort to extract otherwise economic ore.
        required: No; default: 0; range: 0,1

        OPTWASTE:     Post-process remnant waste "internal" to the envelope that is not flagged
        as pre-defined waste or already included in a mining envelope to evaluate
        if the waste can be in one, some, or all alternative envelopes. The
        proportion is specified as a fraction, and will only be processed for a
        non-zero value. Only those blocks that are outside the minimum envelope
        but included in the maximum envelope are considered. A value of zero would
        generate the maximum envelope.
        required: No; default: 0; range: 0,1

        PDWONLY:     Flag to specify whether the current run should create both predefined
        waste and mining envelopes, or only the pre-defined waste envelope: 0 -
        both pre-defined waste and mining envelopes 1 - pre-defined waste envelope
        only
        required: No; default: 0; range: 0,1

        MMUSLOPN:     Envelope slope factor 1:n in the northerly direction, positive outwards
        required: No; default: 0; range: Undefined

        MMUSLOPS:     Envelope slope factor 1:n in the southerly direction, positive outwards
        required: No; default: 0; range: Undefined

        MMUSLOPE:     Envelope slope factor 1:n in the easterly direction, positive outwards
        required: No; default: 0; range: Undefined

        MMUSLOPW:     Envelope slope factor 1:n in the westerly direction, positive outwards
        required: No; default: 0; range: Undefined

        MMUSLOPI:     Specifies if the slope factors are to be interpolated between orthogonal
        directions 0 - rectangular horizontal shape 1 - elliptical horizontal
        shape
        required: No; default: 0; range: Undefined

        MMUMINX:     Minimum X coordinate for envelope volume. This is not required if an
        envelope shape template file &SHAPE is defined.
        required: No; default: ; range: Undefined

        MMUMINY:     Minimum Y coordinate for envelope volume. This is not required if an
        envelope shape template file &SHAPE is defined.
        required: No; default: ; range: Undefined

        MMUMINZ:     Minimum Z coordinate for envelope volume. This is not required if an
        envelope shape template file &SHAPE is defined.
        required: No; default: ; range: Undefined

        MMUMAXX:     Maximum X coordinate for envelope volume. This is not required if an
        envelope shape template file &SHAPE is defined.
        required: No; default: ; range: Undefined

        MMUMAXY:     Maximum Y coordinate for envelope volume. This is not required if an
        envelope shape template file &SHAPE is defined.
        required: No; default: ; range: Undefined

        MMUMAXZ:     Maximum Z coordinate for envelope volume. This is not required if an
        envelope shape template file &SHAPE is defined.
        required: No; default: ; range: Undefined

        XSUBCELL:     Number of subcells per parent cell in X direction
        required: No; default: 1; range: 1,100

        YSUBCELL:     Number of subcells per parent cell in Y direction
        required: No; default: 1; range: 1,100

        ZSUBCELL:     Number of subcells per parent cell in Z direction
        required: No; default: 1; range: 1,100

        ENVOUT:     Flag to control which ENVELOPE types are included in the output envelope
        file &ENVMODEL:  Option  Description  0  Include all values of the field
        ENVELOPE  1  Include all values of the field ENVELOPE except UND  2
        Include all values of the field ENVELOPE except UND, MOD. EXC  3  Include
        all values of the field ENVELOPE except UND, MOD, EXC, PDW  4  Include all
        values of the field ENVELOPE except UND, MOD, EXC, PDW, MAX-UND, MAX-MOD,
        MAX-PDW
        required: No; default: 1; range: 0,4

        XOVERLAP:     Overlap in X between successive slices, defined as the number of MMUs in
        X. ie in length units the overlap is @XOVERLAP * @MMUSIZEX :  Option
        Description  1  - overlap of 1 MMU widths in X  2  - overlap of 2 MMU
        widths in X
        required: No; default: 2; range: 1,2

        CALCENV:     Flag to select either a test run to report slicing and memory statistics
        or a full run to calculate the mineable envelopes:  Option  Description  0
        - test run; do not calculate mineable envelopes  1  - full run; calculate
        mineable envelopes
        required: No; default: 1; range: 0,1

        PROGRESS:     Progress counter increment for progress messages displayed in the bottom
        right corner of the Studio window. Increasing the increment can reduce
        processing time.
        required: No; default: 5000; range: Undefined

        INFO:     Flag to control the level of information displayed to the Output Window
        during processing:  Option  Description  1  Minimum level of output  2
        Intermediate level of output  3  Maximum level of output
        required: No; default: 2; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.modenv).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MODENV ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def modres(self,
                in_i,
                results_o,
                density_p,
                perimin_i='optional',
                out_o='optional',
                zvalue_p=0,
                pairs_p=0,
                fullcell_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Model file for evaluation. Must contain at least the fields XC, YC, ZC,
        XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK.
        required: Yes; default: ; range: 

        PERIMIN:     Optional input perimeter file. Must contain at least the fields XP, YP,
        ZP, PTN, PVALUE. The PVALUE field contains the bench number as the integer
        part: e.g. 3.0 for first perim on bench 3, 3.1 for second etc. If the
        PAIRS option is set, then the ZP value must contain the bench bottom
        elevation in one perimeter, then the bench top in the next. All points for
        one perimeter must be together. Perimeters must be clockwise, unclosed.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     The output results file, in a format suitable for input into the TABRES
        process.
        required: Yes; default: ; range: 

        OUT:     Optional output model file. This may be the same as the input, if the
        MINED field exists in the input file. The MINED field will be created in
        the output file if it does not exist.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DENSITY:     Set required density value. This will only be used if there is no DENSITY
        field in the input model. If there is no DENSITY field, and no DENSITY
        parameter, then a value of 1.0 is used.
        required: Yes; default: 1; range: 0.000001,+

        ZVALUE:     Option  Description  1  ; for single perimeters at bench centres, take the
        Z value from the ZP field instead of using the level number in the PVALUE
        field.
        required: No; default: 0; range: 0,1

        PAIRS:     Option  Description  1  ; Use pairs of perimeters to define bench bottoms
        and tops, as defined by ZP field.
        required: No; default: 0; range: 0,1

        FULLCELL:     Option  Description  1  ; whole cell evaluation in place of partial cell
        evaluation.
        required: No; default: 0; range: 0,1

        PRINT:     Option  Description  1  ; Show a line for each cell evaluated in each
        perimeter.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.modres).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MODRES ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def modsplit(self,
                    modelin_i,
                    wiretr_i,
                    wirept_i,
                    modelout_i,
                    fullmod_i,
                    modltype_p,
                    zone_f='optional',
                    mined_f='optional',
                    density_f='DENSITY',
                    addf1toaddf9_f='optional',
                    avgf1toavgf9_f='optional',
                    zone_p=0,
                    maxdip_p=0,
                    splits_p=3,
                    plane_p='XY',
                    xsubcell_p=1,
                    ysubcell_p=1,
                    zsubcell_p=1,
                    resol_p=0,
                    density_p=1,
                    defgrade_p='optional'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODELIN:     Input model file.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file used to split the model cells.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        MODELOUT:     Output model file to be created that contains only cells constrained (and
        split) by the input wireframe. Which cells are written to this model
        depends on the @MODLTYPE parameter.
        required: Yes; default: ; range: 

        FULLMOD:     Output full model file to be created. This model covers the same volume as
        the input model but it has split cells where the original cells intersect
        the input wireframes. Cells constrained by the wireframe are flagged with
        a ZONE value depending on field value of *ZONE and the parameter @ZONE.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Name of zone field, if any, in input wireframe with multiple zones. If the
        field is specified then it is created in the output model file with the
        corresponding zone value as defined by the wireframe. The field can be
        either numeric or 4 character alpha. If not specified and a field ZONE
        exists in WIRETR then it will automatically be used.
        required: No; default: ; range: 

        MINED:     Optional field to be added to the output full model. Cells constrained by
        the wireframes will have a value of 1, cells outside or not constrained by
        the wireframes will have a value of zero
        required: No; default: ; range: 

        DENSITY:     Density field in the input model file to be used when averaging grade
        fields. If this is not set and a DENSITY field exists in the model file it
        will be used. Otherwise Density is specified using the DENSITY parameter.
        required: No; default: DENSITY; range: 

        ADDF1 to ADDF9:     Field(s) to be treated as additive(s) e.g. cost and revenue values.
        required: No; default: ; range: 

        AVGF1 to AVGF9:     MODSPLIT has the option to adjust the grades in the output model cells to
        be the average grade within each wireframe zone. To output average grades
        the fields *AVGF1 to *AVGF9 can be specified. The calculation of average
        grades within cells that are not constrained by the wireframes is
        controlled by the @DEFGRADE parameter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODLTYPE:     Type of wireframe model to be filled; one of the following options, with
        default of (1) :-  =1 : solid 3d, interior to be filled with cells.  =2 :
        solid 3d, exterior to be filled with cells.  =3 : surface, cells to be
        filled below (for XY), to south (for XZ), or to west (for YZ).  =4 :
        surface, cells to be filled above (for XY), to north (for XZ), or to east
        (for YZ).  =5 : fill between two surfaces with cells..  =6 : two surfaces,
        cells to be filled above upper surface and below lower surface.
        required: Yes; default: 1; range: 1,6

        ZONE:     Zone code to be inserted into output model ZONE field if field does not
        exist in input wireframe model.
        required: No; default: 0; range: 

        MAXDIP:     Reference gradient used to calculate the degree of cell splitting as
        described in the Full Description (0).
        required: No; default: 0; range: 0,90

        SPLITS:     Maximum amount of splitting to be allowed (3).  =0 : no splitting: parent
        cell.  =1 : 1 split: 2 x 2 subcells.  =2 : 2 splits: 4 x 4 subcells.  =3 :
        3 splits: 8 x 8 subcells.
        required: No; default: 3; range: 1,3

        PLANE:     Optional alpha parameter defining orientation 'XY', 'XZ', or 'YZ', of
        plane in which subcell splitting is to be performed. Care must be taken in
        selection of the plane to be used if the ends of the wireframe have not
        been linked, as the wireframe model is then partially 'hollow' when viewed
        from certain directions.
        required: No; default: XY; range: 

        XSUBCELL:     Number of subcells in X direction (1). Max 100. Only used if SPLITS=0.
        required: No; default: 1; range: 1,100

        YSUBCELL:     Number of subcells in Y direction (1). Max 100. Only used if SPLITS=0.
        required: No; default: 1; range: 1,100

        ZSUBCELL:     Number of subcells in Z direction (1). Max 100. Only used if SPLITS=0.
        required: No; default: 1; range: 1,100

        RESOL:     Defines boundary resolution in direction perpendicular to plane of
        filling.  =0 : precise boundary location.  =N : boundary rounded to
        nearest 1/Nth of parent cell size.
        required: No; default: 0; range: 0,N

        DENSITY:     Default Density value to be used when averaging grades. This is used if
        there is no DENSITY field in the input block model or if Density values in
        the model are absent.
        required: No; default: 1; range: 

        DEFGRADE:     The calculation of average grades within cells that are not constrained by
        the wireframes is controlled by the @DEFGRADE parameter.  If @DEFGRADE >=
        0 then unconstrained cell grades are set to that value for all selected
        fields  If @DEFGRADE = -1 then unconstrained cells are assigned the
        average grade of all the unconstrained cells regardless of ZONE.  If
        @DEFGRADE is not set or set to absent data (-) then unconstrained cells
        grades are unchanged from the input model
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.modsplit).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MODSPLIT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def modtra(self,
                model_i,
                out_o,
                f1_f,
                grid_i='optional',
                xg_f='XG',
                yg_f='YG',
                zg_f='ZG',
                f2_f='optional',
                f3_f='optional',
                f4_f='optional',
                f5_f='optional',
                plane_p=1,
                xorig_p='optional',
                yorig_p='optional',
                zorig_p='optional',
                xspace_p='optional',
                yspace_p='optional',
                zspace_p='optional',
                numx_p='optional',
                numy_p='optional',
                numz_p='optional',
                miss_p='optional',
                print_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODEL:     Input model. Must contain the 13 standard model fields - XC, YC, ZC, XINC,
        YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK - plus at least one
        other field.
        required: Yes; default: ; range: 

        GRID:     Optional input grid file defining the location of the simulated
        drillholes. It must contain ALL fields XG , YG , ZG, regardless of the
        PLANE parameter setting. This file must NOT include an alpha BHID field,
        as this would clash with the numeric BHID field created in OUT.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output holes file. Will contain the fields BHID, FROM, TO, X, Y, Z,
        LENGTH, A0, B0 plus all fields from input model file except the 13
        standard model fields.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        F1:     1st field over which continuity is required within a sample.
        required: Yes; default: ; range: 

        XG:     Optional GRID field name holding X co-ordinate. Default is XG. Ignored if
        PLANE=3.
        required: No; default: XG; range: 

        YG:     Optional GRID field name holding Y co-ordinate. Default is YG. Ignored if
        PLANE=2.
        required: No; default: YG; range: 

        ZG:     Optional GRID field name holding Z co-ordinate. Default is ZG. Ignored if
        PLANE=1.
        required: No; default: ZG; range: 

        F2:     2nd field over which continuity is required within a sample.
        required: No; default: ; range: 

        F3:     3rd field over which continuity is required within a sample.
        required: No; default: ; range: 

        F4:     4th field over which continuity is required within a sample.
        required: No; default: ; range: 

        F5:     5th field over which continuity is required within a sample.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLANE:     Drillhole orientation. Default (1).  Option  Description  1  - XY. A grid
        of vertical holes is created.  2  - XZ. A grid of horizontal holes is
        created, running from North to South.  3  - YZ. A grid of horizontal holes
        is created, running from East to West.
        required: No; default: 1; range: 1,3

        XORIG:     X co-ordinate of collar of first drillhole. Default is model X origin plus
        half a parent cell X dimension. Ignored if PLANE=3 or GRID specified.
        required: No; default: ; range: Undefined

        YORIG:     Y co-ordinate of collar of first drillhole. Default is model Y origin plus
        half a parent cell Y dimension. Ignored if PLANE=2 or GRID specified.
        required: No; default: ; range: Undefined

        ZORIG:     Z co-ordinate of collar of first drillhole. Default is model Z origin plus
        half a parent cell Z dimension. Ignored if PLANE=1 or GRID specified.
        required: No; default: ; range: Undefined

        XSPACE:     Spacing in X between drillholes. Default is the parent cell X dimension.
        Ignored if PLANE=3 or GRID specified.
        required: No; default: ; range: Undefined

        YSPACE:     Spacing in Y between drillholes. Default is the parent cell Y dimension.
        Ignored if PLANE=2 or GRID specified.
        required: No; default: ; range: Undefined

        ZSPACE:     Spacing in Z between drillholes. Default is the parent cell Z dimension.
        Ignored if PLANE=1 or GRID specified.
        required: No; default: ; range: Undefined

        NUMX:     Number of drillholes in X direction. Default is the number up to the model
        X limit. Ignored if PLANE=3 or GRID specified.
        required: No; default: ; range: Undefined

        NUMY:     Number of drillholes in Y direction. Default is the number up to the model
        Y limit. Ignored if PLANE=2 or GRID specified.
        required: No; default: ; range: Undefined

        NUMZ:     Number of drillholes in Z direction. Default is the number up to the model
        Z limit. Ignored if PLANE=1 or GRID specified.
        required: No; default: ; range: Undefined

        MISS:     Missing cells treatment. Default is (0)  Option  Description  0  Where no
        model cell or subcell exists, no drillhole sample will be created.  1
        Where no model cell or subcell exists, drillhole sample will be created
        with missing values.
        required: No; default: ; range: Undefined

        PRINT:     Print flag. Default (0). 0 - minimum output. 1 - summary of percentage
        complete and number of holes written.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.modtra).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MODTRA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def modtri(self,
                in_i,
                wiretr_o,
                wirept_o,
                origin_p=0,
                pttol_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, and IJK. If it is a Rotated Model then
        it must also include the fields X0, Y0, Z0, ANGLE1, ANGLE2, ANGLE3,
        ROTAXIS1, ROTAXIS2, and ROTAXIS3.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Output wireframe point file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ORIGIN:     Origin coordinates. Values are: 0 - retain original coordinates. 1 - use
        coordinates relative to the model origin. 2 - use the central coordinates
        of model cells as the new origin
        required: No; default: 0; range: 0,2

        PTTOL:     Check for duplicates in output wireframe coordinates
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.modtri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MODTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def monaco(self,
                out_o,
                nrecs_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output file
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NRECS:     Number of records required in output file
        required: Yes; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.monaco).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'MONACO ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def nscore(self,
                in_i,
                out_o,
                grade_f,
                refdist_i='optional',
                trandist_o='optional',
                stat_tbl_o='optional',
                dcwgt_f='optional',
                refgrade_f='optional',
                refwgt_f='optional',
                mingrade_p=0,
                maxgrade_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must include the grade field GRADE and may
        also include the declustering weight field DCWGT .
        required: Yes; default: ; range: 

        REFDIST:     Optional input reference distribution to define required transformation.
        The file must include the field REFGRADE , to define the distribution, and
        may also include the field REFWGT to define declustering weights.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing transformed points. This contains the same data as
        the IN file, but with the added transformed data field NSCORE.
        required: Yes; default: ; range: 

        TRANDIST:     Output file for the transformation table. This will contain the grade
        field GRADE from the IN sample file and the field TRANDATA giving the
        transformed value. The file will be sorted by GRADE .
        required: No; default: ; range: 

        STAT_TBL:     Output statistics table. This provides statistics for both the input,
        untransformed, sample data, as well as the output, transformed, values.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     Field in the input sample file IN defining the grade to be transformed.
        required: Yes; default: ; range: 

        DCWGT:     Optional declustering weights field in the IN file.
        required: No; default: ; range: 

        REFGRADE:     Reference grade field, defining the reference distribution in the REFDIST
        file.
        required: No; default: ; range: 

        REFWGT:     Optional reference weight field, defining declustering weights in the
        REFDIST file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINGRADE:     Minimum GRADE value input from the IN sample file.
        required: No; default: 0; range: Undefined

        MAXGRADE:     Maximum GRADE value input from the IN sample file.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.nscore).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'NSCORE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def nsmodbak(self,
                    in_i,
                    samples_i,
                    out_o,
                    x_or_y_or_zpt_f,
                    vsetnum_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model variogram file. This should contain a GRADE field containing
        the name of the grade it relates to. If this contains the TRANS field, it
        will only convert variograms where TRANS=1.
        required: Yes; default: ; range: 

        SAMPLES:     Input sample data file. This should be the file which was transformed as
        part of the original variogram creation. It should contain grade fields
        matching the names in GRADE in the input model file IN
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model variogram file which will contain the back-transformed
        variogram models. Back-transformed variograms will have TRANS=-1
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X/Y/ZPT:     Coordinate fields in the input SAMPLES file
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VSETNUM:     Variogram model set number to be assigned to &OUT file.
        required: No; default: 1; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.nsmodbak).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'NSMODBAK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def nstrans(self,
                in_i,
                out_o,
                grade_f,
                dcwgt_f='optional',
                nsgrade_f='optional',
                mingrade_p=0,
                maxgrade_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must include the grade field GRADE and may
        also include the declustering weight field DCWGT .
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        Out:     Output file containing transformed points.This contains the same data as
        the IN file, but with the added transformed data field NSGRADE.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     Field in the input sample file IN defining the grade to be transformed.
        required: Yes; default: ; range: 

        DCWGT:     Optional declustering weights field in the IN file.
        required: No; default: ; range: 

        NSGRADE:     Field in the output file OUT containing the transformed grade.(This may be
        the same as GRADE, in which case it overwrites the original value)
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINGRADE:     Minimum GRADE value input from the IN sample file.
        required: No; default: 0; range: Undefined

        MAXGRADE:     Maximum GRADE value input from the IN sample file.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.nstrans).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'NSTRANS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def origin(self,
                in_i,
                x_f,
                y_f,
                z_f,
                angle1_p,
                out_o='optional',
                wiretr_o='optional',
                wirept_o='optional',
                margin_p=10,
                xinc_p=10,
                yinc_p=10,
                zinc_p=10,
                print_p=0,
                angle2_p=0,
                angle3_p=0,
                rotaxis1_p=3,
                rotaxis2_p=1,
                rotaxis3_p=3
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file of data covering the volume to be modelled. The data may be a
        wireframe points file, a string file or any file with X, Y and Z fields
        covering the model volume.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Optional output rotated model prototype file.
        required: No; default: ; range: 

        WIRETR:     Optional output wireframe triangle file. The wireframe will be created to
        enclose the limits of the rotated model.
        required: No; default: ; range: 

        WIREPT:     Optional output wireframe points file. The wireframe will be created to
        enclose the limits of the rotated model.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate field in IN file.
        required: Yes; default: XP; range: 

        Y:     Y coordinate field in IN file.
        required: Yes; default: YP; range: 

        Z:     Z coordinate field in IN file.
        required: Yes; default: ZP; range: 

        ----------
        PARAMETERS
        ----------

        ANGLE1:     First rotation angle clockwise in degrees, around axis ROTAXIS1 . It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation.
        required: Yes; default: 0; range: -360,360

        MARGIN:     The margin, in units used in the IN file, to be created around the data
        volume described by the IN file
        required: No; default: 10; range: Undefined

        XINC:     Parent cell size in X to be created in the output prototype model. This is
        only required if an OUT file has been specified.
        required: No; default: 10; range: Undefined

        YINC:     Parent cell size in Y to be created in the output prototype model. This is
        only required if an OUT file has been specified.
        required: No; default: 10; range: Undefined

        ZINC:     Parent cell size in Z to be created in the output prototype model. This is
        only required if an OUT file has been specified.
        required: No; default: 10; range: 0.000001,9999999

        PRINT:     Print flag: =0 for minimum output. =1 for runtime information messages.
        required: No; default: 0; range: 0,1

        ANGLE2:     Second rotation angle clockwise in degrees, around axis ROTAXIS2 . It must
        lie between 360.0 and +360.0. A value of zero indicates no rotation.
        required: No; default: 0; range: -360,360

        ANGLE3:     Third rotation angle clockwise in degrees, around axis ROTAXIS3 . It must
        lie between -360.0 and +360.0. A value of zero indicates no rotation.
        required: No; default: 0; range: -360,360

        ROTAXIS1:     Axis around which first rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis.
        required: No; default: 3; range: 0,3

        ROTAXIS2:     Axis around which second rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis.
        required: No; default: 1; range: 0,3

        ROTAXIS3:     Axis around which third rotation angle will occur. 0 for no rotation, 1
        for X axis, 2 for Y axis, 3 for Z axis.
        required: No; default: 3; range: 0,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.origin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ORIGIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def output(self,
                in_i,
                out_o=None,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f1_to_25_f=['optional'],
                csv_p=0,
                sfx_p = '.dm',
                nodd_p=0,
                dplace_p=-1,
                implicit_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Database file to be output. If IN is a catalogue file, then all files in
        the catalogue are output.
        required: Yes; default: ; range: 

        FIELDLST:     File used to supply selected fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:    Output filename. The filename CAN exceed 8 characters but this will result in a
        pop-up warning in studio. By default, the input filename is shortened to 6 characters, then 
        the '_e' suffix is added. if csv_p: the '.csv' suffix is added by default.
        required: Yes; default: {IN}_e

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F1_to_25:     Optional first output field. None specified means "all".
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CSV:     Option  Description  1  Output in comma separated format (0).
        required: No; default: 0; range: 0,1

        NODD:     Option  Description  1  Suppress output of Data Definition (0).
        required: No; default: 0; range: 0,1

        DPLACE:     Exporting to CSV only: specify the maximum number of decimal places to
        export.  Option  Description  -1  Use the best representation for the
        magnitude of the data.  0  Export 0 decimal places  1  Export 1 decimal
        place.  2  Export 2 decimal places  3  Export 3 decimal places  4  Export
        4 decimal places  5  Export 5 decimal places
        required: No; default: -1; range: -1,5

        IMPLICIT:     Exporting to CSV only: if no output fields are specified, allows you to
        either export explicit fields only, or explicit and implicit fields.
        Option  Description  0  All explicit fields are exported.  1  All fields
        are exported, including implicit fields.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.output).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'OUTPUT ' + ' '.join(dm_arg_list)
        
        # Add output file specification
        if csv_p > 0:
            sfx_p = '.csv'

        if out_o is None: # no output provided
            out_o = in_i[:6] + '_e'
        else:
            if len(out_o) > 8:
                logger.warning("parameter 'out_o' with value '{}' provided to command 'output' exceeds recommended length of 8 characters".format(out_o))
        
        outfile = " '{}{}'".format(out_o, sfx_p)
        command += outfile
                
        self.run_command(command)    
        
        
    def panelest(self,
                    in_i,
                    x_f,
                    y_f,
                    value_f,
                    vmodparm_i='optional',
                    perim_i='optional',
                    disptin_i='optional',
                    out_o='optional',
                    sampout_o='optional',
                    z_f='Z',
                    panel_f='PVALUE',
                    xpt_f='optional',
                    ypt_f='optional',
                    zpt_f='optional',
                    minnum_p=1,
                    maxnum_p=100,
                    inside_p=1,
                    xdspace_p=0,
                    ydspace_p=0,
                    zdspace_p=0,
                    mindisc_p=50,
                    dplus_p=0,
                    dminus_p=0,
                    imethod_p=3,
                    vmodnum_p=1,
                    log_p=0,
                    power_p=2,
                    total_p=0,
                    vgonly_p=0,
                    print_p=1,
                    anangle1_p=0,
                    anaxis1_p=3,
                    anangle2_p=0,
                    anaxis2_p=1,
                    anangle3_p=0,
                    anaxis3_p=3,
                    andist1_p=1,
                    andist2_p=1,
                    andist3_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must contain the fields X , Y , and VALUE. A
        Z field is also required for 3D panels.
        required: Yes; default: ; range: 

        VMODPARM:     Variogram model parameter file.
        required: No; default: ; range: 

        PERIM:     The input string file. This must contain the 5 fields PANEL , PTN , XP ,
        YP , ZP . The strings may be open or closed, but must be planar and must
        lie in one of the three orthogonal planes. Either a PERIM file or a
        DISPTIN file must be specified.
        required: No; default: ; range: 

        DISPTIN:     The input file containing discretisation points. This must include the 3
        fields XPT , YPT , ZPT A fourth field PANEL is optional, and is used to
        identify different sets of discretisation points representing different
        panels. Either a PERIM file or a DISPTIN file must be specified.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     The output results file, containing a record for each panel estimated. The
        fields include the panel identifier, the estimated grade, the variance,
        and other associated information.
        required: No; default: ; range: 

        SAMPOUT:     The sample output file. This will contain the samples used to estimate
        each panel, and the weight assigned to each sample.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data in the IN file.
        required: Yes; default: X; range: 

        Y:     Y coordinate of sample data in the IN file.
        required: Yes; default: Y; range: 

        VALUE:     Field to be estimated in the IN file.
        required: Yes; default: ; range: 

        Z:     Z coordinate of sample data in the IN file.
        required: No; default: Z; range: 

        PANEL:     Panel identifier. This is a numeric or alpha field (max 40 characters) in
        the PERIM or DISPTIN file. If a perimeter file is used then the PVALUE
        field may be used.
        required: No; default: PVALUE; range: 

        XPT:     X coordinate of discretisation points in the DISPTIN file.
        required: No; default: ; range: 

        YPT:     Y coordinate of discretisation points in the DISPTIN file.
        required: No; default: ; range: 

        ZPT:     Z coordinate of discretisation points in the DISPTIN file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINNUM:     Minimum number of samples for panel to be estimated.(1).
        required: No; default: 1; range: 1,+

        MAXNUM:     Maximum number of samples for panel to be estimated. If kriging is
        selected then the maximum cannot exceed 1399.
        required: No; default: 100; range: 1,+

        INSIDE:     If set to 1 samples must lie inside panel. This only applies if a PERIM
        file has been specified.
        required: No; default: 1; range: 0,1

        XDSPACE:     The distance between discretisation points in X. If set to zero then a
        suitable spacing will be generated automatically.
        required: No; default: 0; range: Undefined

        YDSPACE:     The distance between discretisation points in Y. If set to zero then a
        suitable spacing will be generated automatically.
        required: No; default: 0; range: Undefined

        ZDSPACE:     The distance between discretisation points in Z. If set to zero then a
        suitable spacing will be generated automatically.
        required: No; default: 0; range: Undefined

        MINDISC:     Minimum number of discretisation points in panel before it can be
        estimated.
        required: No; default: 50; range: 1,+

        DPLUS:     Perimeter projection distance measured in the increasing direction of the
        perpendicular axis.
        required: No; default: 0; range: 0,+

        DMINUS:     Perimeter projection distance measured in the decreasing direction of the
        perpendicular axis.
        required: No; default: 0; range: 0,+

        IMETHOD:     Interpolation method: 1 - nearest neighbour 2 - inverse power of distance
        3 - ordinary kriging
        required: No; default: 3; range: 1,3

        VMODNUM:     Variogram model reference number as defined by the VREFNUM field in the
        VMODPARM file. (1).
        required: No; default: 1; range: Undefined

        LOG:     Flag to indicate whether log kriging is selected. 0 = ordinary kriging 1 =
        log kriging
        required: No; default: 0; range: 0,1

        POWER:     Power for inverse power of distance method.
        required: No; default: 2; range: Undefined

        TOTAL:     If TOTAL is set to 1 then values for the total volume and area over all
        panels will be reported and saved to the OUT file. If kriging is selected
        then the average variance will be calculated as the weighted average of
        the individual variances, weighted by the square of the area or volume.
        required: No; default: 0; range: 0,1

        VGONLY:     Flag controlling estimation (0). Option Description 0 - Calculate
        estimated grade and variance for each panel. 1 - Only create the sample
        output file. Do not calculate estimated grade and variance.
        required: No; default: 0; range: 0,1

        PRINT:     Output control flag (1). Option Description 0 Minimum output. This
        includes a summary of the input data and the results. 1 As 0 plus Lagrange
        multiplier and panel F value 2 As 1 plus a listing of discretisation
        points.
        required: No; default: 1; range: 0,2

        ANANGLE1:     First rotation angle for defining anisotropy when nearest neighbour or
        inverse power of distance methods are selected ie IMETHOD = 1 or 2.
        required: No; default: 0; range: -360, 360

        ANAXIS1:     First rotation axis for defining anisotropy when nearest neighbour or
        inverse power of distance methods are selected ie IMETHOD = 1 or 2. This
        parameter has a value 1 for rotation about the X axis, 2 for rotation
        about the Y axis, and 3 for rotation about the Z axis. If it is set to 0
        then there will be no rotation, irrespective of the value of ANANGLE1.
        required: No; default: 3; range: 0,3

        ANANGLE2:     Second rotation angle for defining anisotropy when nearest neighbour or
        inverse power of distance methods are selected ie IMETHOD = 1 or 2.
        required: No; default: 0; range: -360, 360

        ANAXIS2:     Second rotation axis for defining anisotropy when nearest neighbour or
        inverse power of distance methods are selected ie IMETHOD = 1 or 2. This
        parameter has a value 1 for rotation about the X axis, 2 for rotation
        about the Y axis, and 3 for rotation about the Z axis. If it is set to 0
        then there will be no rotation, irrespective of the value of ANANGLE2.
        required: No; default: 1; range: 0,3

        ANANGLE3:     Third rotation angle for defining anisotropy when nearest neighbour or
        inverse power of distance methods are selected ie IMETHOD = 1 or 2.
        required: No; default: 0; range: -360, 360

        ANAXIS3:     Third rotation axis for defining anisotropy when nearest neighbour or
        inverse power of distance methods are selected ie IMETHOD = 1 or 2. This
        parameter has a value 1 for rotation about the X axis, 2 for rotation
        about the Y axis, and 3 for rotation about the Z axis. If it is set to 0
        then there will be no rotation, irrespective of the value of ANANGLE3.
        required: No; default: 3; range: 0,3

        ANDIST1:     Anisotropy distance measured along rotated X axis, when nearest neighbour
        or inverse power of distance methods are selected ie IMETHOD = 1 or 2.
        This corresponds to the range of influence in that direction.
        required: No; default: 1; range: 0.0001,+

        ANDIST2:     Anisotropy distance measured along rotated Y axis, when nearest neighbour
        or inverse power of distance methods are selected ie IMETHOD = 1 or 2.
        This corresponds to the range of influence in that direction.
        required: No; default: 1; range: 0.0001,+

        ANDIST3:     Anisotropy distance measured along rotated Z axis, when nearest neighbour
        or inverse power of distance methods are selected ie IMETHOD = 1 or 2.
        This corresponds to the range of influence in that direction.
        required: No; default: 1; range: 0.0001,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.panelest).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PANELEST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def panelk(self,
                in1_i,
                in2_i,
                x_f,
                y_f,
                value_f,
                panel_f,
                out_o='optional',
                nugget_p=0,
                search_p=9999,
                nmax_p=50,
                nsim_p=20,
                minsim_p=400,
                vmethod_p=1,
                vgram_p=1,
                print_p=1,
                var1_p=1,
                range1_p=1,
                range2_p=1,
                vgangle1_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input sample data file. This must contain the three fields X , Y and
        VALUE.
        required: Yes; default: ; range: 

        IN2:     The input panel data file. This must contain the 4 fields PANEL , PTN , XP
        field must be defined explicitly, and will often be called PVALUE. The
        strings may be open or closed.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     The output results file. This will contain the following fields: -FIELD
        The grade being kriged. -PANEL Panel identifier copied from the IN2 file.
        -KRIGEST The kriged estimate. -KRIGVAR The kriging variance. -NUMSAM The
        number of samples used to make the kriged estimate. -AREA The area inside
        the panel. -SIMPTS The number of simulated points inside the panel.
        -FVALUE The average value of the variogram in the panel.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data in the IN file.
        required: Yes; default: X; range: 

        Y:     Y coordinate of sample data in the IN file.
        required: Yes; default: Y; range: 

        VALUE:     Field to be kriged in the IN file.
        required: Yes; default: ; range: 

        PANEL:     Panel identifier. This is a numeric field in the IN2 file. Its name will
        often be PVALUE.
        required: Yes; default: PVALUE; range: 

        ----------
        PARAMETERS
        ----------

        NUGGET:     Nugget variance (0).
        required: No; default: 0; range: Undefined

        SEARCH:     Maximum search distance from centre of gravity of panel (9999).
        required: No; default: 9999; range: Undefined

        NMAX:     The maximum number of samples to be used. The default is (50), but the
        maximum is 300 for a PC and 1900 for a workstation.
        required: No; default: 50; range: 11,900

        NSIM:     The starting value for the number of simulated points in the X and Y
        directions for panel simulation. The default value of (20) means that the
        initial square grid has 20x20=400 points. Refer to the summary description
        of PANELK in the helpfile or process summary for details of the panel
        simulation method.
        required: No; default: 20; range: Undefined

        MINSIM:     Minimum number of simulated points in panel. The default is (400).
        required: No; default: 400; range: Undefined

        VMETHOD:     Method for defining variogram parameters (1) Option Description 1 Use
        parameters NUGGET , VAR1 , RANGE1 , RANGE2 , and VGANGLE1. This is
        consistent with earlier versions of PANELK and can be used for a single
        structure spherical model. 2 Define parameters using interactive prompts.
        This method allows a selection of variogram models, defined using VGRAM.
        required: No; default: 1; range: 1,2

        VGRAM:     Variogram model type (1). Possible values are: Option Description 1 Single
        structure spherical model. 2 Two structure spherical model. 3 Linear
        model. 4 De Wijsian model. 5 Exponential model. 6 Gaussian model. 7
        Experimental model. 8 NOT USED. 9 NOT USED. 10 Multi structure spherical
        model with anisotropy.
        required: No; default: 1; range: 1,10

        PRINT:     Output control flag (1). Option Description 0 Minimum output. Just a
        summary of the sample data and a table of results is output. 1 As 0 plus a
        summary of all input files, fields and parameters. 2 As 1 plus a listing
        of all simulated points, plus all samples and kriged weights. 3 As 2 plus
        a listing of panel points.
        required: No; default: 1; range: 0.3

        VAR1:     Spatial variance (1). The difference between the nugget variance
        required: No; default: 1; range: Undefined

        RANGE1:     The range of the variogram in direction 1. (1) Direction 1 is used for
        defining the anisotropy angle, [ VGANGLE1] , which is measured clockwise
        from the North. It does not matter whether direction 1 is the major or
        minor axis.
        required: No; default: 1; range: Undefined

        RANGE2:     The range of the variogram in direction 2, perpendicular to direction 1.
        (1)
        required: No; default: 1; range: Undefined

        VGANGLE1:     The angle between the N axis and direction 1, measured clockwise from N in
        degrees (0).
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.panelk).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PANELK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pca(self,
            in_i,
            sampid_f,
            scores_o='optional',
            f1_to_10_f=['optional'],
            matxtype_p=0,
            eigenmin_p=1,
            numeigen_p=0,
            maxvarpc_p=95,
            scnorm_p=0,
            loadeign_p=0,
            print_p=0
            ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        SCORES:     Optional output file for principal component scores.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Field containing sample identification
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MATXTYPE:     Matrix type to be used to calculate components. Option Description (0) R
        matrix, standardised Z values of original data.
        required: No; default: 0; range: 0,1

        EIGENMIN:     Option Description (1) Eigenvalue required to select the number of
        components. Used in the R-matrix only, ie. when MATXTYPE = 0. Used also
        when NUMEIGEN = 0.
        required: No; default: 1; range: Undefined

        NUMEIGEN:     Option Description (0) Maximum number of eigenvalues is set to the number
        of fields or to 10, whichever is the lower. Note that if a non default
        value of MAXVARPC is used, NUMEIGEN must be 0.
        required: No; default: 0; range: Undefined

        MAXVARPC:     Specific to the selection of the variance/covariance matrix for analysis
        ie. MATXTYPE=1. The cumulative percentage of variation (95) required from
        the eigen values to select the number of eigen values for the analysis.
        Used when NUMEIGEN=0.
        required: No; default: 95; range: Undefined

        SCNORM:     Option Description (0) Normalised scores calculated. 1 Scores are not
        normalised.
        required: No; default: 0; range: 0,1

        LOADEIGN:     Option Description (0) Use factor loadings to calculate scores. 1 Use
        eigenvalues to calculate scores.
        required: No; default: 0; range: 0,1

        PRINT:     > 0 Display scores on the screen (0). Note - Do not use for large files.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pca).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PCA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pdrive(self,
                in_i,
                plottype_p,
                spool_p,
                penfile_i='optional',
                filter_i='optional',
                dfltfile_p=2,
                num_dot_pens_p=64,
                hatchwid_p='optional',
                squeeze_p='optional',
                angle_p=0,
                scale_p='optional',
                factor_p=1,
                xoffset_p=0,
                yoffset_p=0,
                pxend_p=0,
                pyend_p=0,
                pendmode_p=0,
                raster_p=0,
                fillopt_p=1,
                trmode_p=1,
                emptycol_p=0,
                edgeopt_p=1,
                edgecol_p=0,
                charbgr_p='optional',
                symbgr_p='optional',
                fitpaper_p=0,
                shadepct_p=100
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Plot file. Must contain the fields X, Y, S1, S2 and CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE, XORIG, YORIG, XRT,
        YTP, XPICRT, YPICTP, CHARSIZE and ASPRATIO (numeric, implicit).
        required: Yes; default: ; range: 

        PENFILE:     Colour number to plotter pen mapping file. Must contain the fields and
        PEN. During plotting, the field in the plotfile will be translated into
        the PEN number in the PENFILE. The field may also contain the code
        1126-1140 and will cause any fill codes in the plotfile to be plotted by
        the PEN number in the PENFILE.
        required: No; default: ; range: 

        FILTER:     Filter file to replace data values in the plot file, such as , with values
        more appropriate for the plotter. Expects fields FIELD, TEST, IN and OUT.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLOTTYPE:     Type code for plotter. Select from the following list of plotters. Option
        Description 1. HCBS text file output 10. HP centre origin 7585,Draftmaster
        etc. 15. HP corner origin 7475,7550 etc 16. HP Designjet 650C 20. DMP
        52,56,58 30. CalComp with 906 controller 31. CalComp with 907 controller
        60. Oce,Schlumberger,Benson VDF Format
        required: Yes; default: ; range: 1,60

        SPOOL:     The plotfile may automatically be sent to the plotter once the plot file
        is generated. Spooled plotting is normally done in background mode. Option
        Description 0 To not spool the plot file. 1 To spool the plot file to the
        plotter. 2 To spool the plot file to the plotter, and then delete the plot
        file. This assumes the plot file spooler you are using makes a copy of the
        plot file (1).
        required: Yes; default: 1; range: 0,2

        DFLTFILE:     Used to determine how the name of the plot file is generated. Option
        Description 0 Force a prompt for a system filename. 1 Force the use the
        default filename. 2 Prompt for a system file if SPOOL is equal to 0 or 1,
        but to use the default system file if SPOOL
        required: No; default: 2; range: 0,2

        NUM.PENS:     The number of pens to be used. If a field is in the plot file, then the
        number will be used as the required pen, unless this number exceeds
        NUM.PENS , when pen 1 will be used. The default is (64).
        required: No; default: 64; range: Undefined

        HATCHWID:     This defines the method of plotting the fill codes [1126-1140]. If this
        value is absent then different cross hatching styles will be generated
        using the first available pen. If a value is specified then it will be
        used as the spacing between horizontal hatch lines. To get a solid fill,
        specify a hatch width equal to the size of the pen.
        required: No; default: ; range: Undefined

        SQUEEZE:     Reduce the size of fill codes [1126-] by this amount. Useful for avoiding
        the overlapping of the edges of fill codes during plotting. If a fill code
        is squeezed out completely on any axis, it will not be plotted.
        required: No; default: ; range: Undefined

        ANGLE:     Rotate the plot by a given number of degrees. The default is (0) degrees.
        This is a replacement for the ROTATE parameter used on older versions of
        PDRIVE.
        required: No; default: 0; range: 0,360

        SCALE:     The scale factor. E.g. enter 1000 for a scale of 1:1000. Note that user
        data units of metres are assumed; if metres are not the unit, then the
        scale must be multiplied by factor f, where f=no. of metres in 1 user data
        unit [e.g. 0.3048 for feet]. If - [absent data] is entered, then the plot
        will be the true size [as defined in the prototype].
        required: No; default: ; range: Undefined

        FACTOR:     A scaling factor used to change the size of the plot by multiplying the
        values in the plot file by this value. The default value is (1).
        required: No; default: 1; range: Undefined

        XOFFSET:     The X offset [along the paper] from the paper origin [mm] at which this
        plot will start (0).
        required: No; default: 0; range: Undefined

        YOFFSET:     The Y offset [along the paper] from the paper origin [mm] at which this
        plot will start (0).
        required: No; default: 0; range: Undefined

        PXEND:     The X offset from the current plot at which the pen will be left when the
        plot completes, and the origin for the next plot established here if the
        plotter supports new origins. The default is (0).
        required: No; default: 0; range: Undefined

        PYEND:     The Y offset from the current plot at which the pen will be left when the
        plot completes, and the origin for the next plot established here if the
        plotter supports new origins. The default is (0).
        required: No; default: 0; range: Undefined

        PENDMODE:     Determines the corner on the plot the PXEND and PYEND offsets from. Option
        Description 0 for bottom left [0,0], 1 for bottom right [XPICRT,0], 2 for
        top left [0,YPICTP] 3 for top right [XPICRT,YPICTP]. The default is the
        bottom left corner (0).
        required: No; default: 0; range: 0,3

        RASTER:     Determines whether a pen or a raster (HPGL2 capable) plotter is used. Use
        for any HPGL2 capable plotter. HPGL2 polygon plotting features are used
        for plot codes 1126-1189,2000/2001,3000-3155. Suppresses sorting of plot
        by colour. For pen plotters, PDRIVE plots the various colours in numerical
        order to save time. The default is pen plotter (0) Option Description 0
        plotter is a pen type. 1 plotter is a raster or inkjet type. Only for
        PLOTTYPE =10-19.
        required: No; default: 0; range: 0,1

        FILLOPT:     Option Description 1 No polygon filling will take place. 2 Polygon filling
        will use fill types defined in the plot file for each polygon. 3 Polygon
        filling will use fill types defined in the pen file for polygons with
        matching colours in the plot file. Only for RASTER =1 (1)
        required: No; default: 1; range: 1,3

        TRMODE:     Option Description 1 White polygon fill is transparent. 0 White polygon
        fill is opaque. Only for RASTER =1 (1)
        required: No; default: 1; range: 0,1

        EMPTYCOL:     Option Description 0 All polygons will be filled using the colour in the
        plotfile. >0: Polygons of this colour will be treated as empty [i.e. as if
        they had =0] Only for RASTER =1 (0) &gt;0 Polygons of this colour will be
        treated as empty [i.e. as if they had =0] Only for RASTER =1 (0)
        required: No; default: 0; range: Undefined

        EDGEOPT:     Option Description 0 No polygon edging will take place. 1 Edge polygons
        using colour from plot file or EDGECOL 2 Force edging of empty polygons,
        using either EDGECOL or 1 3 Force edging of all polygons without edging,
        using either EDGECOL or 1 4 Force edging of all polygons using either
        EDGECOL or 1 Only for RASTER =1 (1)
        required: No; default: 1; range: 0,4

        EDGECOL:     Default colour for polygon edging [see EDGEOPT ] Only for RASTER =1 (0)
        required: No; default: 0; range: Undefined

        CHARBGR:     Default colour for text background. Option Description 0 Opaque white
        background for text. &gt;0 Coloured background for text. Undefined No
        background for text. Only for RASTER =1
        required: No; default: ; range: Undefined

        SYMBGR:     Default colour for symbol background. Option Description 0 Opaque white
        background for symbols. &gt;0: Coloured background for symbols. Undefined
        No background for symbols. Only for RASTER =1
        required: No; default: ; range: Undefined

        FITPAPER:     Fit to paper. Option Description 0 Plot at nominated scale. 1 Fit onto
        paper - preserve relative sheet dimensions. 2 Fit onto paper - adjust
        scales in X and Y independently. Only for PLOTTYPE =10-19 (0)
        required: No; default: 0; range: 0,2

        SHADEPCT:     The percentage shading required for solid-filled polygons Only for
        PLOTTYPE =10-19 (0)
        required: No; default: 100; range: 1,100.00

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pdrive).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PDRIVE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def perdtm(self,
                perimin_i,
                wiretr_i,
                wirept_i,
                perimout_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file
        required: Yes; default: ; range: 

        WIRETR:     Input DTM triangle file
        required: Yes; default: ; range: 

        WIREPT:     Input DTM point file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output perimeter file
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.perdtm).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PERDTM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def perfil(self,
                proto_i,
                model_o,
                perimin_i='optional',
                dplus_f='optional',
                dminus_f='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                attrib5_f='optional',
                mode_p=0,
                dplus_p='optional',
                dminus_p='optional',
                plane_p='XY',
                zone_p=0,
                optimise_p=2,
                fullcell_p=0,
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                pvalue_p='optional',
                resol_p=0,
                ovcheck_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Prototype model file. This defines the model parameters. Records in this
        file are ignored.
        required: Yes; default: ; range: 

        PERIMIN:     The input perimeter file. The fields required are XP,YP,ZP,PTN, and PVALUE
        (standard perimeter format). All perimeters in the file will be used.
        Perimeters must lie in the plane as specified by the PLANE parameter. The
        file may contain fields ATTRIB1-5 which can be carried across to the
        output model file. All cells within each perimeter will be assigned these
        values. If no perimeter file is specified, the entire model will be filled
        with cells (using the XSUBCELL , YSUBCELL and ZSUBCELL parameters). In the
        latter case, a field ZONE with value ZONE is added to the model.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output model file containing all cells and subcells which lie within the
        perimeters.  This file will be sorted on IJK.  The MODEL file must NOT be
        the same as the PROTO file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        DPLUS:     Field in PERIMIN defining the maximum distance measured in the increasing
        direction of the perpendicular axis. The default field name is DPLUS,
        which will be used if it exists in the PERIMIN file.
        required: No; default: ; range: 

        DMINUS:     Field in PERIMIN defining the maximum distance measured in the decreasing
        direction of the perpendicular axis. The default field name is DMINUS,
        which will be used if it exists in the PERIMIN file.
        required: No; default: ; range: 

        ATTRIB1:     Field from the perimeter file to be placed into the output model file.
        This may be a multi- word alpha field.
        required: No; default: ; range: 

        ATTRIB2:     Second field from the perimeter file to be placed into the output model
        file.
        required: No; default: ; range: 

        ATTRIB3:     Third field from the perimeter file to be placed into the output model
        file.
        required: No; default: ; range: 

        ATTRIB4:     Fourth field from the perimeter file to be placed into the output model
        file.
        required: No; default: ; range: 

        ATTRIB5:     Fifth field from the perimeter file to be placed into the output model
        file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODE:     Option  Description  (0)  Fill perimeters with regular [sub] cells [as FP
        subcommand in the Model Editor].
        required: No; default: 0; range: 0,3

        DPLUS:     The maximum distance measured in the increasing direction of the
        perpendicular axis.
        required: No; default: ; range: Undefined

        DMINUS:     The maximum distance measured in the decreasing direction of the
        perpendicular axis.
        required: No; default: ; range: Undefined

        PLANE:     Plane in which perimeters are to be filled. Either 'XY' [plan] or 'XZ'
        [E-W section] or 'YZ' [N-S section]. The default is 'XY'.
        required: No; default: XY; range: Undefined

        ZONE:     Value to be inserted in the ZONE field (0). The latter is created if there
        is no perimeter file or if ATTRIB1-5 are not specified.
        required: No; default: 0; range: Undefined

        OPTIMISE:     Optimise combination of cells to minimise number of subcells (2).  Option
        Description  0  No combining of subcells.  1  Combine subcells only if
        they form a complete parent cell.  2  Combine subcells to form minimum
        number of subcells.
        required: No; default: 2; range: 0,2

        FULLCELL:     Controls splitting of cells perpendicular to the plane of the perimeter.
        Option  Description  (0)  - split cells at projection distance.  1  -
        projection distance will be rounded to the nearest parent cell boundary.
        required: No; default: 0; range: 0,1

        XSUBCELL:     Cell division in X direction (1). Max 100.
        required: No; default: 1; range: 1,100

        YSUBCELL:     Cell division in Y direction (1). Max 100.
        required: No; default: 1; range: 1,100

        ZSUBCELL:     Cell division in Z direction (1). Max 100.
        required: No; default: 1; range: 1,100

        PVALUE:     PVALUE of single perimeter to be selected from the PERIMIN file.
        required: No; default: ; range: Undefined

        RESOL:     Defines boundary resolution if MODE>0  Option  Description  (0)  - precise
        boundary location.  N  - boundary rounded to nearest 1/Nth of parent cell
        size.
        required: No; default: 0; range: Undefined

        OVCHECK:     Option  Description  0  - assumes perimeters do not overlap (i.e.
        duplicate cells can be created).  (1)  - check for overlapping perimeters.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.perfil).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PERFIL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def peropn(self,
                perimin_i,
                perimout_o,
                close_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file. File must contain the fields XP, YP, ZP, PVALUE and
        PTN.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output perimeter file. All fields are copied from the input file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CLOSE:     Option Description (0) will remove last point of a perimeter if perimeter
        is closed.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.peropn).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PEROPN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pertag(self,
                perimin_i,
                tagfile_i,
                perimout_o,
                tagfield_f,
                maxsep_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file. Required fields are XP, YP and ZP.
        required: Yes; default: ; range: 

        TAGFILE:     Input and output tag file - will be created if it doesn't already exist.
        Required fields are XP, YP, ZP and TAGFIELD.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output perimeter file. Will contain all fields in PERIMIN, plus TAGFIELD
        if not already there.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        TAGFIELD:     Name of numeric field to be used for tag numbers.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MAXSEP:     The maximum distance between two points for them to be regarded as being
        in the same position.
        required: Yes; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pertag).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PERTAG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pertra(self,
                perimin_i,
                plane_f,
                pvalue_f,
                ptn_f,
                x_f,
                y_f,
                z_f,
                direct_p,
                startpos_p,
                stepsize_p,
                numplane_p,
                intersec_i='optional',
                perimout_o='optional',
                tag_f='optional',
                maxdist_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     The input perimeter file. This file must contain the fields declared in
        the command line as PLANE, PVALUE, PTN, X, Y and Z. Note that X, Y and Z
        are GLOBAL coordinates. If TAG is declared in the command line, it must
        appear in this file. This file must be sorted into PLANE, PVALUE, PTN
        order.
        required: Yes; default: ; range: 

        INTERSEC:     An optional output file of the lines of points produced where the input
        perimeters intersect the output perimeter planes. The output perimeters
        are constructed by arranging these points into lists. This file will
        contain fields PLANE, LN, X, Y and Z. Note that X, Y and Z are GLOBAL
        coordinates. A tag field will only appear if TAG is declared in the
        command line.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     An optional output file of perimeters in the planes indicated by the
        parameter values below. This file will contain fields PLANE, PVALUE, PTN,
        XP, YP and ZP. Note that XP, YP and ZP are GLOBAL coordinates. A tag field
        will only appear if TAG is declared in the command line. AT LEAST ONE
        OUTPUT FILE MUST BE SPECIFIED.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        PLANE:     Required field in PERIMIN. Plane identifier. This identifier must be such
        that, when the values are in ascending order, the planes are in sequence.
        PLANE will often be the same as X, Y or Z but cannot be the same field. It
        may be necessary to copy a field by using GENTRA.
        required: Yes; default: ; range: 

        PVALUE:     Required field in PERIMIN. Perimeter ID value. Note that there can be more
        than one perimeter in a plane but that, on input, they must not cross
        either themselves or each other.
        required: Yes; default: ; range: 

        PTN:     Required field in PERIMIN. Point number in perimeter.
        required: Yes; default: ; range: 

        X:     Required field in PERIMIN. Global X-coordinate.
        required: Yes; default: ; range: 

        Y:     Required field in PERIMIN. Global Y-coordinate.
        required: Yes; default: ; range: 

        Z:     Required field in PERIMIN. Global Z-coordinate.
        required: Yes; default: ; range: 

        TAG:     Optional field. Ore body identifying value. If declared in the command
        line, it must appear in PERIMIN and will appear in the output file(s).
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DIRECT:     Required parameter which specifies the plane of the output perimeters. 1 =
        XY, 2 = XZ, 3 = YZ
        required: Yes; default: 1; range: 1,3

        STARTPOS:     Required parameter which specifies the value of the coordinate
        perpendicular to the output plane for the first output plane.
        required: Yes; default: ; range: Undefined

        STEPSIZE:     Required parameter which specifies the distance between output planes.
        required: Yes; default: ; range: Undefined

        NUMPLANE:     Required parameter which specifies the number of output planes. Note that
        no harm is done if output planes are requested which do not intersect the
        input perimeters.
        required: Yes; default: ; range: Undefined

        MAXDIST:     Optional parameter which specifies a distance between input planes beyond
        which ore bodies are not to be linked. That is, if two adjacent input
        planes are more than this distance apart where they intersect an output
        plane, the perimeters on either side of the gap will be closed off. The
        distance between two adjacent input planes is defined for this purpose as
        the distance between the closest pair of points which could logically be
        joined.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pertra).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PERTRA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def picdir(self,
                out_o,
                file_f='FILENAM',
                append_p=0,
                print_p=0,
                sort_p=0,
                longname_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output catalogue file, giving list of files.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FILE:     Optional name for the field that is to contain the file names. The default
        is "'FILENAM", i.e. PICDIR will produce a catalogue file.
        required: No; default: FILENAM; range: 

        ----------
        PARAMETERS
        ----------

        APPEND:     If set to 1 then selected field names will be appended to the OUT file,
        provided it exists and has a valid DD (0).
        required: No; default: 0; range: 0,1

        PRINT:     Option Description 0 No display of matching file names >0 Display file
        names as they are selected. (0)
        required: No; default: 0; range: 0,1

        SORT:     If set to 1 then the output file will be sorted after all file names have
        been written to it (0).
        required: No; default: 0; range: 0,1

        LONGNAME:     If set to 1 then the fields LOGICAL (5A4) and SYSTEM (32A4) will be added
        to the output file. LOGICAL is the full, logical (long) name of the file.
        SYSTEM contains the full path name of the file. The default for LONGNAME
        is (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.picdir).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PICDIR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def picfld(self,
                in_i,
                out_o,
                fieldnam_f='FIELDNAM',
                print_p=0,
                append_p=0,
                sort_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file, from which fields are to be selected.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file, containing selected field names.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Optional name for the field in OUT that is to contain the selected field
        names. The default is "FIELDNAM".
        required: No; default: FIELDNAM; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     Option Description 0 No display of matching field names >0 Display field
        names as they are matched. (0)
        required: No; default: 0; range: 0,1

        APPEND:     If set to 1 then selected field names will be appended to the OUT file,
        provided it exists and has a valid DD (0).
        required: No; default: 0; range: 0,1

        SORT:     If set to 1 then the output file will be sorted after all field names have
        been written to it (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.picfld).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PICFLD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pitmod(self,
                wiretr_i,
                wirept_i,
                modelin_i,
                results_o,
                f1_f,
                density_p,
                modelou_o='optional',
                key_f='optional',
                density_f='DENSITY',
                f2_f='optional',
                f3_f='optional',
                f4_f='optional',
                f5_f='optional',
                xsubcell_p=1,
                ysubcell_p=1,
                resol_p=0,
                zorig_p=0,
                bheight_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Triangle file of update wireframe surface (DTM).
        required: Yes; default: ; range: 

        WIREPT:     Point file of pit wireframe triangulated surface.
        required: Yes; default: ; range: 

        MODELIN:     Block model for evaluation above wireframe.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     Evaluation results data, by bench.
        required: Yes; default: ; range: 

        MODELOU:     Block model portion inside pit.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        F1:     Numeric grade field 1.
        required: Yes; default: ; range: 

        KEY:     Key field - numeric.
        required: No; default: ; range: 

        DENSITY:     Density field.
        required: No; default: DENSITY; range: 

        F2:     Numeric grade field 2.
        required: No; default: ; range: 

        F3:     Numeric grade field 3.
        required: No; default: ; range: 

        F4:     Numeric grade field 4.
        required: No; default: ; range: 

        F5:     Numeric grade field 5.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DENSITY:     Default DENSITY value.
        required: Yes; default: 1; range: 0,9999

        XSUBCELL:     Cell division in X direction (1). Max 20.
        required: No; default: 1; range: 1,20

        YSUBCELL:     Cell division in Y direction (1). Max 20.
        required: No; default: 1; range: 1,20

        RESOL:     Defines boundary resolution in direction perpendicular to plane of
        filling. =(0) - precise boundary location. = N - boundary rounded to
        nearest 1/Nth of parent cell size.
        required: No; default: 0; range: Undefined

        ZORIG:     Specify an alternative bench origin.
        required: No; default: 0; range: Undefined

        BHEIGHT:     Specify an alternative bench height.
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pitmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PITMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pitres(self,
                results_i,
                model_i='optional',
                aux_f='optional',
                aaux_f='optional',
                baux_f='optional',
                grade_f='optional',
                row_f='optional',
                position_p=0,
                tsquash_p=0,
                gsquash_p=0,
                squash_p='optional',
                gunit_p='optional',
                munit_p='optional',
                elemnt_p='optional',
                tround_p=0,
                gdec_p=2,
                mround_p=0,
                sdec_p=0,
                lines_p=50,
                width_p='optional',
                numtab_p='optional',
                volume_p=0,
                tonnesa_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        RESULTS:     Input results file. In standard format as per Tabres
        required: Yes; default: ; range: 

        MODEL:     Optional input model file to obtain spatial location parameters (eg RL)
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        AUX:     Auxiliary classification field. An additional "rocktype" field. Create
        separately - often retrieval criteria are used.
        required: No; default: ; range: 

        AAUX:     Auxiliary area classification field. Creates separate table for each field
        value, integers only. Mutually exclusive with BAUX
        required: No; default: ; range: 

        BAUX:     Auxiliary bench classification field. Creates separate table for each
        Plane, using values of this field in each one, integers only. Mutually
        exclusive with AAUX
        required: No; default: ; range: 

        GRADE:     Default grade field
        required: No; default: ; range: 

        ROW:     Field to use in place of 'Number' in tables, ie replace RL, East, or North
        by something else.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        POSITION:     Location in cell of reference position. (0) 0 = base of cell 0.5 = centre
        of cell 1 = top of cell
        required: No; default: 0; range: 0,1

        TSQUASH:     An amount subtracted from tonnes field width [10], +ve or -ve. Default is
        0
        required: No; default: 0; range: Undefined

        GSQUASH:     An amount subtracted from grade field width [7], +ve or -ve. Default is 0
        required: No; default: 0; range: Undefined

        SQUASH:     An amount subtracted from metal field widths [9
        required: No; default: ; range: Undefined

        GUNIT:     Default grade units, in quotes. One of 'g/t', 'ppm', 'oz/t', '%', or 'dwt'
        required: No; default: ; range: Undefined

        MUNIT:     Default metal units, in quotes. One of 'oz', 'kg', or 'tonn'
        required: No; default: ; range: Undefined

        ELEMNT:     Default grade element/compound symbol, in quotes. Maximum of 4 characters
        required: No; default: ; range: Undefined

        TROUND:     Rounding control for tonnes field. 1 = round to 10's 2 = 100's 3 = 1000's
        4 = use units of 1000. Default 0 [none]
        required: No; default: 0; range: 0,4

        GDEC:     Decimal places for grade field. 0 = 0 decimal place, 1 = 1 decimal place
        Default 2 decimal places
        required: No; default: 2; range: 0,4

        MROUND:     Rounding control for metal field. 1 = use 0 decimal places for kg units
        [def 1] 2 = round to 10's, 3 = 100's 4 = 1000's, Default 0 [none]
        required: No; default: 0; range: 0,4

        SDEC:     Decimal places for strip ratio field. 0 = 0 decimal place Default 1
        decimal place
        required: No; default: 0; range: Undefined

        LINES:     Number of lines per page, not including headers. (50)
        required: No; default: 50; range: Undefined

        WIDTH:     Page width in mm, max of 240.
        required: No; default: ; range: Undefined

        NUMTAB:     Optional table number, 1-99, for display.
        required: No; default: ; range: 1,99

        VOLUME:     1 = report in volumes rather than tonnes. (0)
        required: No; default: 0; range: 0,1

        TONNESA:     1 = report individual tonnage components for each grade (ie TonnesA,
        TonnesB, etc rather than just overall tonnes of a cell, ie Tonnes. (0)
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pitres).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PITRES ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotan(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                value_f,
                ndec_p,
                xoffset_p,
                yoffset_p,
                angle_p,
                charsz_f='optional',
                symbol_p=92,
                symsize_p=5,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field to be plotted along X axis.
        required: Yes; default: X; range: 

        Y:     Field to be plotted along Y axis.
        required: Yes; default: Y; range: 

        VALUE:     Field for annotation.
        required: Yes; default: ; range: 

        CHARSZ:     Field to determine character size of annotation. If present it overrides
        the value of the CHARSIZE parameter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NDEC:     Decimal places for annotation.
        required: Yes; default: ; range: Undefined

        XOFFSET:     Annotation offset from point in X in millimetres.
        required: Yes; default: ; range: Undefined

        YOFFSET:     Annotation offset from point in Y in millimetres.
        required: Yes; default: ; range: Undefined

        ANGLE:     Annotation angle from X axis.
        required: Yes; default: 0; range: 0, 360

        SYMBOL:     Plotted symbol at each point. Default (92). Point symbol number 91 :
        Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 :
        Diamond 97 : Star ( ) 98 : Pie Segment 112 : Hexagon
        required: No; default: 92; range: Undefined

        SYMSIZE:     Symbol size in millimetres (5). 0 for no symbol.
        required: No; default: 5; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: 1,64

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotan).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTAN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotar(self,
                in_i,
                proto_i,
                plot_o,
                xfld_f,
                yfld_f,
                lenfld_f,
                azifld_f,
                ascale_p,
                drawhead_p=0,
                position_p=3,
                headsize_p=3,
                headangl_p=90,
                charsize_p=4,
                aspratio_p=0.9,
                colour_p=1,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file. Must contain the fields defined by parameters XFLD, YFLD,
        LENFLD and AZIFLD.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last six values set in PROTO , then corresponding parameters need
        not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        XFLD:     Field to be plotted along X axis.
        required: Yes; default: ; range: 

        YFLD:     Field to be plotted along Y axis.
        required: Yes; default: ; range: 

        LENFLD:     Field controlling arrow length.
        required: Yes; default: ; range: 

        AZIFLD:     Field controlling arrow direction in degrees clockwise from north.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ASCALE:     Scale for LENFLD in data units per plotted millimetre.
        required: Yes; default: ; range: Undefined

        DRAWHEAD:     Controls plotting of arrow head, 0 - No Arrow Head to be plotted. 1 -
        Arrow Head to be plotted. Default: (0)
        required: No; default: 0; range: 0,1

        POSITION:     Position at which arrow is plotted relative to point X Y: Option
        Description 1 - Plot Arrow Head at position [X,Y]. 2 - Plot Arrow Tail at
        position [X,Y]. 3 - Centre Arrow at position [X,Y]. Default (3)
        required: No; default: 3; range: 1,3

        HEADSIZE:     Length in millimetres of arrow head. Default: (3.0)
        required: No; default: 3; range: Undefined

        HEADANGL:     Angle in degrees between left and right lines of arrow head. Default: (90)
        required: No; default: 90; range: 1,90

        CHARSIZE:     Character size in millimeters. Default: (4)
        required: No; default: 4; range: Undefined

        ASPRATIO:     Aspect ratio, width / hieght for characters. Default: (0.9)
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot. Default: (1) NOTE: This variable name
        was missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: 1,64

        XMIN:     Minimum value of X for plot. Not required if the values XMIN, XMAX, YMIN,
        YMAX, XSCALE, YSCALE are already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot. Not required if the values XMIN, XMAX, YMIN,
        YMAX, XSCALE, YSCALE are already in the prototype.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot. Not required if the values XMIN, XMAX, YMIN,
        YMAX, XSCALE, YSCALE are already in the prototype.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot. Not required if the values XMIN, XMAX, YMIN,
        YMAX, XSCALE, YSCALE are already in the prototype.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimeter. Not required if the values
        XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE are already in the prototype.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimeter. Not required if the values
        XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE are already in the prototype.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotar).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTAR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotcn(self,
                plot_o,
                proto_i='optional',
                point_i='optional',
                wiretr_i='optional',
                wirept_i='optional',
                model_i='optional',
                string_o='optional',
                x_f='optional',
                y_f='optional',
                z_f='optional',
                field_f='optional',
                seam_f='optional',
                plane_p='XY',
                position_p='optional',
                top_p='optional',
                bottom_p='optional',
                system_p=2,
                gridinc_p='optional',
                cmin_p='optional',
                cmax_p='optional',
                cint_p='optional',
                hilight_p='optional',
                hi_p='optional',
                charsz_p=3.5,
                colour_p=1,
                ndp_p='optional',
                annotate_p=100,
                density_p=0,
                maxlink_p='+',
                extrap_p=0,
                gsmooth_p=0,
                power_p=2,
                radius_p='+',
                pvalst_p=1,
                pvalinc_p=1,
                xscale_p='optional',
                yscale_p='optional',
                append_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last 6 values set in PROTO , then corresponding parameters need
        not be set. Optional only if APPEND=1
        required: No; default: ; range: 

        POINT:     Input raw data point file.
        required: No; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: No; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: No; default: ; range: 

        MODEL:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK and FIELD field.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        STRING:     Optional output string file. If selected this file be written out as well
        as the plot file and will contain fields XP, YP, ZP, PTN and PVALUE. The
        value of PVALUE field is determined from the PVALST and PVALINC
        parameters.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X field in input point file. Only required if contouring raw data.
        required: No; default: ; range: 

        Y:     Y field in input point file. Only required if contouring raw data.
        required: No; default: ; range: 

        Z:     Z field in input point file. Only required if contouring raw data, and the
        PLANE parameter is supplied.
        required: No; default: ; range: 

        FIELD:     Field to be contoured. Only required if contouring raw data or solid
        model.
        required: No; default: ; range: 

        SEAM:     Seam ID field. Only required if contouring solid model.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLANE:     Plane, 'XY', 'XZ' or 'YZ' through the data for projection of data onto a
        plane.
        required: No; default: XY; range: Undefined

        POSITION:     Position of the plane. For example if the XY plane is used a Z position is
        needed. Only required if neither TOP nor BOTTOM are specified.
        required: No; default: ; range: Undefined

        TOP:     Value of FIELD for which top of seam contour required. Only required if
        neither POSITION nor BOTTOM appear.
        required: No; default: ; range: Undefined

        BOTTOM:     Value of FIELD for which base of seam contour required. Only required if
        neither POSITION nor TOP appear. Both TOP and BOTTOM set for an isopach.
        required: No; default: ; range: Undefined

        SYSTEM:     If set to 3 then perimeters in the STRING STRING file are treated as true
        3D. eg if the graphics display is showing a YZ plane then a perimeter in
        this plane should have YP and ZP varing with XP constant. The default is
        (2). Under the default system XP and YP vary and ZP is constant, whichever
        plane is displayed.
        required: No; default: 2; range: 2,3

        GRIDINC:     Mesh interval in user data units (-).
        required: No; default: ; range: Undefined

        CMIN:     Minimum contour value in user data units.
        required: No; default: ; range: Undefined

        CMAX:     Maximum contour value in user data units.
        required: No; default: ; range: Undefined

        CINT:     Contour interval in user data units.
        required: No; default: ; range: Undefined

        HILIGHT:     Highlight every Nth contour with HI.
        required: No; default: ; range: Undefined

        HI:     Colour [as 'pen' number] for highlighting.
        required: No; default: ; range: Undefined

        CHARSZ:     Character size in millimetres for contour annotation (3.5).
        required: No; default: 3.5; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        NDP:     Number of decimal places for annotation.
        required: No; default: ; range: Undefined

        ANNOTATE:     Frequency of contour line annotation in millimetres (100).
        required: No; default: 100; range: Undefined

        DENSITY:     Maximum contour density in contour lines per millimetre. A default cutout
        is applied if not specified (0).
        required: No; default: 0; range: Undefined

        MAXLINK:     The maximum separation of points that will be joined by a triangle. By
        default a convex hull will be formed around all points (+).
        required: No; default: +; range: Undefined

        EXTRAP:     Distance to extrapolate the data before contouring in the plane of the
        contour (0).
        required: No; default: 0; range: Undefined

        GSMOOTH:     Smoothing factor to apply to the mesh data before contouring. A value
        between 0 and 1 will interpolate a result between the triangulated value
        at 0 and an inverse distance result for 1 (0).
        required: No; default: 0; range: Undefined

        POWER:     Interpolation power (2).
        required: No; default: 2; range: Undefined

        RADIUS:     Interpolation search radius (+).
        required: No; default: +; range: Undefined

        PVALST:     If STRING file requested, for the first string to be written PVALUE will
        be set to PVALST. For the following strings PVALUE is incremented by
        PVALINC (1.0).
        required: No; default: 1; range: Undefined

        PVALINC:     If STRING file requested, PVALUE value increment (1.0).
        required: No; default: 1; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        PRINT:     >0 to display the contouring information.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotcn).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTCN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotcx(self,
                plot_o,
                proto_i='optional',
                section_i='optional',
                bound_i='optional',
                point_i='optional',
                wiretr_i='optional',
                wirept_i='optional',
                model_i='optional',
                contour_i='optional',
                string_o='optional',
                x_f='optional',
                y_f='optional',
                z_f='optional',
                field_f='optional',
                seam_f='optional',
                plane_p='XY',
                position_p='optional',
                top_p='optional',
                bottom_p='optional',
                type_p=0,
                log_p=0,
                freq_p=0,
                system_p=2,
                section_p=0,
                dplus_p='optional',
                dminus_p='optional',
                xgorig_p='optional',
                ygorig_p='optional',
                zgorig_p='optional',
                gridhinc_p='optional',
                gridvinc_p='optional',
                gridinc_p='optional',
                nox_p='optional',
                noy_p='optional',
                cmin_p='optional',
                cmax_p='optional',
                cint_p='optional',
                hilight_p='optional',
                hi_p='optional',
                charsz_p=3.5,
                colour_p=1,
                ndp_p='optional',
                annotate_p=100,
                density_p=0,
                csmooth_p=0.1,
                maxlink_p='+',
                cellsamp_p=1,
                extrap_p=0,
                gsmooth_p=0,
                power_p=2,
                radius_p='+',
                b_p='optional',
                bcode_p=1001,
                pvalst_p=1,
                pvalinc_p=1,
                grcolr_p='optional',
                xgridint_p=0,
                ygridint_p=0,
                zgridint_p=0,
                xgridndp_p=0,
                ygridndp_p=0,
                zgridndp_p=0,
                xscale_p='optional',
                yscale_p='optional',
                vertexag_p=1,
                append_p=0,
                print_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last 6 values set in PROTO , then corresponding parameters need
        not be set. Optional only if APPEND=1
        required: No; default: ; range: 

        SECTION:     Optional section definition file.
        required: No; default: ; range: 

        BOUND:     Optional bounding perimeter. No contours will produced outside this
        perimeter. Must contain fields XP, YP, ZP, PTN and PVALUE. This file must
        contain only one perimeter, must be clockwise and must not be closed.
        required: No; default: ; range: 

        POINT:     Input raw data point file.
        required: No; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: No; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: No; default: ; range: 

        MODEL:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK and FIELD. If it is a Rotated
        Model then it must also include the fields X0, Y0, Z0, ANGLE1, ANGLE2,
        ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3.
        required: No; default: ; range: 

        CONTOUR:     Input file containing one or more of the following fields to specify
        control over contour output: CVALUE Individual contour values. CINT
        Contour interval. C Contour colour value. LINECODE Contour linecode 1001
        etc. CHARSZ Annotation character size. NDP Number of decimal places.
        ANNOTATE Frequency of contour line annotation in millimetres. DENSITY
        Maximum contour density in lines per millimetre. The contour specification
        will be interpreted in logarithmic values if NLOG>0 and frequency
        percentages if FREQ>0.0.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        STRING:     Optional output string file. If selected this file be written out as well
        as the plot file and will contain fields XP, YP, ZP, PTN and PVALUE. The
        value of PVALUE field is determined from the PVALST and PVALIN parameters.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X field in input point file. Only required if contouring raw data.
        required: No; default: ; range: 

        Y:     Y field in input point file. Only required if contouring raw data.
        required: No; default: ; range: 

        Z:     Z field in input point file. Only required if contouring raw data, and
        either the PLANE parameter or a section definition file is supplied.
        required: No; default: ; range: 

        FIELD:     Field to be contoured. Required for contouring raw data or solid model.
        Optional for contouring a wireframe.
        required: No; default: ; range: 

        SEAM:     Seam ID field. Only required if contouring solid model.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLANE:     Plane, 'XY', 'XZ' or 'YZ' through the data for projection of data onto a
        plane.
        required: No; default: XY; range: Undefined

        POSITION:     Position of the plane. For example if the XY plane is used a Z position is
        needed. Only required if neither TOP nor BOTTOM are specified.
        required: No; default: ; range: Undefined

        TOP:     Value of FIELD for which top of seam contour required. Only required if
        neither POSITION nor BOTTOM appear.
        required: No; default: ; range: Undefined

        BOTTOM:     Value of FIELD for which base of seam contour required. Only required if
        neither POSITION nor TOP appear. Both TOP and BOTTOM set for an isopach.
        required: No; default: ; range: Undefined

        TYPE:     Force the interpretation of the command line and contour specification
        file data: - derived from the parameters/files supplied Option Description
        0 command line parameters 1 contour values from CVALUE field 2 contour
        values from CVALUE field with repetition in cycles 3 major/minor contour
        intervals from CINT field.
        required: No; default: 0; range: 0,3

        LOG:     Logarithmic conversion of data to be contoured to base 10 [1] or base e
        [2], with the contour specification interpreted in logarithmic values.
        Default is no conversion (0).
        required: No; default: 0; range: 0,2

        FREQ:     Convert the data to be contoured to a frequency distribution, apply the
        specified contour values as percentages, and annotate the raw data values
        (0).
        required: No; default: 0; range: 0,1

        SYSTEM:     If set to 3 then perimeters in the BOUND and STRING files are treated as
        true 3D. eg if the graphics display is showing a YZ plane then a perimeter
        in this plane should have YP and ZP varing with XP constant. The default
        is (2). Under the default system XP and YP vary and ZP is constant,
        whichever plane is displayed.
        required: No; default: 2; range: 2,3

        SECTION:     Force the specification of a section definition if non-zero (0). The
        definition can also be selected from the section definition file, if
        supplied.
        required: No; default: 0; range: 0,1

        DPLUS:     The search distance measured in the increasing direction from the section
        definition plane.
        required: No; default: ; range: Undefined

        DMINUS:     The search distance measured in the decreasing direction from the section
        definition plane.
        required: No; default: ; range: Undefined

        XGORIG:     Grid origin of mesh in user data units on the horizontal plotted axis. If
        a section definition is specified, then supply the true X coordinate (-).
        required: No; default: ; range: Undefined

        YGORIG:     Grid origin of mesh in user data units on the vertical plotted axis. If a
        section definition is specified, then supply the true Y coordinate (-).
        required: No; default: ; range: Undefined

        ZGORIG:     Grid origin of mesh in user data units in the true Z coordinate for a
        section definition (-).
        required: No; default: ; range: Undefined

        GRIDHINC:     Grid interval of mesh in user data units on the horizontal plotted axis
        (-).
        required: No; default: ; range: Undefined

        GRIDVINC:     Grid interval of mesh in user data units on the vertical plotted axis (-).
        required: No; default: ; range: Undefined

        GRIDINC:     Alternate specification of regular mesh interval in user data units (-).
        required: No; default: ; range: Undefined

        NOX:     Maximum number of mesh intervals on the horizontal plotted axis (-).
        required: No; default: ; range: Undefined

        NOY:     Maximum number of mesh intervals on the vertical plotted axis (-).
        required: No; default: ; range: Undefined

        CMIN:     Minimum contour value in user data units.
        required: No; default: ; range: Undefined

        CMAX:     Maximum contour value in user data units.
        required: No; default: ; range: Undefined

        CINT:     Contour interval in user data units.
        required: No; default: ; range: Undefined

        HILIGHT:     Highlight every Nth contour with HI.
        required: No; default: ; range: Undefined

        HI:     Colour [as 'pen' number] for highlighting.
        required: No; default: ; range: Undefined

        CHARSZ:     Character size in millimetres for contour annotation (3.5).
        required: No; default: 3.5; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        NDP:     Number of decimal places for annotation.
        required: No; default: ; range: Undefined

        ANNOTATE:     Frequency of contour line annotation in millimetres (100).
        required: No; default: 100; range: Undefined

        DENSITY:     Maximum contour density in contour lines per millimetre. A default cutout
        is applied if not specified (0).
        required: No; default: 0; range: Undefined

        CSMOOTH:     Smoothing factor to apply in contour generation by controlling the maximum
        step size in a mesh interval. A value of 0.1 will produce a smooth
        contour, 0.5 will produce a coarse contour. Use one of 0.1, 0.25 0.5
        (0.1).
        required: No; default: 0.1; range: Undefined

        MAXLINK:     The maximum separation of points that will be joined by a triangle. By
        default a convex hull will be formed around all points (+).
        required: No; default: +; range: Undefined

        CELLSAMP:     The number of intervals to sample cells to approximate the subcell
        variation for orthogonal plane contouring of models (1).
        required: No; default: 1; range: Undefined

        EXTRAP:     Distance to extrapolate the data before contouring in the plane of the
        contour (0).
        required: No; default: 0; range: Undefined

        GSMOOTH:     Smoothing factor to apply to the mesh data before contouring. A value
        between 0 and 1 will interpolate a result between the triangulated value
        at 0 and an inverse distance result for 1 (0).
        required: No; default: 0; range: 0,1

        POWER:     Interpolation power (2).
        required: No; default: 2; range: Undefined

        RADIUS:     Interpolation search radius (+).
        required: No; default: +; range: Undefined

        B:     Colour for plotting boundary outline (-).
        required: No; default: ; range: Undefined

        BCODE:     Linecode for plotting boundary outline (1001).
        required: No; default: 1001; range: Undefined

        PVALST:     If STRING file requested, for the first string to be written PVALUE will
        be set to PVALST. For the following strings PVALUE is incremented by
        PVALINC (1.0).
        required: No; default: 1; range: Undefined

        PVALINC:     If STRING file requested, PVALUE value increment (1.0).
        required: No; default: 1; range: Undefined

        GRCOLR:     Preferred grid colour where a grid is to be plotted for a specified
        section definition (-).
        required: No; default: ; range: Undefined

        XGRIDINT:     X grid interval, 0 no X grid (0).
        required: No; default: 0; range: Undefined

        YGRIDINT:     Y grid interval, 0 no Y grid (0).
        required: No; default: 0; range: Undefined

        ZGRIDINT:     Z grid interval, 0 no Z grid (0).
        required: No; default: 0; range: Undefined

        XGRIDNDP:     X grid number of decimal places (0).
        required: No; default: 0; range: Undefined

        YGRIDNDP:     Y grid number of decimal places (0).
        required: No; default: 0; range: Undefined

        ZGRIDNDP:     Z grid number of decimal places (0).
        required: No; default: 0; range: Undefined

        XSCALE:     X scale in user data units per millimetre. If specified here or in PROTO
        this value will override section limits.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre. If specified here or in PROTO
        this value will override section limits.
        required: No; default: ; range: Undefined

        VERTEXAG:     Controls vertical exaggeration when a section definition file is included.
        This must be set to allow different scales. The default is forced equal
        scales (1). If the input model is a Rotated Model then the process will
        always set VERTEXAG to 1 and display a warning message. = 0 allows
        different scales for both axes determined by XSCALE and YSCALE if provided
        or else by filling the data area to the section limits. > 0 sets value of
        XSCALE/YSCALE.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        PRINT:     >0 to display contouring information. 1 contour control file 2 mesh values
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotcx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTCX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotda(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                value_f='optional',
                vmax_p=2.5,
                symbol_p=91,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field to be plotted along X axis.
        required: Yes; default: ; range: 

        Y:     Field to be plotted along Y axis.
        required: Yes; default: ; range: 

        VALUE:     Field to be used for defining symbol size.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VMAX:     VALUE value for 2.5 millimetre diameter symbol (2.5).
        required: No; default: 2.5; range: Undefined

        SYMBOL:     Plotted symbol at point. Default (91). Point symbol number 91 : Circle 92
        : Cross [+] 93 : Cross [x] 94 : Triangle 95 : Box 96 : Diamond 97 : Star [
        ] 98 : Pie Segment 112 : Hexagon
        required: No; default: 91; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotda).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTDA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotfr(self,
                proto_i,
                plot_o,
                xinc_p,
                yinc_p,
                ndx_p,
                ndy_p,
                igrid_p,
                noxaxis_p='optional',
                noyaxis_p='optional',
                xgstart_p='optional',
                ygstart_p='optional',
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XINC:     Grid increment on X axis.
        required: Yes; default: ; range: Undefined

        YINC:     Grid increment on Y axis.
        required: Yes; default: ; range: Undefined

        NDX:     Annotation decimal places on X axis.
        required: Yes; default: ; range: Undefined

        NDY:     Annotation decimal places on Y axis.
        required: Yes; default: ; range: Undefined

        IGRID:     Option Description 0 frame only; 1 frame + outwards ticks; 2 frame +
        crosses at grid intersections; 3 frame + inwards ticks; 4 grid; 5-9 as 0-4
        minus frame. 10 as 4 but anno- tation parallel to grid lines. 11-2 0 as
        1-10 with annotation on right and top as well. Negative values of IGRID
        give an additional frame around the full plot area.
        required: Yes; default: 0; range: 0,20

        NOXAXIS:     Suppresses plotting of X-axis.
        required: No; default: ; range: Undefined

        NOYAXIS:     Suppresses plotting of Y-axis.
        required: No; default: ; range: Undefined

        XGSTART:     Start point of X grid, ticks Default is XMIN.
        required: No; default: ; range: Undefined

        YGSTART:     Start point of Y grid, ticks Default is YMIN.
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotfr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTFR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotft(self,
                proto_i,
                plot_o,
                xtype_p,
                ytype_p,
                ndx_p,
                ndy_p,
                igridx_p,
                igridy_p,
                noxaxis_p=0,
                noyaxis_p=0,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XTYPE:     Option Description 1 linear 2 log base 10 3 log base e 4 probability x
        scale Min/max limits must be defined in the appropriate transformed units
        (e.g. logs, or for probability, phi unit values in the range of say -4 to
        +4)
        required: Yes; default: 1; range: 1,4

        YTYPE:     Option Description 1 linear 2 log base 10 3 log base e 4 probability y
        scale. Min/max limits must be defined in the appropriate transformed units
        (e.g. logs, or for probability, phi unit values in the range of say -4 to
        +4)
        required: Yes; default: 1; range: 1,4

        NDX:     Annotation decimal places on X axis.
        required: Yes; default: ; range: Undefined

        NDY:     Annotation decimal places on Y axis.
        required: Yes; default: ; range: Undefined

        IGRIDX:     Option Description 0 frame only 1 frame + outwards ticks 2 frame + inwards
        and outwards tick 3 frame + inwards tick 4 grid 5-9 as 0-4 minus frame.
        Negative value will cause outer frame around full plot area.
        required: Yes; default: 0; range: 0,10

        IGRIDY:     Option Description 0 no numbering 1 outwards ticks 2 inwards and outwards
        ticks 3 inwards ticks 4 grid;
        required: Yes; default: ; range: 0,4

        NOXAXIS:     >0 suppresses plotting of X-axis (0).
        required: No; default: 0; range: Undefined

        NOYAXIS:     >0 suppresses plotting of Y-axis (0).
        required: No; default: 0; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotft).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTFT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotfx(self,
                plot_o,
                xinc_p,
                yinc_p,
                ibase_p,
                proto_i='optional',
                ndx_p=0,
                ndy_p=0,
                ticklx_p=0,
                tickly_p=0,
                xgstart_p='optional',
                ygstart_p='optional',
                tblock_p=0,
                emptytb_p=0,
                tunits_p=1,
                tscale_p='optional',
                lblock_p=0,
                tpos_p=1,
                lpos_p=1,
                xgid_p='optional',
                ygid_p='optional',
                drawnum_p='optional',
                logo_p=0,
                splan_p=0,
                pldist_p='optional',
                prdist_p='optional',
                dminus_p='optional',
                dplus_p='optional',
                charsize_p=2.5,
                aspratio_p=1.1,
                append_p=0,
                colour_p=1,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional',
                plx1_p='optional',
                plx2_p='optional',
                ply1_p='optional',
                ply2_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XINC:     Grid increment on X axis.
        required: Yes; default: ; range: Undefined

        YINC:     Grid increment on Y axis.
        required: Yes; default: ; range: Undefined

        IBASE:     Baseplan size: Option Description 1 A0 horizontal - 1000 x 800 mm 2 A0
        vertical - 800 x 1000 mm 3 B1 horizontal - 900 x 650 mm 4 B1 vertical -
        650 x 900 mm 5 A1 horizontal - 800 x 560 mm 6 A1 vertical - 560 x 800 mm 7
        A3 horizontal - 350 x 250 mm 8 A3 vertical - 250 x 350 mm 9 user defined
        10 user defined with single thickness title 11 user defined with no outer
        frame For options 1-8 a plot prototype file is not required, but
        parameters xmin , xmax , xscale , ymin , ymax , yscale must be entered.
        required: Yes; default: 1; range: 1,11

        NDX:     Annotation decimal places on X axis (0).
        required: No; default: 0; range: Undefined

        NDY:     Annotation decimal places on Y axis (0).
        required: No; default: 0; range: Undefined

        TICKLX:     Length of grid ticks on X axis in mm. = 0 for full lines (0).
        required: No; default: 0; range: Undefined

        TICKLY:     Length of grid ticks on Y axis in mm. = 0 for full lines (0).
        required: No; default: 0; range: Undefined

        XGSTART:     Start point of X grid, ticks Default is XMIN. To suppress plotting of
        X-axis set XGSTART to '+'.
        required: No; default: ; range: Undefined

        YGSTART:     Start point of Y grid, ticks Default is YMIN. To suppress plotting of
        Y-axis set YGSTART to '+'.
        required: No; default: ; range: Undefined

        TBLOCK:     Option Description 0 for no title block 1 for standard title block 2 for
        basic title block 3 for small title block (0). Titles are prompted for
        interactively.
        required: No; default: 0; range: 0,3

        EMPTYTB:     Option Description 0 for filled title block 1 for empty title block
        required: No; default: 0; range: 0,1

        TUNITS:     Units for scale bar in title box.
        required: No; default: 1; range: Undefined

        TSCALE:     Scale to be plotted in the title box and used for the scale bar. This is a
        natural scale i.e. for 1:1000 enter 1000. If TUNITS is not specified then
        units are assumed to be metres. Note if TUNITS is used then TSCALE is not
        required. If used it will overwrite the value calculated by TUNITS. The
        default is XSCALE 1000 (-).
        required: No; default: ; range: Undefined

        LBLOCK:     Option Description 0 for no legend block 1 for standard legend block
        [100x100mm] 2 for wide legend block [200x100mm]
        required: No; default: 0; range: 0,3

        TPOS:     Title block position; Option Description 1 for bottom right 2 for bottom
        left 3 for top left 4 for top right; (1)
        required: No; default: 1; range: 1,4

        LPOS:     Legend position; Option Description 1 for bottom right 2 for bottom left 3
        for top left 4 for top right 5 same as title box but to side 6 same as
        title box but above/below; (1)
        required: No; default: 1; range: 1,6

        XGID:     Text following grid number on X axis, max 4 characters, enclosed in single
        quotes if alpha, eg. 'mE'
        required: No; default: ; range: Undefined

        YGID:     Text following grid number on X axis, max 4 characters, enclosed in single
        quotes if alpha, eg. 'mN'
        required: No; default: ; range: Undefined

        DRAWNUM:     Plot drawing number, max of 4 characters.
        required: No; default: ; range: Undefined

        LOGO:     Plot logo; Option Description 0 for none 1 to plot logo (0). This will be
        prompted for following titles.
        required: No; default: 0; range: 0,1

        SPLAN:     Selection of plan window. If selected then the following 6 parameters must
        also be set. Option Description 0 no section plan window 1 plot plan
        window. (0)
        required: No; default: 0; range: 0,1

        PLDIST:     Width of plan window in user data units. Must equal PLDIST for
        corresponding PLOTSX command.
        required: No; default: ; range: Undefined

        PRDIST:     Section projection distance. Should equal DISTANCE on the PLOTSX command.
        Horizontal grid lines are drawn in the plan window along the section line
        and at PRDIST either side of it.
        required: No; default: ; range: Undefined

        DMINUS:     Negative distance from section plane. For sections where PRDIST differs on
        either side. If not specified then PRDIST will be used.
        required: No; default: ; range: Undefined

        DPLUS:     Positive distance from section plane. For sections where PRDIST differs on
        either side. If not specified then PRDIST will be used.
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres of grid annotation (2.5).
        required: No; default: 2.5; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (1.1).
        required: No; default: 1.1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, assuming it exists and is a proper plot file. (0)
        required: No; default: 0; range: 0,1

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        PLX1:     X Co-ordinate at start of section line. Must equal X1 on PLOTSX command.
        required: No; default: ; range: Undefined

        PLX2:     X Co-ordinate at end of section line. Must equal X2 on PLOTSX command.
        required: No; default: ; range: Undefined

        PLY1:     Y Co-ordinate at start of section line. Must equal Y1 on PLOTSX command.
        required: No; default: ; range: Undefined

        PLY2:     Y Co-ordinate at end of section line. Must equal Y2 on PLOTSX command.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotfx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTFX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotgr(self,
                proto_i,
                plot_o,
                angle_p,
                xstart_p,
                xinc_p,
                xend_p,
                ystart_p,
                yinc_p,
                yend_p,
                ndec_p,
                x0_p,
                y0_p,
                xr0_p,
                yr0_p,
                factor_p=1,
                noannot_p=0,
                xoffset_p='optional',
                yoffset_p='optional',
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ANGLE:     Rotation angle in degrees, measured from the rotated axes towards the X-Y
        plot axes.
        required: Yes; default: ; range: 0,360

        XSTART:     First required line in rotated co-ordinate system X direction. Set XSTART
        , XINC , XEND all to 0 for no X lines.
        required: Yes; default: ; range: Undefined

        XINC:     Increment between grid lines in rotated co-ordinate system X direction.
        Set to 0 for one line only.
        required: Yes; default: ; range: Undefined

        XEND:     Last required line in rotated co-ordinate system X direction. Set to
        XSTART for one line only.
        required: Yes; default: ; range: Undefined

        YSTART:     First required line in rotated co-ordinate system Y direction. Set YSTART
        , YINC , YEND all to 0 for no Y lines.
        required: Yes; default: ; range: Undefined

        YINC:     Increment between grid lines in rotated co-ordinate system Y direction.
        Set to 0 for one line only.
        required: Yes; default: ; range: Undefined

        YEND:     Last required line in rotated co-ordinate system Y direction. Set to
        YSTART for one line only.
        required: Yes; default: ; range: Undefined

        NDEC:     Number of decimal places for annotation.
        required: Yes; default: ; range: Undefined

        X0:     X co-ordinate of known point in both systems, in unrotated co-ordinate
        system.
        required: Yes; default: ; range: Undefined

        Y0:     Y co-ordinate of known point in both systems, in unrotated co-ordinate
        system.
        required: Yes; default: ; range: Undefined

        XR0:     X co-ordinate of known point in both systems, in rotated co-ordinate
        system.
        required: Yes; default: ; range: Undefined

        YR0:     Y co-ordinate of known point in both systems, in rotated co-ordinate
        system.
        required: Yes; default: ; range: Undefined

        FACTOR:     The rotated co-ordinate system units will be e.g. 0.3048 for a grid in
        feet on an unrotated grid in metres (1).
        required: No; default: 1; range: Undefined

        NOANNOT:     Option Description 1 do not plot annotation on lines (0).
        required: No; default: 0; range: 0,1

        XOFFSET:     The offset in millimetres of the start of the annotation from the start of
        each grid line measured along the line. [Default=1.0 CHARSIZE].
        required: No; default: ; range: Undefined

        YOFFSET:     The offset in millimetres of the start of the annotation from the start of
        each grid line measured at right angles to the line. [Default=0.5
        CHARSIZE].
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio [width to ht.] for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotgr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTGR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plothi(self,
                in_i,
                proto_i,
                plot_o,
                y_f,
                x1_f,
                x2_f,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        Y:     Field to be plotted in Y (FREQENCY if file generated by HISTOG).
        required: Yes; default: ; range: 

        X1:     Field marking bin start (LOWER if file generated by HISTOG).
        required: Yes; default: ; range: 

        X2:     Field marking bin end (UPPER if file generated by HISTOG).
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plothi).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTHI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotli(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                linecode_p=1,
                close_p=0,
                symbol_p=92,
                symsize_p=3,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Line X co-ordinate.
        required: Yes; default: ; range: 

        Y:     Line Y co-ordinate.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINECODE:     Line Type to be used to join each point. Default (1). Line Types: Option
        Description 1 Solid line 2 Bold line 3 Dashed line 4 Dotted line 5 Dot-
        Dash line
        required: No; default: 1; range: 1,5

        CLOSE:     Option Description 1 joins the first and last points [for perimeters].
        required: No; default: 0; range: 0,1

        SYMBOL:     Plotted symbol at each point. Default (92). Point symbol number 91 :
        Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 :
        Diamond 97 : Star ( ) 98 : Pie Segment
        required: No; default: 92; range: 91,98

        SYMSIZE:     Symbol size in millimetres (3). Set to 0 for no symbol.
        required: No; default: 3; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotli).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTLI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotln(self,
                in_i,
                proto_i,
                plot_o,
                x1_f,
                y1_f,
                x2_f,
                y2_f,
                linecode_p=1,
                symbol_p=92,
                symsize_p=3,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X1:     Line segment start X co-ordinate.
        required: Yes; default: ; range: 

        Y1:     Line segment start Y co-ordinate.
        required: Yes; default: ; range: 

        X2:     Line segment end X co-ordinate.
        required: Yes; default: ; range: 

        Y2:     Line segment end Y co-ordinate.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINECODE:     Line Type to be used to join each point. Default (1). Line Types: Option
        Description 1 Solid line 2 Bold line 3 Dashed line 4 Dotted line 5 Dot-
        Dash line
        required: No; default: 1; range: 1,5

        SYMBOL:     Plotted symbol at each point. Default (92). Point symbol number 91 :
        Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 :
        Diamond 97 : Star ( ) 98 : Pie Segment
        required: No; default: 92; range: 91,98

        SYMSIZE:     Symbol size in millimetres (3). Set to 0 for no symbol.
        required: No; default: 3; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotln).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTLN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotmx(self,
                in_i,
                proto_i,
                plot_o,
                section_i='optional',
                annfile_i='optional',
                legend_i='optional',
                modcol_f='optional',
                charsize_p=2,
                charsmin_p=1.3,
                aspratio_p=1,
                colour_p=1,
                frame_p=1,
                shrink_p=0.5,
                annotate_p=0,
                anncol_p='optional',
                annpos_p=1,
                box_p=1,
                boxcol_p='optional',
                shade_p=0,
                symbol_p=92,
                symsize_p=0,
                grcolr_p='optional',
                xgridint_p=0,
                ygridint_p=0,
                zgridint_p=0,
                xgridndp_p=0,
                ygridndp_p=0,
                zgridndp_p=0,
                iconsize_p=25,
                title_p=1,
                titcol_p='optional',
                titchs_p=2,
                legend_p=1,
                legcol_p='optional',
                legchs_p='optional',
                append_p=0,
                xscale_p='optional',
                yscale_p='optional',
                vertexag_p=1,
                iconcol1_p='optional',
                iconcol2_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file. This must contain the fields XC, YC, ZC, XINX, YINC,
        ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK. If it is a Rotated Model
        then it must also include the fields X0, Y0, Z0, ANGLE1, ANGLE2, ANGLE3,
        ROTAXIS1, ROTAXIS2, ROTAXIS2.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE, (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last 6 values set in PROTO , then corresponding parameters need
        not be set.
        required: Yes; default: ; range: 

        SECTION:     Optional section definition file. Must contain the fields
        SVALUE,XCENTRE,YCENTRE, ZCENTRE,SDIP,SAZI,DPLUS,DMINUS,HSIZE,VSIZE
        required: No; default: ; range: 

        ANNFILE:     Optional annotation input file for specifying annotations as an
        alternative to the interactive input. Only used if the ANNOTATE=1.
        Compulsory fields: FIELD A8- Field to annotate. CHARSIZE N - Annotate
        character size. N - Annotate colour. XOFFSET N - X offset in mm. YOFFSET N
        - Y offset in mm. ANGLE N - Angle of annotation. NDP N - Number of decimal
        places. Optional fields if FIELD is numeric: LOWER N - Lower bound non-
        inclusive. UPPER N - Upper bound inclusive. LOWER and UPPER define the
        range on FIELD for which the particular annotation will plotted. Special
        values - and + may be used.
        required: No; default: ; range: 

        LEGEND:     Optional shading legend input file which may be used as an alternative to
        interactive input. Only used if the SHADE=1. Compulsory fields: FIELD A8-
        Field to annotate, must be N. CODE N - Fillcode to use for shading. LOWER
        N - Lower bound non-inclusive. UPPER N - Upper bound inclusive. LOWER and
        UPPER define the range on FIELD for which the particular shading will
        plotted. Special values - and + may be used. Optional fields: N - Used if
        CODE is one of 1100 box outline; 1101-1105 hatchings; to set colour
        otherwise the shading colour is determined from fillcode. SHRINK N -
        Amount in mm the shaded box will be shrunk inside the true cell outline.
        If missing and BOX=1 then shrink will be set to 2 times the SHRINK value.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        MODCOL:     Model colour field, used preferentially for plotting box outline, symbol
        and pattern shading.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CHARSIZE:     Default character size in millimetres (2).
        required: No; default: 2; range: Undefined

        CHARSMIN:     Minimum character size in millimetres (1.3).
        required: No; default: 1.3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (1.0).
        required: No; default: 1; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        FRAME:     nan
        required: No; default: 1; range: 0,1

        SHRINK:     box shrink to avoid overplot, in mm (0.5)
        required: No; default: 0.5; range: Undefined

        ANNOTATE:     nan
        required: No; default: 0; range: 0,1

        ANNCOL:     Default annotation colour (-).
        required: No; default: ; range: Undefined

        ANNPOS:     Reference position for annotation offsets (1). If a Rotated Model is used
        then ANNPOS should be set to 1.
        required: No; default: 1; range: 1,5

        BOX:     nan
        required: No; default: 1; range: 0,1

        BOXCOL:     Default box colour (-).
        required: No; default: ; range: Undefined

        SHADE:     nan
        required: No; default: 0; range: 0,1

        SYMBOL:     Plotted symbol. Default (92). Point symbol number 91 : Circle (o) 92 :
        Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( )
        98 : Pie Segment
        required: No; default: 92; range: Undefined

        SYMSIZE:     Symbol size in millimetres (0). 0 for no symbol.
        required: No; default: 0; range: Undefined

        GRCOLR:     Preferred grid colour (-).
        required: No; default: ; range: Undefined

        XGRIDINT:     X grid interval, 0 no X grid (0).
        required: No; default: 0; range: Undefined

        YGRIDINT:     Y grid interval, 0 no Y grid (0).
        required: No; default: 0; range: Undefined

        ZGRIDINT:     Z grid interval, 0 no Z grid (0).
        required: No; default: 0; range: Undefined

        XGRIDNDP:     X grid number of decimal places (0).
        required: No; default: 0; range: Undefined

        YGRIDNDP:     Y grid number of decimal places (0).
        required: No; default: 0; range: Undefined

        ZGRIDNDP:     Z grid number of decimal places (0).
        required: No; default: 0; range: Undefined

        ICONSIZE:     Icon size (25). 0 for no icon.
        required: No; default: 25; range: Undefined

        TITLE:     Option  Description  0  default title only  1  default plus prompted title
        2  prompted title only  3  no titles (1).
        required: No; default: 1; range: 0,3

        TITCOL:     Preferred title colour (-).
        required: No; default: ; range: Undefined

        TITCHS:     Preferred title character size (2).
        required: No; default: 2; range: Undefined

        LEGEND:     nan
        required: No; default: 1; range: 0,1

        LEGCOL:     Preferred legend colour (-).
        required: No; default: ; range: Undefined

        LEGCHS:     Preferred legend character size (-).
        required: No; default: ; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XSCALE:     X scale in user data units per millimetre. If specified here or in PROTO
        this value will override section limits.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre. If specified here or in PROTO
        this value will override section limits.
        required: No; default: ; range: Undefined

        VERTEXAG:     Controls vertical exaggeration. This must be set to allow different
        scales. The default is forced equal scales (1). If the input model is a
        Rotated Model then the process will always set VERTEXAG to 1 and display a
        warning message. = 0 allows different scales for both axes determined by
        XSCALE and YSCALE if provided or else by filling the data area to the
        section limits. > 0 sets value of XSCALE/YSCALE. = 1 forces equal scales.
        required: No; default: 1; range: Undefined

        ICONCOL1:     Preferred icon box colour (-).
        required: No; default: ; range: Undefined

        ICONCOL2:     Preferred icon section colour (-).
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotmx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTMX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotpa(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                desc_i='optional',
                apvalue_f='optional',
                aptn_f='optional',
                pcode_f='optional',
                f1_f='optional',
                f2_f='optional',
                f3_f='optional',
                f4_f='optional',
                f5_f='optional',
                linecode_p=1,
                noclose_p=0,
                symbol_p=92,
                symsize_p=0,
                annotate_p=0,
                ndp_p=0,
                ptnannot_p=0,
                extdis_p=4,
                ptnsize_p=2.5,
                charsize_p=4,
                aspratio_p=0.9,
                colour_p=14,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional',
                ndp1_p='optional',
                ndp2_p='optional',
                ndp3_p='optional',
                ndp4_p='optional',
                ndp5_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file. This must contain at least two numeric variables ( X and
        Y) for plotting against each other.
        required: Yes; default: ; range: 

        PROTO:     The prototype plot file, as input. If this does not contain plot scale
        information, then this must be provided through the optional parameters
        XMIN , XMAX , YMIN , YMAX , XSCALE , YSCALE.
        required: Yes; default: ; range: 

        DESC:     Optional input description file for the case of ANNOTATE=3
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     The line X co-ordinate.
        required: Yes; default: ; range: 

        Y:     The line Y co-ordinate.
        required: Yes; default: ; range: 

        APVALUE:     Field used for PVALUE annotation. Default is PVALUE.
        required: No; default: ; range: 

        APTN:     Field used for PTN annotation. Default is PTN.
        required: No; default: ; range: 

        PCODE:     Optional second perimeter keyfield. The field is of type Alphanumeric and
        4 characters. Both PCODE and PVALUE will be annotated by default unless
        APVALUE is specified.
        required: No; default: ; range: 

        F1:     First annotation field for ANNOTATE=3 case
        required: No; default: ; range: 

        F2:     Second annotation field.
        required: No; default: ; range: 

        F3:     Third annotation field.
        required: No; default: ; range: 

        F4:     Fourth annotation field.
        required: No; default: ; range: 

        F5:     Fifth annotation field.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINECODE:     Option Description 1 Narrow line. 2 Broad line.
        required: No; default: 1; range: 1,2

        NOCLOSE:     Option Description 0 joins the first and last points of the perimeter; =1
        does not join the first and last points of the perimeter (0).
        required: No; default: 0; range: 0,1

        SYMBOL:     Plots the symbol specified at each perimeter point (92). 91=o, 92=+, 93=x.
        required: No; default: 92; range: Undefined

        SYMSIZE:     Symbol size in millimetres (0).
        required: No; default: 0; range: Undefined

        ANNOTATE:     Option Description 0 no annotation 1 annotate within a break in the
        perimeter boundary 2 annotate along the inside of the perimeter boundary 3
        annotate in the 'centre' of the perimeter All fields to be plotted must be
        included in the Fn list taken from the DESC file. Default (0).
        required: No; default: 0; range: 0,3

        NDP:     Number of decimal places in the annotation if the annotation field is
        numeric (0).
        required: No; default: 0; range: Undefined

        PTNANNOT:     Option Description 0 no annotation; =1 annotate the perimeter with the
        perimeter point number (0).
        required: No; default: 0; range: 0,1

        EXTDIS:     distance along bisector of perimeter corners for annotation of perimeters.
        Negative to annotate outside the perimeter (4).
        required: No; default: 4; range: Undefined

        PTNSIZE:     annotation size for perimeter point number labelling. (2.5)
        required: No; default: 2.5; range: Undefined

        CHARSIZE:     Character size in millimetres (4).
        required: No; default: 4; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as "pen" number] for plot. (14) NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 14; range: Undefined

        XMIN:     Minimum value of X for plot.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        NDP1:     Number of decimal places in the first annotation field F1.
        required: No; default: ; range: Undefined

        NDP2:     Number of decimal places in the second annotation field F2.
        required: No; default: ; range: Undefined

        NDP3:     Number of decimal places in the third annotation field F3.
        required: No; default: ; range: Undefined

        NDP4:     Number of decimal places in the fourth annotation field F4.
        required: No; default: ; range: Undefined

        NDP5:     Number of decimal places in the fifth annotation field F5.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotpa).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTPA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotpe(self,
                in_i,
                proto_i,
                plot_o,
                afield_f='optional',
                sfield_f='optional',
                xp_f='optional',
                yp_f='optional',
                pcode_f='optional',
                symcode_f='optional',
                pfill_f='optional',
                linecode_p=1,
                noclose_p=0,
                symbol_p=92,
                symsize_p=0,
                annotate_p=0,
                axoffset_p=0,
                ayoffset_p=0,
                angle_p=0,
                ndp_p='optional',
                sylvalue_p='optional',
                sylscale_p=3,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional',
                fillcode_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input perimeter file. Must contain the fields XP, YP, ZP, PTN and PVALUE
        (numeric, explicit).
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        AFIELD:     Field used for annotation. Default is PVALUE.
        required: No; default: ; range: 

        SFIELD:     Field used for crest symbol plotting.
        required: No; default: ; range: 

        XP:     Field containing X coordinate.
        required: No; default: ; range: 

        YP:     Field containing Y coordinate.
        required: No; default: ; range: 

        PCODE:     The PCODE value will control the line code of each string. If used, it
        will override the LINECODE parameter.
        required: No; default: ; range: 

        SYMCODE:     The SYMCODE value will control the symbol used on each string. If used, it
        will override the SYMBOL parameter.
        required: No; default: ; range: 

        PFILL:     The PFILL value will control the filling of each string. If used, it will
        override the FILLCODE parameter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINECODE:     Option  Description  1  narrow line  2  broad line  3  dashed line  4
        dotted line  5  long dash, short dash;  6  dash dot  7  dash dot dot  8
        zigzag line
        required: No; default: 1; range: 1,8

        NOCLOSE:     Option  Description  0  joins the first and last points of the perimeter;
        =1 does not join the first and last points of the perimeter (0).
        required: No; default: 0; range: 0,1

        SYMBOL:     Plotted symbol at each point. Default (92). Point symbol number 91 :
        Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 :
        Diamond 97 : Star . Can also be from the standard symbol set (codes 201 -
        267)( )
        required: No; default: 92; range: 91,267

        SYMSIZE:     Symbol size in millimetres (0).
        required: No; default: 0; range: Undefined

        ANNOTATE:     Option  Description  0  no annotation;  1  annotate at top;  2  annotate
        at centre (0).
        required: No; default: 0; range: 0,2

        AXOFFSET:     Offset on the X axis of annotation (0).
        required: No; default: 0; range: Undefined

        AYOFFSET:     Offset on the Y axis of annotation (0).
        required: No; default: 0; range: Undefined

        ANGLE:     Angle of annotation from the X axis (0).
        required: No; default: 0; range: -360,360

        NDP:     Number of decimal places in the annotation if the annotation field is
        numeric.
        required: No; default: ; range: Undefined

        SYLVALUE:     Value of SFIELD field for plotting of crest symbol.
        required: No; default: ; range: Undefined

        SYLSCALE:     Crest symbol line width in millimetres (3).
        required: No; default: 3; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        FILLCODE:     Fill code for filling closed perimeters.  Option  Description  1 - 64
        solid colour fill  401 - 414  pattern fill  3001 - 3030  hatch fill.
        required: No; default: ; range: 13,030

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotpe).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTPE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotpi(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                explode_p=0,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain fields X,Y,S1,S2,CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last 6 values set in PROTO , then corresponding parameters need
        not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field to be plotted along X axis.
        required: Yes; default: ; range: 

        Y:     Field to be plotted along Y axis.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        EXPLODE:     Distance in mm used to separate the pie slices (0).
        required: No; default: 0; range: Undefined

        APPEND:     Plot append flag.(0) If 1 then the new plot will be appended to the PLOT
        file if exists and is a valid plot file.
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotpi).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTPI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotpx(self,
                in_i,
                proto_i,
                plot_o,
                in2_i='optional',
                afield_f='optional',
                dash_f=0,
                noanno_f='optional',
                auxanno_f='optional',
                annotate_p=0,
                linecode_p=1,
                noclose_p=0,
                symbol_p=92,
                symsize_p=0,
                axoffset_p=0,
                ayoffset_p=0,
                angle_p=0,
                ndp_p='optional',
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                nointann_p=1,
                charsmin_p=0.8,
                interval_p='optional',
                roadann_p=0,
                slopeann_p=1,
                slopecol_p=-1,
                benchcol_p=-1,
                ffanncol_p=-1,
                ffannsz_p=-1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input perimeter file. Must contain the fields XP, YP, ZP, PTN and PVALUE
        (numeric, explicit).
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        IN2:     Optional 2nd input perimeter file containing annotation and slope lines.
        Should contain std perimeter fields, plus an optional alpha field for
        annotation (max 40 chars)
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        AFIELD:     Field used for perimeter annotation. Default is PVALUE. May be alpha up to
        8 characters.
        required: No; default: ; range: 

        DASH:     Field used for dashing patterns [1-4]. (0)
        required: No; default: 0; range: 

        NOANNO:     Field used for to prevent annotation of a perimeter under a range of
        conditions: 0 = no effect 1 = no annotation at all on the perimeter 2 = no
        road annotion on the perimeter 3 = no annotation of the perimeter if
        annotation lines are present and it is not intersected. 4 = combination of
        2
        required: No; default: ; range: 

        AUXANNO:     Field used for free form annotation in IN2.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ANNOTATE:     Type of annotation. (0) 0 = no annotation 1 = annotate perimeter ends 2 =
        annotate perimeter centre 3 = inline perimeter annotation and/or use IN2
        file to define annotation, slope intersections, and free form annotations.
        required: No; default: 0; range: 0,3

        LINECODE:     Option Description 1 narrow line; =2 broad line (1).
        required: No; default: 1; range: 1,2

        NOCLOSE:     Option Description 0 joins the first and last points of the perimeter; 1
        does not join the first and last points of the perimeter (0).
        required: No; default: 0; range: 0,1

        SYMBOL:     Plots the symbol specified at each perimeter point 91=o, 92=+, 93=x (92).
        required: No; default: 92; range: Undefined

        SYMSIZE:     Symbol size in millimetres (0).
        required: No; default: 0; range: Undefined

        AXOFFSET:     Offset on the X axis of annotation (0).
        required: No; default: 0; range: Undefined

        AYOFFSET:     Offset on the Y axis of annotation (0).
        required: No; default: 0; range: Undefined

        ANGLE:     Angle of annotation from the X axis (0).
        required: No; default: 0; range: -360, 360

        NDP:     Number of decimal places in the annotation if the annotation field is
        numeric.
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). 0 indicates use the colour field.
        Parameters specific to annotate NOTE: This variable name was missing
        during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        NOINTANN:     0 = annotate non intersected perimeters (1) 1 = Do not annotate non
        intersected perimeters
        required: No; default: 1; range: 0,1

        CHARSMIN:     Minimum character size in millimetres (0.8).
        required: No; default: 0.8; range: Undefined

        INTERVAL:     Interval for perimeter annotation when no annotation lines, in mm.
        [default is 120]
        required: No; default: ; range: Undefined

        ROADANN:     For annotate=3: (0) 0 = no annotation at road bends 1 = annotate contours
        at road bends, with line 2 = annotate contours at road bends, with cross
        required: No; default: 0; range: 0,2

        SLOPEANN:     For annotate=3: (1) 1 = just plot slope lines 2 = plot slope lines 3 =
        plot lines 4 = plot lines, offsetting,
        required: No; default: 1; range: 1,4

        SLOPECOL:     Colour of 'slope symbols', for annotate=3 (-1) -1 = same as default
        parameter 0 = use colour field if present >=1 = any other colour. Default
        is -1.
        required: No; default: -1; range: -1,64

        BENCHCOL:     Colour of bench RL's, for annotate=3 (-1) -1 = same as default parameter 0
        = use colour field if present >=1 = any other colour. Default is -1.
        required: No; default: -1; range: -1,64

        FFANNCOL:     Colour of free form annotation, for annotate=3 -1 = same as default
        parameter 0 = use colour field if present >=1 = any other colour. Default
        is -1. (-1)
        required: No; default: -1; range: -1,64

        FFANNSZ:     default character size of free form annotation, for annotate=3 (-1)
        Remaining parameters
        required: No; default: -1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotpx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTPX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotsi(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                icon_i='optional',
                layer_f='optional',
                colour_f='optional',
                field_f='optional',
                ndec_f='optional',
                charsize_f='optional',
                aspratio_f='optional',
                xoffset_f='optional',
                yoffset_f='optional',
                angle_f='optional',
                a_f='optional',
                symbol_f='optional',
                symsize_f='optional',
                s_f='optional',
                sfield_f='optional',
                scutmm_f='optional',
                scutval_f='optional',
                ivalue_f='optional',
                irotref_f='optional',
                iangle_f='optional',
                ixoffset_f='optional',
                iyoffset_f='optional',
                iscale_f='optional',
                iasprat_f='optional',
                ndec_p='optional',
                charsize_p='optional',
                aspratio_p='optional',
                xoffset_p='optional',
                yoffset_p='optional',
                angle_p='optional',
                a_p='optional',
                symbol_p='optional',
                symsize_p='optional',
                s_p='optional',
                scutmm_p='optional',
                scutval_p='optional',
                ivalue_p='optional',
                irotref_p='optional',
                iangle_p='optional',
                ixoffset_p='optional',
                iyoffset_p='optional',
                iscale_p='optional',
                iasprat_p='optional',
                layer_p='optional',
                colour_p='optional',
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ICON:     Input icon file. An icon is a small number of plot file records that
        describe some feature or symbol. The icon file may contain a number of
        icons. In addition to the normal DATAMINE plot file records, the icon file
        will contain the explicit fields IVALUE, ITEXT, IXSIZE and IYSIZE.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field to specify distance along X axis for plotting symbol(s).
        required: Yes; default: ; range: 

        Y:     Field to specify distance along Y axis for plotting symbol(s).
        required: Yes; default: ; range: 

        LAYER:     Plot layer
        required: No; default: ; range: 

        COLOUR:     Colour NOTE: This variable name was missing during import to Python, set
        to: COLOUR based on description.
        required: No; default: ; range: 

        FIELD:     Field to be annotated, or plotted
        required: No; default: ; range: 

        NDEC:     Decimal places for annotation.
        required: No; default: ; range: 

        CHARSIZE:     Character size in millimetres.
        required: No; default: ; range: 

        ASPRATIO:     Aspect ratio, width / ht. for chars.
        required: No; default: ; range: 

        XOFFSET:     Annotation offset from point in X in mm.
        required: No; default: ; range: 

        YOFFSET:     Annotation offset from point in Y in mm.
        required: No; default: ; range: 

        ANGLE:     Annotation angle from X axis.
        required: No; default: ; range: 

        A:     Annotation colour for plot.
        required: No; default: ; range: 

        SYMBOL:     Plotted symbol. 91=o, 92=+, 93=x.
        required: No; default: ; range: 

        SYMSIZE:     Symbol size in millimetres. 0=none.
        required: No; default: ; range: 

        S:     Symbol colour for plot.
        required: No; default: ; range: 

        SFIELD:     Field to determine symbol size.
        required: No; default: ; range: 

        SCUTMM:     Maximum size for symbol in mm.
        required: No; default: ; range: 

        SCUTVAL:     Data value for maximum symbol size.
        required: No; default: ; range: 

        IVALUE:     Icon IVALUE to plot at X,Y.
        required: No; default: ; range: 

        IROTREF:     Position of icon origin. 0..9
        required: No; default: ; range: 

        IANGLE:     Rotation angle from X axis.
        required: No; default: ; range: 

        IXOFFSET:     Icon X offset from point in millimetres.
        required: No; default: ; range: 

        IYOFFSET:     Icon Y offset from point in millimetres.
        required: No; default: ; range: 

        ISCALE:     Scaling factor.
        required: No; default: ; range: 

        IASPRAT:     Aspect ratio, width / ht. for icons.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NDEC:     Decimal places for annotation.
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres.
        required: No; default: ; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars.
        required: No; default: ; range: Undefined

        XOFFSET:     Annotation offset from point in X in mm.
        required: No; default: ; range: Undefined

        YOFFSET:     Annotation offset from point in Y in mm.
        required: No; default: ; range: Undefined

        ANGLE:     Annotation angle from X axis.
        required: No; default: ; range: -360, 360

        A:     Annotation colour for plot.
        required: No; default: ; range: Undefined

        SYMBOL:     Plotted symbol. 91=o, 92=+, 93=x.
        required: No; default: ; range: Undefined

        SYMSIZE:     Symbol size in millimetres. 0=none
        required: No; default: ; range: Undefined

        S:     Symbol colour for plot.
        required: No; default: ; range: Undefined

        SCUTMM:     Maximum size for symbol in mm.
        required: No; default: ; range: Undefined

        SCUTVAL:     Data value for maximum symbol size.
        required: No; default: ; range: Undefined

        IVALUE:     Icon IVALUE to plot at X,Y.
        required: No; default: ; range: Undefined

        IROTREF:     Position of icon origin. 0..9
        required: No; default: ; range: 0,9

        IANGLE:     Rotation angle from X axis.
        required: No; default: ; range: -360, 360

        IXOFFSET:     Icon X offset from point in millimetres.
        required: No; default: ; range: Undefined

        IYOFFSET:     Icon Y offset from point in millimetres.
        required: No; default: ; range: Undefined

        ISCALE:     Scaling factor.
        required: No; default: ; range: Undefined

        IASPRAT:     Aspect ratio, width / ht. for icons.
        required: No; default: ; range: Undefined

        LAYER:     Plot layer
        required: No; default: ; range: Undefined

        COLOUR:     Colour NOTE: This variable name was missing during import to Python, set
        to: COLOUR based on description.
        required: No; default: ; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotsi).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTSI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotsk(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                z_f,
                length_f,
                bhid_f,
                from_f,
                to_f,
                a0_f,
                b0_f,
                distance_p,
                ndp_p,
                x1_p,
                y1_p,
                x2_p,
                y2_p,
                angle_p='optional',
                dhd_p=0,
                xoffset_p=0,
                yoffset_p=0,
                linecode_p=1,
                notick_p=0,
                noannot_p=0,
                anbothol_p=0,
                dtrwidth_p=0,
                ppsymbol_p=92,
                ppsymsiz_p=0,
                enexdhd_p=0,
                lincolfq_p=14,
                lincolch_p=14,
                lincolcq_p=14,
                dtrtypfq_p=4,
                dtrtypch_p=1,
                dtrtypcq_p=3,
                antickm_p=1,
                verbose_p=0,
                charsize_p=4,
                aspratio_p=0.9,
                colour_p=14,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input drillhole file, in standard sample format. If there is a field in
        this file, then the given colour number will be applied to each sample
        trace or barplot.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Sample centre X co-ordinate.
        required: Yes; default: X; range: 

        Y:     Sample centre Y co-ordinate.
        required: Yes; default: Y; range: 

        Z:     Sample centre Z co-ordinate (elevation).
        required: Yes; default: Z; range: 

        LENGTH:     Sample length.
        required: Yes; default: LENGTH; range: 

        BHID:     Drillhole identifier.
        required: Yes; default: BHID; range: 

        FROM:     Downhole distance to sample top.
        required: Yes; default: FROM; range: 

        TO:     Downhole distance to sample bottom.
        required: Yes; default: TO; range: 

        A0:     Sample bearing.
        required: Yes; default: A0; range: 

        B0:     Sample dip.
        required: Yes; default: B0; range: 

        ----------
        PARAMETERS
        ----------

        DISTANCE:     Maximum projection distance to section. drillhole intervals are clipped at
        the boundaries of the spatial window defined by the section line (X1,Y1)
        to (X2,Y2), the vertical coordinates from YMIN to YMAX and the thickness
        DISTANCE on both sides of the section line.
        required: Yes; default: X1,Y1; range: Undefined

        NDP:     Number of decimal places for grade values.
        required: Yes; default: ; range: Undefined

        X1:     X co-ordinate of section line start.
        required: Yes; default: ; range: Undefined

        Y1:     Y co-ordinate of section line start.
        required: Yes; default: ; range: Undefined

        X2:     X co-ordinate of section line end.
        required: Yes; default: ; range: Undefined

        Y2:     Y co-ordinate of section line end.
        required: Yes; default: ; range: Undefined

        ANGLE:     Angle for drillhole id, 0=horizontal, -90=vertically upwards, -= at angle
        of first sample (-).
        required: No; default: ; range: Undefined

        DHD:     Plot downhole distances at given interval (0).
        required: No; default: 0; range: Undefined

        XOFFSET:     Annotation offset in mm. to the right of sample centre at rt. angles to
        sample (0).
        required: No; default: 0; range: Undefined

        YOFFSET:     Annotation offset in mm. up from sample centre along sample (0).
        required: No; default: 0; range: Undefined

        LINECODE:     Line Type to be used to join each point. Default (1). Line Types: 1 :
        Solid line 2 : Bold line 3 : Dashed line 4 : Dotted line 5 : Dot-Dash line
        required: No; default: 1; range: 1,5

        NOTICK:     Option Description 1 Suppress sample tick marks. (0).
        required: No; default: 0; range: 0,1

        NOANNOT:     Option Description 1 Suppress BHID annotation (0).
        required: No; default: 0; range: 0,1

        ANBOTHOL:     Option Description 1 BHID annotation at bottom of hole (0).
        required: No; default: 0; range: 0,1

        DTRWIDTH:     Double trace width in mm. when the trace is in the section, 0 = single
        trace. (0).
        required: No; default: 0; range: Undefined

        PPSYMBOL:     Symbol at section plane Pierce Point (92).
        required: No; default: 92; range: Undefined

        PPSYMSIZ:     Pierce Point symbol size in mm. 0= no symbol (0).
        required: No; default: 0; range: Undefined

        ENEXDHD:     Annotate down the hole distance and distance from the section line at
        entry and exit. section entry and exit. (0) (0) = No annotation. 1 =
        Annotation. Distance from the secton line is positive on the side away
        from the viewer. -1 = Annotation. Distance from the section line is
        negative on the side away from the viewer.
        required: No; default: 0; range: -1,1

        LINCOLFQ:     Trace colour in section far quarter. (14)
        required: No; default: 14; range: Undefined

        LINCOLCH:     Trace colour in section centre half. (14)
        required: No; default: 14; range: Undefined

        LINCOLCQ:     Trace colour in section close quarter. (14)
        required: No; default: 14; range: Undefined

        DTRTYPFQ:     Double trace line type when the trace is in the far quarter of the
        section. 1= Solid line. 2= Broad solid line. 3= Long dash 3 mm. dash, 3
        mm. intervals. 4= Dots, 1 dot per mm. (4)
        required: No; default: 4; range: 1,4

        DTRTYPCH:     Double trace line type when the trace is in the central half of the
        section. 1= Solid line. 2= Broad solid line. 3= Long dash 3 mm. dash, 3
        mm. intervals. 4= Dots, 1 dot per mm. (1)
        required: No; default: 1; range: 1,4

        DTRTYPCQ:     Double trace line type when the trace is in the closest quarter of the
        section. 1= Solid line. 2= Broad solid line. 3= Long dash 3 mm. dash, 3
        mm. intervals. 4= Dots, 1 dot per mm. (3)
        required: No; default: 3; range: 1,4

        ANTICKM:     Tick marks to delineate annotations. These are single sided ticks, with a
        length equal to XOFFSET. 1= ticks, 0= no ticks. (1)
        required: No; default: 1; range: 0,1

        VERBOSE:     0= Annotate only when the value changes. 1= Annotate all intervals even if
        the value of contiguous intervals is similar. (0)
        required: No; default: 0; range: 0,1

        CHARSIZE:     Character size in millimetres (4).
        required: No; default: 4; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (14). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 14; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot [Suggest 0]. None of XMIN, XMAX, YMIN, YMAX,
        XSCALE, YSCALE need be set if this information is already in the
        prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot [Suggest section length as defined by X1 , Y1
        , X2 , Y2].
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot [Lowest Z value].
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot [Highest Z value].
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotsk).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTSK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotsx(self,
                proto_i,
                in1_i,
                plot_o,
                ndp_p,
                x1_p,
                y1_p,
                x2_p,
                y2_p,
                annfile_i='optional',
                in2_i='optional',
                in3_i='optional',
                sampcolr_f='optional',
                distance_p='optional',
                dminus_p='optional',
                dplus_p='optional',
                optmse_p=0,
                pltype_p=1,
                barann_p=0,
                plview_p=0,
                pldist_p='optional',
                blevel_p='optional',
                trace_p=1,
                tiklen_p=1,
                tiktyp_p=1,
                side_p=1,
                dhd_p=0,
                dhdist_p=0,
                dhdoff_p=0,
                eoh_p=0,
                xoffset_p=0,
                yoffset_p=0,
                bhsize_p='optional',
                bhcol_p='optional',
                bhang_p='optional',
                bhpos_p=1,
                trcol_p=-1,
                tikcol_p=-1,
                anncol_p=-1,
                barcol_p=-1,
                filgap_p=0,
                gaplen_p=1,
                fill_p=0,
                charsize_p=4,
                charsmin_p='optional',
                aspratio_p=0.9,
                append_p=0,
                colour_p=1,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        IN1:     Input drillhole file, in standard sample format. If there is a field in
        this file, then the given colour number will be applied to each sample
        trace or barplot.
        required: Yes; default: ; range: 

        ANNFILE:     Optional annotation input file for specifying annotations as an
        alternative to the interactive input. If specified then PLTYPE , XOFFSET ,
        YOFFSET are ignored. Compulsory fields: FIELD A8- Field to annotate. TYPE
        N - Annotation type; 1 = annotate relative to trace; 2 = bar plot; 3 =
        annotate relative to previous bar plot; 4 = line plot; SIDE N - Side of
        trace 1=RHS,2=LHS. Optional fields: CHARSIZE N - Annotate character size.
        N - Annotate/bar/line colour. XOFFSET N - Offset perpendicular to trace.
        YOFFSET N - Offset along trace. NDP N - Number of decimal places. For
        bars: CUTVAL N - Value of field for maximum bar. CUTMM N - Optional height
        of maximum bar, default is 10mm. Optional fields if FIELD is numeric:
        LOWER N - Lower bound non-inclusive. UPPER N - Upper bound inclusive.
        LOWER and UPPER define the range on FIELD for which the particular
        annotation will plotted. Special values - and + may be used. For TYPE = 2
        and 4 offsets apply to base of bar or line axis.
        required: No; default: ; range: 

        IN2:     Optional input collar file, in standard collar format.
        required: No; default: ; range: 

        IN3:     Optional input survey file, in standard survey format.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        SAMPCOLR:     Sample colour field, used preferentially for plotting of trace, assays,
        ticks and barplots. ().
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NDP:     Number of decimal places for grade values.
        required: Yes; default: ; range: Undefined

        X1:     X co-ordinate of section line start.
        required: Yes; default: ; range: Undefined

        Y1:     Y co-ordinate of section line start.
        required: Yes; default: ; range: Undefined

        X2:     X co-ordinate of section line end.
        required: Yes; default: ; range: Undefined

        Y2:     Y co-ordinate of section line end.
        required: Yes; default: ; range: Undefined

        DISTANCE:     Maximum projection distance to section. Must be specifed unless DPLUS and
        DMINUS are both specified.
        required: No; default: ; range: Undefined

        DMINUS:     Negative distance from section plane. If not specified then DISTANCE will
        be used.
        required: No; default: ; range: Undefined

        DPLUS:     Positive distance from section plane. If not specified then DISTANCE will
        be used.
        required: No; default: ; range: Undefined

        OPTMSE:     Level of hole trace filling and smoothing: 0=none; 1=join gaps; 2=split
        long samples 3=automatic splitting; (0)
        required: No; default: 0; range: 0,3

        PLTYPE:     Type of plot: 0=plot trace only; 1=annotate sample values; 2=single side
        barplot; 3=double side barplot; 4=line plot; (1)
        required: No; default: 1; range: 0,4

        BARANN:     Annotation outside bars on barplot type plots: 0=no; 1=yes; (0)
        required: No; default: 0; range: 0,1

        PLVIEW:     Plot orientation: 0=standard section plot; 1=section with plan window;
        2=plan plot; (0)
        required: No; default: 0; range: 0,2

        PLDIST:     Plan window distance for PLVIEW=1 only. default = 2 DISTANCE
        required: No; default: ; range: Undefined

        BLEVEL:     Bench level for use with PLVIEW=2 only. [R.L. of plan plot]
        required: No; default: ; range: Undefined

        TRACE:     0 = no hole trace or EOH tick; 1 = plot trace; 2 = plot trace with symbol
        marking intersection with the plane; 3 = as 1 above with thick line code
        1002; 4 = as 2 above with thick line code 1002;
        required: No; default: 1; range: 0,4

        TIKLEN:     Tick length each side of hole; (1)
        required: No; default: 1; range: Undefined

        TIKTYP:     Tick positioning; 0=no ticks; 1=both sides; 2=RHS; 3=LHS; (1)
        required: No; default: 1; range: 0,3

        SIDE:     Side of hole to use in annotation or barplots. 1=RHS; 2=LHS; (1)
        required: No; default: 1; range: 1,2

        DHD:     Plot downhole distance or distance to section 0=none; 1=plot downhole
        distance; 2=plot distance of sample from section; 3=both; (0)
        required: No; default: 0; range: 0,3

        DHDIST:     Plot DHD parameter[s] at given interval [integer] (0).
        required: No; default: 0; range: Undefined

        DHDOFF:     DHD parameter[s] offset in millimetres from hole trace at the right angles
        to sample. Value > 0 right h. side, <0 left h. side. (0).
        required: No; default: 0; range: Undefined

        EOH:     End of hole annotation: 0=nothing; 1='EOH'; 2=downhole distance; 3=both 1
        required: No; default: 0; range: 0,3

        XOFFSET:     Offset in millimetres from sample centre of annotation at rt. angles to
        sample (0).
        required: No; default: 0; range: Undefined

        YOFFSET:     Offset in millimetres from sample centre of annotation along sample (0).
        required: No; default: 0; range: Undefined

        BHSIZE:     Borehole id annotation size: 0=suppress; default= CHARSIZE value;
        required: No; default: ; range: Undefined

        BHCOL:     Borehole id annotation colour: default= value;
        required: No; default: ; range: Undefined

        BHANG:     Angle for drillhole id, 0=horizontal, -90=vertically upwards, -= in line
        with hole trace; += at 90 degrees to hole trace.
        required: No; default: ; range: Undefined

        BHPOS:     Borehole id position: 1=top of hole; 2=bottom of hole; (1)
        required: No; default: 1; range: 1,2

        TRCOL:     Colour of trace: -1=same as default parameter; 0=use colour field if
        present; >=1 any other colour. (-1)
        required: No; default: -1; range: -1,64

        TIKCOL:     Colour of ticks: -1=same as default parameter; 0=use colour field if
        present; >=1 any other colour. (-1)
        required: No; default: -1; range: -1,64

        ANNCOL:     Colour of assay [or other] annotation down the side of the hole: -1=same
        as default parameter; 0=use colour field if present; >=1 any other colour.
        (-1)
        required: No; default: -1; range: -1,64

        BARCOL:     Colour of bars: -1=same as default parameter; 0=use colour field if
        present; >=1 any other colour. (-1)
        required: No; default: -1; range: -1,64

        FILGAP:     Controls filling of gaps and splitting of long samples/gaps in straight [1
        survey pt] holes: 0=gaps not filled; 1=gaps filled; 2=enables splitting
        according to GAPLEN even if hole is straight. (0)
        required: No; default: 0; range: 0,1,2

        GAPLEN:     Length to split long samples or gaps to for more accurate plotting for
        OPTMSE=2. (1)
        required: No; default: 1; range: Undefined

        FILL:     Line density in mm for pseudo colour fill of sample barplot. Zero for no
        fill (0).
        required: No; default: 0; range: Undefined

        CHARSIZE:     Character size in millimetres (4).
        required: No; default: 4; range: Undefined

        CHARSMIN:     Minimum annotation character size. If space available for annotation is
        less than CHARSMIN the annotation is not plotted at all. Otherwise the
        characters are shrunk to fit in available space.
        required: No; default: ; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, assuming it exists and is a proper plot file. (0)
        required: No; default: 0; range: 0,1

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        XMIN:     Minimum value of X for plot [Suggest 0]. None of XMIN, XMAX, YMIN, YMAX,
        XSCALE, YSCALE need be set if this information is already in the
        prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot [Suggest section length as defined by X1 , Y1
        , X2 , Y2].
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot [Lowest Z value].
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot [Highest Z value].
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotsx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTSX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotti(self,
                proto_i,
                plot_o,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotti).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTTI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plottr(self,
                wiretr_i,
                wirept_i,
                proto_i,
                plot_o,
                linecode_p=1,
                colour_p=1,
                append_p=0,
                symbol_p=92,
                symsize_p=5,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINECODE:     Line Type to be used to join each point. Default (1). Line Types: 1 :
        Solid line 2 : Bold line 3 : Dashed line 4 : Dotted line 5 : Dot-Dash line
        required: No; default: 1; range: 1,5

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, assuming it exists and is a proper plot file (0).
        required: No; default: 0; range: 0,1

        SYMBOL:     Plotted symbol at each point. Default (92). Point symbol number 91 :
        Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 :
        Diamond 97 : Star ( ) 98 : Pie Segment
        required: No; default: 92; range: 91,98

        SYMSIZE:     Symbol size in millimetres (5). 0 for no symbol.
        required: No; default: 5; range: Undefined

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plottr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTTR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plottx(self,
                in_i,
                proto_i,
                plot_o,
                xstart_p,
                ystart_p,
                angle_p=0,
                nobox_p=0,
                margin_p=3,
                space_p='optional',
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input text file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XSTART:     X position, in millimetres, for start of text (top left hand corner of
        box).
        required: Yes; default: ; range: Undefined

        YSTART:     Y position, in millimetres, for start of text (top left hand corner of
        box).
        required: Yes; default: ; range: Undefined

        ANGLE:     Angle of text clockwise from the X axis (0).
        required: No; default: 0; range: Undefined

        NOBOX:     Option Description 0 a box is plotted around the text, =1 a box is not
        plotted around the text (0).
        required: No; default: 0; range: 0,1

        MARGIN:     The margin, in millimetres, between the text and the surrounding box (3).
        required: No; default: 3; range: Undefined

        SPACE:     A word which if encountered as the first word in a text record is
        interpreted as a blank line. Must be between quotes; e.g '----'. Default
        is ' '.
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plottx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTTX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotva(self,
                in_i,
                proto_i,
                plot_o,
                x_f,
                y_f,
                symcode_f='optional',
                angle_p=0,
                symbol_p=92,
                symsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file. This must contain X and Y fields and at least one value
        field.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field to be plotted along X axis.
        required: Yes; default: ; range: 

        Y:     Field to be plotted along Y axis.
        required: Yes; default: ; range: 

        SYMCODE:     The SYMCODE value will control the symbol used on each point. If used, it
        will override the SYMBOL parameter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ANGLE:     Angle for symbol plotting in degrees from the X axis.(0)
        required: No; default: 0; range: Undefined

        SYMBOL:     Plotted symbol at each point. Default (92). Point symbol number 91 :
        Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 :
        Diamond 97 : Star 98 : Pie Segment. Can also be from the standard symbol
        set (codes 201 - 267) ( )
        required: No; default: 92; range: 91,267

        SYMSIZE:     Symbol size in millimetres (3). Set to 0 for no symbol.
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotva).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTVA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def plotws(self,
                wiretr_i,
                wirept_i,
                proto_i,
                plot_o,
                section_i='optional',
                linecode_p=1001,
                frame_p=0,
                charsize_p=4,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xscale_p='optional',
                yscale_p='optional',
                vertexag_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE
        (numeric, explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric,
        implicit). If these last 6 values set in PROTO , then corresponding
        parameters need not be set.
        required: Yes; default: ; range: 

        SECTION:     Optional section definition file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINECODE:     (1001) Line code for plotting - 1001 faint, or 1002 bold.
        required: No; default: 1001; range: 1001, 1006

        FRAME:     (0) Set to 1 if frame required around plot.
        required: No; default: 0; range: 0,1

        CHARSIZE:     Character size in millimetres (4).
        required: No; default: 4; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XSCALE:     X scale in user data units per millimetre. If specified here or in PROTO
        this value will override section limits.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimetre. If specified here or in PROTO
        this value will override section limits.
        required: No; default: ; range: Undefined

        VERTEXAG:     Controls vertical exaggeration. This must be set to allow different
        scales. The default is forced equal scales (1). = 0 allows different
        scales for both axes determined by XSCALE and YSCALE if provided or else
        by filling the data area to the section limits. > 0 sets value of
        XSCALE/YSCALE.
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.plotws).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLOTWS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pltabl(self,
                in_i,
                plot_o,
                lines_p='optional',
                noff_p=0,
                sysfile_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINES:     Number of lines per page of output. If negative will be double spaced.
        required: No; default: ; range: Undefined

        NOFF:     If set to 1, suppresses form feeds (0).
        required: No; default: 0; range: 0,1

        SYSFILE:     Option Description 1 to send report to a system file rather than the
        printer or print file (0). File name is requested:
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pltabl).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLTABL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def pltlay(self,
                plot_o,
                proto_i='optional',
                icon_i='optional',
                asize_p=0,
                xscale_p='optional',
                yscale_p='optional',
                unit_p=0,
                append_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype.
        required: No; default: ; range: 

        ICON:     Icon file. An icon is a small number of plot file records that describe
        some feature that is commonly required on mine plans, e.g. mine shafts.
        This input/output icon file may contain a number of user-defined icons. In
        addition to the normal DATAMINE plot file fields, the icon file will
        contain the explicit fields IVALUE, ITEXT, IXSIZE and IYSIZE.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file. This file will contain all of the plot data that has
        been generated during the current operation of PLTLAY.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ASIZE:     Type of A size paper, for initial plot size if no prototype file supplied.
        (0)
        required: No; default: 0; range: Undefined

        XSCALE:     Initial X plot scale factor if no prototype file supplied. E.g. enter 1000
        for a scale of 1:1000. Note that user data units of metres are assumed; if
        metres are not the unit, then the scale must be multiplied by factor f,
        where f=no. of metres in 1 user data unit [e.g. 0.3048 for feet].
        required: No; default: ; range: Undefined

        YSCALE:     Initial Y plot scale factor if no prototype file supplied.
        required: No; default: ; range: Undefined

        UNIT:     This parameter indicates the type of data that will be brought into the
        process. The default is metric (0) and a unit value of 1 indicates user
        units of imperial feet.
        required: No; default: 0; range: 0,1

        APPEND:     If an input plot prototype file has been supplied, any plot records in
        this file may automatically copied to the final output plot file by
        setting this parameter to 1.(1)
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.pltlay).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PLTLAY ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def polreg(self,
                in_i,
                x_f,
                y_f,
                order_p,
                out_o='optional',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing the coefficients.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X co-ordinate of the sample data.
        required: Yes; default: X; range: 

        Y:     Y co-ordinate of the sample data.
        required: Yes; default: Y; range: 

        ----------
        PARAMETERS
        ----------

        ORDER:     Order of the polynomial required (1,2,3,4 or 5).
        required: Yes; default: 1; range: 1,5

        PRINT:     If set to 1 then a table of estimated values, based on the regression
        equation, will be written to the Command window. The default is (0), do
        not create the table.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.polreg).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'POLREG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def polydc(self,
                in_i,
                out_o,
                x_f,
                y_f,
                z_f,
                srcparm_i='optional',
                wiretr_i='optional',
                wirept_i='optional',
                model_o='optional',
                polytr_o='optional',
                polypt_o='optional',
                wtfield_f='optional',
                zone_f='optional',
                compleng_p=0,
                xinc_p='optional',
                yinc_p='optional',
                zinc_p='optional',
                srefnum_p='optional',
                radius_p=100,
                maxgrdpt_p=10
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must contain a set of 3D coordinates (eg
        X,Y,Z) and at least one other field.
        required: Yes; default: ; range: 

        SRCPARM:     Search volume parameter file. The 2nd and 3rd dynamic search volumes are
        not used.
        required: No; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: No; default: ; range: 

        WIREPT:     Input wireframe points file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing declustered weights. This will be a copy of the IN
        file, but will also include the field DCWEIGHT.
        required: Yes; default: ; range: 

        MODEL:     Output model file containing sample identifier for each grid point.
        required: No; default: ; range: 

        POLYTR:     Output wireframe triangle file describing polyhedra. Using this option can
        increase processing time VERY significantly. Do not use if more than a few
        hundred samples in the IN file.
        required: No; default: ; range: 

        POLYPT:     Output wireframe points file describing polyhedra. Using this option can
        increase processing time VERY significantly. Do not use if more than a few
        hundred samples in the IN file.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data.
        required: Yes; default: X; range: 

        Y:     Y coordinate of sample data.
        required: Yes; default: Y; range: 

        Z:     Z coordinate of sample data.
        required: Yes; default: Z; range: 

        WTFIELD:     Field to be used for calculating declustered weights. This ensures that
        records containing absent data values for that field will be ignored. If a
        WTFIELD field is not specified then the Z field is used.
        required: No; default: ; range: 

        ZONE:     Field in wireframe triangle file identifying different zones. If selected
        then a set of weights will be calculated for each zone.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        COMPLENG:     Composite length for discretising samples.
        required: No; default: 0; range: 0,+

        XINC:     Grid increment size in X. If not specified a default is calculated with
        XINC, YINC, ZINC being equal.
        required: No; default: ; range: 0.0001,+

        YINC:     Grid increment size in Y. If not specified a default is calculated with
        XINC, YINC, ZINC being equal.
        required: No; default: ; range: 0.0001,+

        ZINC:     Grid increment size in Z. If not specified a default is calculated with
        XINC, YINC, ZINC being equal.
        required: No; default: ; range: 0.0001,+

        SREFNUM:     Search volume reference number. Only used if a search volume file has been
        selected.
        required: No; default: ; range: Undefined

        RADIUS:     Search radius for calculating weights. Only used if a search volume file
        has not been selected.
        required: No; default: 100; range: 0.0001,+

        MAXGRDPT:     Maximum number of grid points (* 1,000,000). The process will terminate if
        more than the maximum will be created.
        required: No; default: 10; range: 1,100

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.polydc).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'POLYDC ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ppqqplot(self,
                    in1_i,
                    in2_i,
                    value1_f,
                    value2_f,
                    ppout_o='optional',
                    ppplot_o='optional',
                    qqout_o='optional',
                    qqplot_o='optional',
                    key_f='optional',
                    weight1_f='optional',
                    weight2_f='optional',
                    plottype_p=1,
                    binsize_p=1,
                    diagonal_p=1,
                    progress_p=1,
                    display_p=1,
                    minimum1_p=0,
                    minimum2_p=0,
                    maximum1_p='optional',
                    maximum2_p='optional'
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     First input data file. There must be a minimum of 5 records.
        required: Yes; default: ; range: 

        IN2:     Second input data file. This can be the same as the first input file IN1.
        There must be a minimum of 5 records.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PPOUT:     Output table for PP plot. At least one of the four output files must be
        specified.
        required: No; default: ; range: 

        PPPLOT:     Output plot file for PP plot. At least one of the four output files must
        be specified.
        required: No; default: ; range: 

        QQOUT:     Output table for QQ plot. At least one of the four output files must be
        specified.
        required: No; default: ; range: 

        QQPLOT:     Output plot file for PP plot. At least one of the four output files must
        be specified.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        VALUE1:     Field in input file IN1 to be plotted along the X axis of the PP and QQ
        plot.
        required: Yes; default: ; range: 

        VALUE2:     Field in input file IN2 to be plotted along the Y axis of the PP and QQ
        plot.
        required: Yes; default: ; range: 

        KEY:     Key field in the input IN1 and optionally IN2 file. The plot will include
        a line or set of symbols for each key field value.
        required: No; default: ; range: 

        WEIGHT1:     Weighting field for VALUE1 in input file IN1.
        required: No; default: ; range: 

        WEIGHT2:     Weighting field for VALUE2 in input file IN2.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLOTTYPE:     Flag to specify plot type (1); =1 : Scatter plot, using symbol X; =2 :
        Line plot
        required: No; default: 1; range: 1,2

        BINSIZE:     Bin size for PP plot.
        required: No; default: 1; range: Undefined

        DIAGONAL:     Flag to control whether the diagonal (45 degree line) should be included
        on the plot (1). =0 : no diagonal line; =1 : include diagonal line.
        required: No; default: 1; range: 0,1

        PROGRESS:     Flag to control amount of output written to Output Window (1). =0 : no
        output; =1 : progress messages
        required: No; default: 1; range: 0,1

        DISPLAY:     Flag to select whether or not to display plot files. =0 : do not display
        plot files. =1 : display plot files.
        required: No; default: 1; range: 0,1

        MINIMUM1:     Minimum value of VALUE1 field in input file IN1. Values below the minimum
        are ignored.
        required: No; default: 0; range: Undefined

        MINIMUM2:     Minimum value of VALUE2 field in input file IN2. Values below the minimum
        are ignored.
        required: No; default: 0; range: Undefined

        MAXIMUM1:     Maximum value of VALUE1 field in input file IN1. Values above the maximum
        are ignored.
        required: No; default: ; range: Undefined

        MAXIMUM2:     Maximum value of VALUE2 field in input file IN2. Values above the maximum
        are ignored.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ppqqplot).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PPQQPLOT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def promod(self,
                in_i,
                out_o,
                remnants_o='optional',
                density_f='optional',
                key1_to_20_f=['optional'],
                density_p=1,
                xincmin_p='optional',
                yincmin_p='optional',
                zincmin_p='optional',
                overlap_p=0,
                optimise_p=2,
                tol_p=0.001,
                accuracy_p=0.001,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model. Must contain at least the fields XC, YC, ZC, XINC, YINC,
        ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, and IJK. May also contain value
        fields. It must be sorted by IJK.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model. Will contain all the fields held in the IN file. It will be
        sorted by IJK.
        required: Yes; default: ; range: 

        REMNANTS:     Optional output model file holding remnants of any subcell outside its
        parent cell.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        DENSITY:     Field to weight values in OUT when combining subcells if OPTIMISE=1 or 2.
        If a field called DENSITY exists in the IN file it will be used.
        required: No; default: ; range: 

        KEY1-20:     Field from the IN file which must be the same for two or more subcells to
        be combined if OPTIMISE=1 or 2.  20 keyfields are supported if PROMOD is
        run interactively. 50 can be provided if run from a macro.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DENSITY:     Density value used if DENSITY field value in a sub-cell is absent. Default
        (1.0).
        required: No; default: 1; range: Undefined

        XINCMIN:     Defines minimum subcell dimension in X. Any subcell with a dimension less
        than this will be combined (if OPTIMISE=1 or 2, and if possible) with an
        adjacent subcell regardless of key field{s} values. Default is parent cell
        X size / 1000.
        required: No; default: ; range: Undefined

        YINCMIN:     Defines minimum subcell dimension in Y. Any subcell with a dimension less
        than this will be combined (if OPTIMISE=1 or 2, and if possible) with an
        adjacent subcell regardless of key field{s} values. Default is parent cell
        Y size / 1000.
        required: No; default: ; range: Undefined

        ZINCMIN:     Defines minimum subcell dimension in Z. Any subcell with a dimension less
        than this will be combined (if OPTIMISE=1 or 2, and if possible) with an
        adjacent subcell regardless of key field{s} values. Default is parent cell
        Z size / 1000.
        required: No; default: ; range: Undefined

        OVERLAP:     Overlap checking and resolution. Default (0).  Option  Description  0  -
        Existence of an overlap in the IN model will be reported and PROMOD will
        terminate.  1  - Existence of an overlap in the model will be reported. No
        attempt will be made to resolve the overlaps. They will be copied into the
        OUT file.  2  - Overlaps will be resolved according to ADDMOD logic. 2nd
        subcell will have priority
        required: No; default: 0; range: 0,2

        OPTIMISE:     Optimise combination of subcells to minimise number. Default (2).  Option
        Description  0  - No combination of subcells.  1  - Combination of
        subcells only if they form a complete parent cell.  2  - Combination of
        subcells to form minimum number of subcells.
        required: No; default: 2; range: 0,2

        TOL:     Tolerance on numerical key field{s} comparison. Subcells with key numeric
        fields within TOL of each other may be combined if OPTIMISE=1 or 2. TOL is
        specified as a percentage of the range of values for each field. Default
        (0.001).
        required: No; default: 0.001; range: Undefined

        ACCURACY:     Accuracy indicates the size below which a cell is deemed to be invisible.
        Default (0.001). Note that these cells are ignored by the PROMOD process.
        required: No; default: 0.001; range: Undefined

        PRINT:     Print flag. Default (0).  Option  Description  0  - minimum output.  1  -
        details of every overlap in the model.  2  - details of each combination
        of subcells.  3  - details of all subcells extending outside the parent
        cell limits.  4  - as 1 plus 2.  5  - as 1 plus 2 plus 3.
        required: No; default: 0; range: 0,5

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.promod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PROMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def proper(self,
                perimin_i,
                zeroxyz_p,
                perimout_o='optional',
                mode_p=0,
                area_p='0,1',
                close_p=0,
                clockwse_p='optional',
                vplane_p=1,
                dmax_p='optional',
                tol_p=0,
                reduce_p=0,
                extend_p=0,
                cross_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     The input perimeter file. The fields required are XP,YP,ZP,PTN, and PVALUE
        (standard perimeter format). All perimeters in the file will be used. All
        other fields will be copied. Perimeters must be planar.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output perimeter file. Contains all fields from the input file plus
        optionally AREA.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ZEROXYZ:     Internally set the X, Y or Z value of input perimeters to zero. An example
        of when this is useful is if you want to calculate plan areas of 3
        dimensional perimeters  =(0) : Do not internally adjust any coordinates in
        the input perimeters.. =1 : Internally treat all X coordinates in the
        input strings as zero. =2 : Internally treat all Y coordinates in the
        input strings as zero. =3 : Internally treat all Z coordinates in the
        input strings as zero.
        required: Yes; default: 0; range: 0,3

        MODE:     For MODE=1 only parameters CLOSE, DMAX, TOL, REDUCE are used to treat
        strings.  =0 : Treat as perimeters.  =1 : Treat as strings.
        required: No; default: 0; range: 0,1

        AREA:     field containing perimeter area creation flag  =0 : dont create field AREA
        in PERIMOUT .  =1 : create field AREA in PERIMOUT .
        required: No; default: 0,1; range: 0,1

        CLOSE:     =0 : will remove last point of a perimeter if perimeter is closed. .  =1 :
        will add first point to end of perimeter if perimeter not closed..
        required: No; default: 0; range: Undefined

        CLOCKWSE:     =0 : make all perimeters anti-clockwise.  =1 : make all perimeters
        clockwise.
        required: No; default: ; range: Undefined

        VPLANE:     Viewing plane for clockwise sense for non-orthogonal planes (1).  =1 : XY
        plane from +Z.  =2 : XZ plane from -Y.  =3 : YZ plane from +X.
        required: No; default: 1; range: 1,3

        DMAX:     The maximum chord length used when inserting additional points into long
        chords.
        required: No; default: ; range: Undefined

        TOL:     Minimum allowable chord length used when removing points. Default is (0)
        for removal of consecutive duplicates.
        required: No; default: 0; range: Undefined

        REDUCE:     Percentage point reduction 0 to 90 (0).
        required: No; default: 0; range: 0,90

        EXTEND:     +/- perpendicular extension distance (0).
        required: No; default: 0; range: Undefined

        CROSS:     Option  Description  (0)  do not attempt to resolve crossovers in extended
        perimeters.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.proper).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PROPER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)      
        
        
    def protop(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Plot prototype file to be created.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.protop).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PROTOP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def ptcldwf(self,
                in_i,
                wiretr_o,
                wirept_o,
                x_or_y_or_z_p,
                ngrid_p,
                holewid_p,
                rfact_p,
                kne_p,
                ksr_p,
                rotmod_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input point data file used to create the wireframe surface.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Output surface wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Output surface wireframe points file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        X/Y/Z:     Name of X/Y/Z Coordinate field in IN
        required: Yes; default: 0; range: 

        NGRID:     The size of the grid. A grid of width, height and length of NGRID is used
        to compute the triangles. It is the smallest axis aligned grid that
        completely encloses the points, and so it is directly proportional to the
        approximate length of an edge on a triangle. A higher value leads to a
        larger number of output vertices, and therefore a more refined mesh, at
        the expense of computation time.
        required: Yes; default: 50; range: 

        HOLEWID:     The width of the largest hole in the point cloud, measured in cube widths.
        In order for the computation to be efficient, only occupied grid cubes,
        and their neighbours, are considered when computing the triangles. The
        HOLEWID parameter specifies the number of adjacent neighbours to use. A
        larger value will close larger holes at the expense of computation time.
        required: Yes; default: 4; range: 

        RFACT:     Smoothing parameter. A radius is used for regressing the exponential basis
        to the point cloud. In order to maintain control over the fitting, the
        radius is set to the RADIUSFACTOR multiplied by the average edge length. A
        smaller value of RFACT will lead to a closer fit to the data, whereas
        larger values will smooth the data more.
        required: Yes; default: 10; range: 

        KNE:     The number of neighbours to use when computing the point cloud normals.
        Larger values will create a smoother normals but will increase the
        computational overhead.
        required: Yes; default: 20; range: 

        KSR:     The number of neighbours to use in the surface reconstruction. Smaller
        values decrease the computational overhead. If there are not enough
        neighbours then the averaging induced by the parameter RFACT could lead to
        overfitting.
        required: Yes; default: 50; range: 

        ROTMOD:     Name of X/Y/Z normal field in IN
        required: No; default: 0; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.ptcldwf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'PTCLDWF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def qnlm(self,
                in_i,
                sampid_f,
                scores_o='optional',
                f1_to_10_f=['optional'],
                convlim_p=0.0001,
                magic_p=0.35,
                maxit_p=100,
                standard_p=0,
                znorm_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        SCORES:     Optional output file for non linear mapping scores.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Sample identifier field in input file.
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CONVLIM:     Convergence limit (0.0001)
        required: No; default: 0.0001; range: Undefined

        MAGIC:     Convergence [magic] factor (0.35)
        required: No; default: 0.35; range: Undefined

        MAXIT:     Maximum number of iterations (100)
        required: No; default: 100; range: Undefined

        STANDARD:     >0 Input data to be standardised (0)
        required: No; default: 0; range: 0,1

        ZNORM:     >0 NLM scores in output file SCORES to be Z normalised (0).
        required: No; default: 0; range: 0,1

        PRINT:     >0 Display two dimensional x - y coordinates to the screen (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.qnlm).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'QNLM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def quantile(self,
                    in_i,
                    results_o,
                    value_f,
                    quant_pt_o='optional',
                    primary_o='optional',
                    print_o='optional',
                    key_f='optional',
                    weight_f='optional',
                    cutoff_p=0,
                    topcut_p=0,
                    topgrade_p='optional',
                    ndp_p=2,
                    quantil1_p=10,
                    quantil2_p=0
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     Output file containing quantile group information for primary and
        secondary subdivisions. Although optional one of the two files QUANT_PT or
        RESULTS must be selected.
        required: Yes; default: ; range: 

        QUANT_PT:     Output file containing the *VALUE value for each Quantile Point defined by
        parameters QUANTIL1 and QUANTIL2. Although optional one of the two files
        QUANT_PT or RESULTS must be selected.
        required: No; default: ; range: 

        PRIMARY:     Output file containing quantile group information for the primary
        subdivision only.
        required: No; default: ; range: 

        PRINT:     System print file, containing quantile group information. This is a copy
        of the contents of the RESULTS file, but to a system file. The extension
        .pri will be added automatically to the file name.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Name of the field containing the grade to be analysed.
        required: Yes; default: ; range: 

        KEY:     Key field for grouping the data. A separate quantile analysis is carried
        out for each unique value of the key field.
        required: No; default: ; range: 

        WEIGHT:     Field containing the weight used when calculating quantile means and
        accumulating the grade values. For example if the input data is a
        desurveyed data file then LENGTH could be used. If no field is specified
        then all samples have an equal weight.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTOFF:     Cutoff grade. Only samples greater than or equal to the cutoff grade are
        selected for analysis.
        required: No; default: 0; range: Undefined

        TOPCUT:     Flag to specify whether or not a topcut grade should be applied: 0 = No
        topcut applied. 1 = Topcut applied at grade defined in TOPGRADE
        required: No; default: 0; range: 0,1

        TOPGRADE:     Grade to be applied as a topcut, if TOPCUT is set to 1. Any value greater
        than TOPGRADE will be reset to equal to TOPGRADE.
        required: No; default: ; range: Undefined

        NDP:     Maximum number of decimal places for field VALUE in output file QUANT_PT.
        required: No; default: 2; range: 0,6

        QUANTIL1:     The primary quantile. The number of primary subdivisions or bins for
        grouping the samples. For example setting QUANTIL1=10 will divide the
        samples into deciles; QUANTIL1=4 will give quartiles.
        required: No; default: 10; range: 2,+

        QUANTIL2:     The secondary quantile. The top bin of the primary subdivision can be
        further split into equal groupings. For example if QUANTIL1=10 and
        QUANTIL2=4, then the top 10% will be split into 4 equal groups of 2.5%. If
        set to 0 then the top bin is not resplit.
        required: No; default: 0; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.quantile).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'QUANTILE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def quickest(self,
                    proto_i,
                    in_i,
                    model_o,
                    x_f,
                    y_f,
                    z_f,
                    value_f,
                    numsam_f='optional',
                    zone_f='optional',
                    length_f='optional',
                    minnum_p=3,
                    maxnum_p=20,
                    minoct_p=0,
                    minperoc_p=1,
                    maxperoc_p=0,
                    imethod_p=2,
                    power_p=2,
                    xpoints_p=3,
                    ypoints_p=3,
                    zpoints_p=3,
                    xsubcell_p=1,
                    ysubcell_p=1,
                    zsubcell_p=1,
                    print_p=0,
                    sdist1_p=100,
                    sdist2_p=100,
                    sdist3_p=100,
                    sangle1_p=0,
                    saxis1_p=3,
                    sangle2_p=0,
                    saxis2_p=1,
                    sangle3_p=0,
                    saxis3_p=3
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input model prototype.  This is a standard block model file containing the
        13 compulsory fields. It may also contain the rotated model fields. If it
        includes cells then it must be sorted on IJK.
        required: Yes; default: ; range: 

        IN:     Input sample data. This must contain X,Y and Z fields and at least one
        grade field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output model containing estimated grades, variance etc.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data in IN file. If not specified, then X is
        assumed. If the unfolding option is used, then the X coordinate must be
        set to the unfolded UCSA coordinate.
        required: Yes; default: X; range: 

        Y:     Y coordinate of sample data in IN file. If not specified, then Y is
        assumed. If the unfolding option is used, then the Y coordinate must be
        set to the unfolded UCSB coordinate.
        required: Yes; default: Y; range: 

        Z:     Z coordinate of sample data in IN file. If not specified, then Z is
        assumed. If the unfolding option is used, then the Z coordinate must be
        set to the unfolded UCSC coordinate.
        required: Yes; default: Z; range: 

        VALUE:     Name of the field containing the grade to be estimated
        required: Yes; default: ; range: 

        NUMSAM:     Name of the field to be created in the output MODEL file which is used to
        record the number of samples used for estimating each cell. If a field
        name is not specified the number of samples used will not be recorded.
        required: No; default: ; range: 

        ZONE:     Name of the zonal interpolation field. The field may be numeric or up to
        20 character alphanumeric. The field must exist in both the PROTO and IN
        files. If it is specified then cells in each ZONE will be interpolated
        using only samples with the same ZONE value.
        required: No; default: ; range: 

        LENGTH:     Name of the field used for length weighting of samples. This is only used
        if the Inverse Power of Distance interpolation method is selected
        (IMETHOD=2).
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINNUM:     Minimum number of samples which must lie within the search ellipsoid in
        order for the model subcell to be estimated. If there are less than the
        minimum number and the input PROTOmodel contains cells, then an absent
        data value will be assigned to the grade field in the output model file
        MODELIf there are less than the minimum, but the input PROTOmodel does not
        contain any cells, then a cell will not be created in the output model
        file MODEL.
        required: No; default: 3; range: 11,400

        MAXNUM:     Maximum number of samples to be used for estimating the grade of a model
        cell. If more than the maximum number lie within the search ellipsoid,
        then the search ellipsoid is shrunk concentrically until just
        MAXNUMsamples remain. The maximum number cannot exceed 1400.
        required: No; default: 20; range: 11,400

        MINOCT:     The minimum number of octants to be filled before a subcell will be
        interpolated. If it is set to zero then octant search will not be used.
        required: No; default: 0; range: 0,8

        MINPEROC:     The minimum number of samples in an octant before it is considered to be
        filled.
        required: No; default: 1; range: 0,1400

        MAXPEROC:     The maximum number of samples in an octant, to be used for interpolation.
        If there are more than the maximum number in any octant, then the samples
        closest to subcell centre are selected. If set to zero there is no limit
        on the number of samples.
        required: No; default: 0; range: 0,1400

        IMETHOD:     Interpolation method: 1: Nearest Neighbour 2: Inverse Power of Distance
        required: No; default: 2; range: 1,2

        POWER:     Weighting power if Inverse Power of Distance is selected (IMETHOD=2).
        required: No; default: 2; range: Undefined

        XPOINTS:     Number of discretisation points in the X direction.Discretisation points
        are used to simulate each cell or subcell for the purpose of grade
        estimation. They are only used for the Inverse Power of Distance
        (IMETHOD=2) estimation methods If Inverse Power of Distance is used then
        XPOINTS, YPOINTS and ZPOINTS may all be 1, and so the subcell is
        represented by a single point at its centre.
        required: No; default: 3; range: 1,6

        YPOINTS:     Number of discretisation points in the Y direction.Discretisation points
        are used to simulate each cell or subcell for the purpose of grade
        estimation. They are only used for the Inverse Power of Distance
        (IMETHOD=2) estimation methods If Inverse Power of Distance is used then
        XPOINTS, YPOINTS and ZPOINTS may all be 1, and so the subcell is
        represented by a single point at its centre.
        required: No; default: 3; range: 1,6

        ZPOINTS:     Number of discretisation points in the Z direction.Discretisation points
        are used to simulate each cell or subcell for the purpose of grade
        estimation. They are only used for the Inverse Power of Distance
        (IMETHOD=2) estimation methods If Inverse Power of Distance is used then
        XPOINTS, YPOINTS and ZPOINTS may all be 1, and so the subcell is
        represented by a single point at its centre.
        required: No; default: 3; range: 1,6

        XSUBCELL:     Number of subcells per parent cell to be created in the X direction.This
        only applies if there are no cells in the input prototype model PROTO, and
        therefore cells (and subcells) are created by the GRADEprocess.
        required: No; default: 1; range: 1,20

        YSUBCELL:     Number of subcells per parent cell to be created in the Y direction.This
        only applies if there are no cells in the input prototype model PROTO, and
        therefore cells (and subcells) are created by the GRADEprocess.
        required: No; default: 1; range: 1,20

        ZSUBCELL:     Number of subcells per parent cell to be created in the Z direction.This
        only applies if there are no cells in the input prototype model PROTO, and
        therefore cells (and subcells) are created by the GRADEprocess.
        required: No; default: 1; range: 1,20

        PRINT:     Display control: 0: minimum output including progress message. 1: as 0
        plus details of input parameters. 2: as 1 plus display of each cell value.
        required: No; default: 0; range: 0,2

        SDIST1:     Length of the search ellipsoid axis in the X direction.
        required: No; default: 100; range: 0.00001,+

        SDIST2:     Length of the search ellipsoid axis in the Y direction. .
        required: No; default: 100; range: 0.00001,+

        SDIST3:     Length of the search ellipsoid axis in the Z direction. .
        required: No; default: 100; range: 0.00001,+

        SANGLE1:     First rotation angle (in degrees) for the search ellipsoid. The rotation
        is around the axis defined by SAXIS1.
        required: No; default: 0; range: -360,360

        SAXIS1:     Coordinate axis about which rotation SANGLE1 is applied. Specify 1 for the
        X axis, 2 for the Y axis, or 3 for the Z axis.
        required: No; default: 3; range: 1,3

        SANGLE2:     Second rotation angle (in degrees) for the search ellipsoid. The rotation
        is around the axis defined by SAXIS2.
        required: No; default: 0; range: -360,360

        SAXIS2:     Coordinate axis about which rotation SANGLE2 is applied. Specify 1 for the
        X axis, 2 for the Y axis, or 3 for the Z axis.
        required: No; default: 1; range: 1,3

        SANGLE3:     Third rotation angle (in degrees) for the search ellipsoid. The rotation
        is around the axis defined by SAXIS3.
        required: No; default: 0; range: -360,360

        SAXIS3:     Coordinate axis about which rotation SANGLE3 is applied. Specify 1 for the
        X axis, 2 for the Y axis, or 3 for the Z axis.
        required: No; default: 3; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.quickest).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'QUICKEST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def quig(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output prototype model.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.quig).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'QUIG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def rank(self,
                in_i,
                out_o,
                value_f,
                rank_f,
                cumprop_f,
                phi_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Numeric or up to 4-character alpha field to be ranked.
        required: Yes; default: ; range: 

        RANK:     New field to be created in output file, to contain rank order values.
        required: Yes; default: ; range: 

        CUMPROP:     New field to be created in output file, to contain cumulative frequency
        values of field RANK [values of CUMPROP lie between 0 and 1].
        required: Yes; default: ; range: 

        PHI:     New field to be created in output file, to contain PHI [inverse normal
        distribution] transform of field CUMPROP [values of PHI lie between -3.5
        and +3.5].
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.rank).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RANK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def reblock(self,
                modin_i,
                modout_o,
                density_f,
                fillvol_f='optional',
                voidvol_f='optional',
                vwfld1_to_15_f=['optional'],
                domfld1_to_10_f=['optional'],
                addfld1_to_10_f=['optional'],
                minfld1_to_5_f=['optional'],
                maxfld1_to_5_f=['optional'],
                xinc_p=20,
                yinc_p=20,
                zinc_p=20,
                fullcell_p=0,
                dbymass_p=0,
                density_p=1,
                setabsnt_p=0,
                absgrade_p=0,
                unmodgrd_p=0,
                unmodden_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODIN:     Input block model file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODOUT:     Reblocked output model file
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        DENSITY:     Density field. If the model does not include a DENSITY field then the
        density can be set with parameter @DENSITY. The output file will always
        contain a DENSITY field.
        required: Yes; default: ; range: 

        FILLVOL:     The proportion of each full cell in the output model that was filled with
        cells in the input model. Only output if @FULLCELL=1.
        required: No; default: ; range: 

        VOIDVOL:     The proportion of each full cell in the output model that was filled with
        cells in the input model. Calculated as 1 - FILLVOL. Only output if
        @FULLCELL=1.
        required: No; default: ; range: 

        VWFLD1-15:     Field(s) to be volume weighted
        required: No; default: ; range: 

        DOMFLD1-10:     Field(s) to be treated as dominant.
        required: No; default: ; range: 

        ADDFLD1-10:     Field(s) to be treated as additive
        required: No; default: ; range: 

        MINFLD1-5:     Field(s) to be set using minimum value
        required: No; default: ; range: 

        MAXFLD1-5:     Field(s) to be set using maximum value
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XINC:     New X parent cell size
        required: No; default: 20; range: 2,+

        YINC:     New Y parent cell size
        required: No; default: 20; range: 0,+

        ZINC:     New Z parent cell size
        required: No; default: 20; range: Undefined

        FULLCELL:     Set to 1 to output a model containing only parent cells
        required: No; default: 0; range: 0,1

        DBYMASS:     Set to 1 to determine dominant values by mass rather than volume. The
        default is zero, to determine dominant values by volume.
        required: No; default: 0; range: 0,1

        DENSITY:     Grade to be applied as a topcut, if TOPCUT is set to 1. Any value greater
        than TOPGRADE will be reset to equal to TOPGRADE.
        required: No; default: 1; range: 0,1

        SETABSNT:     Set to 1 to set any absent density values to the default density using the
        @DENSITY value.
        required: No; default: 0; range: 0,1

        ABSGRADE:     The ABSGRADE parameter controls what action is taken if there are absent
        data grade values in the input model.
        required: No; default: 0; range: 0,2

        UNMODGRD:     The UNMODGRD parameter controls the method used to assign the grade if
        @FULLCELL=1 but the parent cell in the OUT model includes unmodelled
        volume ie if FILLVOL is less than 1. The default is (0).
        required: No; default: 0; range: 0,2

        UNMODDEN:     The UNMODDEN parameter defines the density of unmodelled volumes. It is
        only used if @FULLCELL=1 and @UNMODGRD=1 or 2. The default value is 1.
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.reblock).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'REBLOCK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def reccop(self,
                in_i,
                out_o,
                recmin_p=1,
                recmax_p='+'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        RECMIN:     Mininim record number (1).
        required: No; default: 1; range: Undefined

        RECMAX:     Maximum record number (+).
        required: No; default: +; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.reccop).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RECCOP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def recmodel(self,
                    model_i,
                    results_o,
                    planned_f,
                    mined_f,
                    modltype_p,
                    density_f='DENSITY',
                    key1_f='optional',
                    grade1_to_10_f=['optional'],
                    value_p='optional',
                    factor_p=1,
                    setabsnt_p=0,
                    bench_p=0
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODEL:     Input model file for reconciliation. It must contain a field identifying
        the planned cells to be reconciled with the wireframe volumes. If the
        model has been created by NPV Scheduler this field may be the optimally
        planned pushback identifier PSB_PIT
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     Output results file containing the reserve comparisons. This contains up
        to 5 records for every separate reconciled volume: Total Planned, Total
        Mined, Planned and Mined, Planned Only and Mined Only. Volumes are defined
        by the PLANNED and MINED fields and can be further broken down by the KEY1
        field and BENCH parameter.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        PLANNED:     Field in MODEL file used to group the planned blocks. If comparing
        wireframe designs with pushback reserves in an NPV Scheduler model this
        field may be PSB_PIT.
        required: Yes; default: ; range: 

        MINED:     Field in the WIRETR file defining the volumes to be compared to the
        corresponding PLANNED block model cells.
        required: Yes; default: ; range: 

        DENSITY:     Density field in the MODEL file used to calculate tonnages.
        required: No; default: DENSITY; range: 

        KEY1:     Optional Key field in the MODEL file used to categorize results (e.g. a
        Rock type field).
        required: No; default: ; range: 

        GRADE1-10:     Grade field in the model file
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODLTYPE:     Type of wireframe model to be filled; one of the following options, with
        default of (1) :-  1  Solid 3d, interior to be filled with cells  2  Solid
        3d, exterior to be filled with cells  3  Surface, cells to be filled below
        (for XY), to south (for XZ), or to west (for YZ)  4  Surface, cells to be
        filled above (for XY), to north (for XZ), or to east (for YZ)  5  Fill
        between two surfaces with cells.  6  Two surfaces, cells to be filled
        above upper surface and below lower surface.
        required: Yes; default: 1; range: 1, 6

        VALUE:     Value of PLANNED and MINED fields to compare. If undefined or zero then
        all values of MINED field will be compared.
        required: No; default: ; range: Undefined

        FACTOR:     Scaling factor to adjust the units of the Volume and Tonnage in the output
        files. Volume and Tonnage are divided by this factor.
        required: No; default: 1; range: Undefined

        SETABSNT:     Set to 1 to allow TONGRAD to internally reset absent grade and Density
        values. If this is used, absent grade values are set to their default
        values. If the default value is absent grade values are set to zero. If
        Density values are absent the default DENSITY parameter value is used."
        required: No; default: 0; range: 0, 1

        BENCH:     Set to 1 to categorize the reserve comparisons by benches.  0  Do not
        categorize by benches  1  Categorize the results by benches (as defined by
        the model ZINC default value)
        required: No; default: 0; range: 0, 1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.recmodel).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RECMODEL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def recmodwf(self,
                    model_i,
                    wiretr_i,
                    wirept_i,
                    results_o,
                    planned_f,
                    mined_f,
                    modltype_p,
                    modout_o='optional',
                    density_f='DENSITY',
                    key1_f='optional',
                    grade1_to_10_f=['optional'],
                    value_p='optional',
                    factor_p=1,
                    setabsnt_p=0,
                    bench_p=0
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODEL:     Input model file for reconciliation. It must contain a field identifying
        the planned cells to be reconciled with the wireframe volumes. If the
        model has been created by NPV Scheduler this field may be the optimally
        planned pushback identifier PSB_PIT
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file used to define the mined volume(s). This
        should contain a field identifying the design to be reconciled.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file used to to define the mine volume(s).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     Output results file containing the reserve comparisons. This contains up
        to 5 records for every separate reconciled volume: Total Planned, Total
        Mined, Planned and Mined, Planned Only and Mined Only. Volumes are defined
        by the PLANNED and MINED fields and can be further broken down by the KEY1
        field and BENCH parameter.
        required: Yes; default: ; range: 

        MODOUT:     Output model file containing cell divisions defined by the input
        wireframes. This file will contain the MINED field with values derived
        from the input wireframe. If the input file already contains a MINED field
        its values are overwritten. The previous values are saved in a field
        called OldMined_
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        PLANNED:     Field in MODEL file used to group the planned blocks. If comparing
        wireframe designs with pushback reserves in an NPV Scheduler model this
        field may be PSB_PIT.
        required: Yes; default: ; range: 

        MINED:     Field in the WIRETR file defining the volumes to be compared to the
        corresponding PLANNED block model cells.
        required: Yes; default: ; range: 

        DENSITY:     Density field in the MODEL file used to calculate tonnages.
        required: No; default: DENSITY; range: 

        KEY1:     Optional Key field in the MODEL file used to categorize results (e.g. a
        Rock type field).
        required: No; default: ; range: 

        GRADE1-10:     Grade field in the model file
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODLTYPE:     Type of wireframe model to be filled; one of the following options, with
        default of (1) :-  1  Solid 3d, interior to be filled with cells  2  Solid
        3d, exterior to be filled with cells  3  Surface, cells to be filled below
        (for XY), to south (for XZ), or to west (for YZ)  4  Surface, cells to be
        filled above (for XY), to north (for XZ), or to east (for YZ)  5  Fill
        between two surfaces with cells.  6  Two surfaces, cells to be filled
        above upper surface and below lower surface.
        required: Yes; default: 1; range: 1, 6

        VALUE:     Value of PLANNED and MINED fields to compare. If undefined or zero then
        all values of MINED field will be compared.
        required: No; default: ; range: Undefined

        FACTOR:     Scaling factor to adjust the units of the Volume and Tonnage in the output
        files. Volume and Tonnage are divided by this factor.
        required: No; default: 1; range: Undefined

        SETABSNT:     Set to 1 to allow TONGRAD to internally reset absent grade and Density
        values. If this is used, absent grade values are set to their default
        values. If the default value is absent grade values are set to zero. If
        Density values are absent the default DENSITY parameter value is used."
        required: No; default: 0; range: 0, 1

        BENCH:     Set to 1 to categorize the reserve comparisons by benches.  0  Do not
        categorize by benches  1  Categorize the results by benches (as defined by
        the model ZINC default value)
        required: No; default: 0; range: 0, 1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.recmodwf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RECMODWF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def regmod(self,
                in1_i,
                in2_i,
                out_o,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f1_to_25_f=['optional'],
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input model prototype file, defining the new model origin, number of cells
        and cell sizes. This is typically set up by process PROTOM or create-
        model-prototype.
        required: Yes; default: ; range: 

        IN2:     Input model file for conversion. This must have the fields XMORIG, YMORIG,
        ZMORIG, NX, NY, NZ (implicit) and IJK, XC, YC and ZC (explicit). XINC,
        YINC and ZINC must exist as either explicit (sub-cells permitted) or
        implicit (no sub-cells). There must also be at least one explicit numeric
        data field, to be specified as F1. The records may be in any order, but
        speed is increased if they are in IJK order.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model file. This will have the model parameters of the input
        prototype file on IN1 , and may contain up to twenty five averaged fields
        ( F1-F25). It will also contain the fields FILLVOL and VOIDVOL.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F1_to_25:     First explicit numeric field to be averaged.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     >=2 display for each input cell or sub-cell that intersects with an output
        model cell; IJK1,IJK,NUMMET,XC,YC,ZC,VOLP,VOLT,F1 [IJK of input and output
        cell, sub-cell no., input cell centre, volume intersected, total volume to
        date in output cell, F1 value] and for each output cell, IJK, FILLVOL and
        VOIDVOL values, and the F1 value. (0).
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.regmod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'REGMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def regmow(self,
                in1_i,
                in2_i,
                out_o,
                f1_f,
                bltype_f='optional',
                f2_f='optional',
                f3_f='optional',
                f4_f='optional',
                f5_f='optional',
                airval_p='optional',
                restrict_p=0,
                print_p=0,
                cutoff1_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     Input model prototype file, defining the new model origin, number of cells
        and cell sizes. This is typically set up by process PROTOM. The fields
        required are XMORIG, YMORIG, ZMORIG, NX, NY, NZ, XINC, YINC, ZINC (all
        implicit) and IJK, XC, YC, and ZC (all explicit).
        required: Yes; default: ; range: 

        IN2:     Input model file for conversion. This must have the fields XMORIG, YMORIG,
        ZMORIG, NX, NY, NZ (implicit) and IJK, XC, YC and ZC (explicit). XINC,
        YINC and ZINC must exist as either explicit (sub-cells permitted) or
        implicit (no sub-cells). There must also be at least one explicit numeric
        data field, to be specified as F1. The records may be in any order, but
        speed is greatly increased if they are in IJK order.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model file. This will have the model parameters of the input
        prototype file on IN1 , and may contain up to five averaged fields (
        F1-F5). It will also contain the fields OREVOL, WASVOL and AIRVOL.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        F1:     First explicit numeric field to be averaged.
        required: Yes; default: ; range: 

        BLTYPE:     Field in IN2 which contains a specific value AIRVAL when the sub-cell is
        air.
        required: No; default: ; range: 

        F2:     Second explicit numeric field to be averaged.
        required: No; default: ; range: 

        F3:     Third explicit numeric field to be averaged.
        required: No; default: ; range: 

        F4:     Fourth explicit numeric field to be averaged.
        required: No; default: ; range: 

        F5:     Fifth explicit numeric field to be averaged.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        AIRVAL:     The value of the BLTYPE field that will be used to recognize air blocks
        and sub-blocks in the input model.
        required: No; default: ; range: Undefined

        RESTRICT:     Set to 1 if only the blocks on the input model are to be reported in the
        regularized model. Default is 0.
        required: No; default: 0; range: 0,1

        PRINT:     >=2 display for each input cell or sub-cell that intersects with an output
        model cell; IJK1,IJK,NUMMET,XC,YC,ZC,VOLP,VOLT,F1 [IJK of input and output
        cell, sub-cell no., input cell centre, volume intersected, total volume to
        date in output cell, F1 value] and for each output cell, IJK, WASVOL,
        OREVOL, the F1 name and the F1 value. (0).
        required: No; default: 0; range: 0,2

        CUTOFF1:     If the value in field F1 is below this, the sub-cell is treated as waste.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.regmow).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'REGMOW ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def rename(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be renamed.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     New file name (must not exist).
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.rename).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RENAME ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def repork(self,
                in_i,
                key1_to_25_f=['optional'],
                lines_p='optional',
                noff_p=0,
                prntcols_p=132,
                hedcentr_p=0,
                hedspace_p='optional',
                compress_p='optional',
                mindsply_p=0,
                sysfile_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_25:     Keyfield 1, optional
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINES:     Number of lines per page of output. If negative will be double spaced.
        required: No; default: ; range: Undefined

        NOFF:     If set to 1, suppresses form feeds (0).
        required: No; default: 0; range: 0,1

        PRNTCOLS:     Required print width in columns (132).
        required: No; default: 132; range: Undefined

        HEDCENTR:     If set to 1, page heading to be centred (0).
        required: No; default: 0; range: 0,1

        HEDSPACE:     Number of lines spacing required between the page headings, key block, and
        table headings.
        required: No; default: ; range: Undefined

        COMPRESS:     Set to 1 for compressed print option (only for some printers. Uses DPL24C
        convention).
        required: No; default: ; range: 0,1

        MINDSPLY:     Set to 1 to suppress screen display of the full report tabulation (0).
        required: No; default: 0; range: 0,1

        SYSFILE:     Option Description 1 to send report to a system file rather than the
        printer or print file (0). File name is requested:
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.repork).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'REPORK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def report(self,
                in_i,
                lines_p='optional',
                noff_p=0,
                sysfile_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINES:     Number of lines per page of output. If negative will be double spaced.
        required: No; default: ; range: Undefined

        NOFF:     If set to 1, suppresses form feeds (0).
        required: No; default: 0; range: 0,1

        SYSFILE:     Option Description 1 to send report to a system file rather than the
        printer or print file (0). File name is requested:
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.report).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'REPORT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def rescat(self,
                proto_i,
                in_i,
                model_o,
                value_f,
                x_f,
                y_f,
                z_f,
                radius_p,
                rescat_p=1,
                ellipse_p=0,
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                print_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input prototype model. This may be just fields XC, YC, ZC, XINC, YINC,
        ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK. May contain cells and sub-
        cells.
        required: Yes; default: ; range: 

        IN:     Input sample data (sorted on X). Must contain the fields X , Y , Z ,
        VALUE.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output model.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Value field. Even if the VALUE field is not copied to the output file a
        VALUE field is still required (as for any other model interpolation
        process).
        required: Yes; default: ; range: 

        X:     Name of X field in IN sample file.
        required: Yes; default: ; range: 

        Y:     Name of Y field in IN sample file.
        required: Yes; default: ; range: 

        Z:     Name of Z field in IN sample file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        RADIUS:     Search radius.[Maximum Value]
        required: Yes; default: ; range: Undefined

        RESCAT:     Reserve category parameter controlling fields in the output model: (1)
        RESCAT VALUE DISTANCE CATEGORY 0 X - - 1 X X X 2 X X - 3 X - X 4 - X X 5 -
        X - 6 - - X 'X' indicates included. '-' indicates not.
        required: No; default: 1; range: Undefined

        ELLIPSE:     Ellipsoid weighting parameter (0). If set to 1 then the user will be
        prompted to enter distance weighting parameters.
        required: No; default: 0; range: 0,1

        XSUBCELL:     No. of sub-cells/cell in X (1).
        required: No; default: 1; range: Undefined

        YSUBCELL:     No. of sub-cells/cell in Y (1).
        required: No; default: 1; range: Undefined

        ZSUBCELL:     No. of sub-cells/cell in Z (1). Above three parameters only used if input
        prototype does not already contain cells.
        required: No; default: 1; range: Undefined

        PRINT:     >=1 Display co-ordinates and interpolated values.
        required: No; default: ; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.rescat).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RESCAT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def restri(self,
                in1_i,
                in2_i,
                out_o,
                key1_to_10_f
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     File to have records selected (sorted on required keyfields).
        required: Yes; default: ; range: 

        IN2:     File with required values of keyfields (sorted on required keyfields).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield for matching.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.restri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RESTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def rnlm(self,
                in_i,
                sampid_f,
                scores_o='optional',
                f1_to_10_f=['optional'],
                convlim_p=0.0001,
                magic_p=0.35,
                maxit_p=100,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        SCORES:     Optional output file for principal component scores.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        SAMPID:     Field containing sample identification
        required: Yes; default: ; range: 

        F1_to_10:     First field to be used. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CONVLIM:     Convergence limit (0.0001)
        required: No; default: 0.0001; range: Undefined

        MAGIC:     Convergence [magic] factor (0.35)
        required: No; default: 0.35; range: Undefined

        MAXIT:     Maximum number of iterations (100)
        required: No; default: 100; range: Undefined

        PRINT:     Option  Description  (0)  Print configuration results to screen.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.rnlm).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'RNLM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def rotorder(self,
                    in_i,
                    out_o,
                    rotaxis1_f,
                    rotaxis2_f,
                    rotaxis3_f,
                    angle1_f,
                    angle2_f,
                    angle3_f,
                    outaxis1_p,
                    outaxis2_p,
                    outaxis3_p
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file containing axes and angles to be reordered.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. If this is set to the same file as IN then the input file
        fields will be modified.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ROTAXIS1:     Field name for first rotation axis.
        required: Yes; default: VAXIS1; range: 

        ROTAXIS2:     Field name for second rotation axis.
        required: Yes; default: VAXIS2; range: 

        ROTAXIS3:     Field name for third rotation axis.
        required: Yes; default: VAXIS3; range: 

        ANGLE1:     Field name for first rotation angle.
        required: Yes; default: VANGLE1; range: 

        ANGLE2:     Field name for second rotation angle.
        required: Yes; default: VANGLE2; range: 

        ANGLE3:     Field name for third rotation angle.
        required: Yes; default: VANGLE3; range: 

        ----------
        PARAMETERS
        ----------

        OUTAXIS1:     First rotation axis. 1=X, 2=Y, 3=Z. The first rotation is by ANGLE1
        degrees clockwise around axis AXIS1 , when viewed along the axis from
        positive values towards the origin. An axis value of 0 means no rotation.
        (3).
        required: Yes; default: 3; range: 

        OUTAXIS2:     Second rotation axis. 1=X, 2=Y, 3=Z. The second rotation is by ANGLE2
        degrees clockwise around axis AXIS2 , when viewed along the axis from
        positive values towards the origin. An axis value of 0 means no rotation.
        (1).
        required: Yes; default: 1; range: 

        OUTAXIS3:     Third rotation axis. 1=X, 2=Y, 3=Z. The first rotation is by ANGLE3
        degrees clockwise around axis AXIS3 , when viewed along the axis from
        positive values towards the origin. An axis value of 0 means no rotation.
        (3).
        required: Yes; default: 3; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.rotorder).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ROTORDER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def scrfmt(self,
                out_o='optional',
                text_f='TEXT',
                width_p=80,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output database file.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        TEXT:     Optional name for the field that is to contain the formatted text. The
        default is "TEXT".
        required: No; default: TEXT; range: 

        ----------
        PARAMETERS
        ----------

        WIDTH:     Width of output text in characters in the range 1-132 (80).
        required: No; default: 80; range: 1,132

        PRINT:     Control whether output should be sent to the print file, with the default
        as none (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.scrfmt).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SCRFMT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def secdef(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output file of section definitions, containing the fields SVALUE, XCENTRE,
        YCENTRE, ZCENTRE, SDIP, SAZI, VAZI, VDIP, HSIZE, VSIZE, DPLUS, DMINUS,
        SCALE, TEXT, COUNT
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.secdef).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SECDEF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def selcop(self,
                in_i,
                out_o,
                f1_to_25_f,
                fieldlst_i='optional',
                fieldnam_f='optional',
                keepall_p=0,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file with selected fields.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        F1_to_25:     Selected field 1.
        required: Yes; default: ; range: 

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEEPALL:     Option  Description  1  copy all records  (0)  ignore duplicate successive
        records.
        required: No; default: 0; range: 0,1

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour of a tolerance of zero being used.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.selcop).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SELCOP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def seldel(self,
                in_i,
                out_o,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f1_to_25_f=['optional'],
                keepall_p=0,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file with deleted fields.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F1_to_25:     Deleted field 1.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEEPALL:     Used to keep or delete records with duplicate successive key field values
        Option  Description  (0)  Do not copy successive duplicate records.  1
        Copy all records to Output File, even if adjacent records have identical
        Key Field values.
        required: No; default: 0; range: 0,1

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour of a tolerance of zero being used.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.seldel).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SELDEL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def selexy(self,
                in_i,
                perim_i,
                out_o,
                x_f,
                y_f,
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                outside_p=0,
                perim_p='optional',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file for selection. Must have explicit numeric fields X and Y.
        required: Yes; default: ; range: 

        PERIM:     Perimeter file to control selection. Must have perimeter points in
        clockwise order, with the perimeter closed. The fields required are
        XP,YP,ZP,PTN, and PVALUE (standard perimeter format). All perimeters in
        the file will be used, up to a maximum of 100, or the number that will fit
        into the real part of the virtual array (usually 100,000 for all except
        your application on the PC, where it is 10,000). Perimeters which do not
        fit will be ignored with a warning. May also contain fields ATTRIB1-4
        which can be carried across to the output file. The value of these fields
        at the first point is used.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing all records lying within (or optionally outside)
        the perimeter. The OUT file may be the same as the IN file for in-place
        operations, unless extra fields ( ATTRIB1-4) from the perimeter file are
        being added.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field in IN file defining the X co-ordinate.
        required: Yes; default: ; range: 

        Y:     Field in IN file defining the Y co-ordinate.
        required: Yes; default: ; range: 

        ATTRIB1:     Field from the perimeter file to be placed into the output file for all
        records which are selected. Up to 4 words may be entered, which may be 4
        numeric fields or a mixture of alphanumeric and numeric fields totalling 4
        words.
        required: No; default: ; range: 

        ATTRIB2:     Second field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ATTRIB3:     Third field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ATTRIB4:     Fourth field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        OUTSIDE:     Option Description 1 Copies records of a file which have X and Y co-
        ordinates lying outside the perimeter (0).
        required: No; default: 0; range: 0,1

        PERIM:     Set to the required PVALUE field to select a particular perimeter from
        PERIM. If PERIM is not set, then all perimeters will be processed.
        required: No; default: ; range: Undefined

        PRINT:     >=1 Display summary stats for each perimeter and DDs.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.selexy).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SELEXY ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def selper(self,
                in_i,
                perimin_i,
                x_f,
                y_f,
                z_f,
                out_o='optional',
                dplus_f='DPLUS',
                dminus_f='DMINUS',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                attrib5_f='optional',
                outside_p=0,
                pvalue_p='optional',
                clip_p=0,
                dplus_p='optional',
                dminus_p='optional',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file for selection. Must have explicit numeric fields X , Y and Z.
        If sample clipping is to be used then it must also contain A0, B0 and
        LENGTH fields.
        required: Yes; default: ; range: 

        PERIMIN:     Perimeter file to control selection. The fields required are XP, YP, ZP,
        PTN and PVALUE (i.e. standard perimeter format). The file may also contain
        fields ATTRIB1-5 which can be carried across to the output file. The value
        of these fields at the first point is used.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing all records lying within (or optionally outside)
        the perimeter. The OUT file may be the same as the IN file for in-place
        operations, unless extra fields ( ATTRIB1-5) from the perimeter file are
        being added.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field in IN file defining the X co-ordinate.
        required: Yes; default: ; range: 

        Y:     Field in IN file defining the Y co-ordinate.
        required: Yes; default: ; range: 

        Z:     Field in IN file defining the Z co-ordinate.
        required: Yes; default: ; range: 

        DPLUS:     Field in PERIMIN defining the search distance measured in the increasing
        direction of the perpendicular axis. The default field name is DPLUS,
        which will be used if it exists in the PERIMIN file.
        required: No; default: DPLUS; range: 

        DMINUS:     Field in PERIMIN defining the search distance measured in the decreasing
        direction of the perpendicular axis. The default field name is DMINUS,
        which will be used if it exists in the PERIMIN file.
        required: No; default: DMINUS; range: 

        ATTRIB1:     Field from the perimeter file to be placed into the output file for all
        records which are selected. This may be a multi-word alpha field.
        required: No; default: ; range: 

        ATTRIB2:     Second field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ATTRIB3:     Third field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ATTRIB4:     Fourth field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ATTRIB5:     Fifth field from the perimeter file to be placed into the output file for
        all records selected by the perimeter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        OUTSIDE:     Option  Description  1  Copies only those records of a file lying outside
        the perimeter (0).
        required: No; default: 0; range: 0,1

        PVALUE:     Set to the required PVALUE to select a particular perimeter from PERIMIN.
        If PVALUE is not set, then all perimeters will be processed.
        required: No; default: ; range: Undefined

        CLIP:     Option  Description  1  Clip samples at the perimeter boundary (0). If
        sample clipping is to be used then it must also contain A0, B0 and LENGTH
        fields.
        required: No; default: 0; range: 0,1

        DPLUS:     The search distance measured in the increasing direction of the
        perpendicular axis.
        required: No; default: ; range: Undefined

        DMINUS:     The search distance measured in the decreasing direction of the
        perpendicular axis.
        required: No; default: ; range: Undefined

        PRINT:     >=1 Display summary statistics for each perimeter (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.selper).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SELPER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def seltri(self,
                in_i,
                wiretr_i,
                wirept_i,
                out_o,
                x_f,
                y_f,
                z_f,
                select_p,
                zone_f='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                zone_p='optional',
                toleranc_p=0.001
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input point file for selection. Must have explicit numeric fields X , Y
        and Z. Processing will be quicker if this file is sorted on X.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file of selected records. File may contain additional fields,
        including the ZONE field.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field in IN file defining the X co-ordinate.
        required: Yes; default: ; range: 

        Y:     Field in IN file defining the Y co-ordinate.
        required: Yes; default: ; range: 

        Z:     Field in IN file defining the Z co-ordinate.
        required: Yes; default: ; range: 

        ZONE:     Field in WIRETR file used to identify individual surfaces and solid
        models. If there is more than one surface or solid model and ZONE is not
        specified, a point may be selected more than once, one for each model. If
        this field is specified and ZONE is not, the ZONE field is copied to the
        output file.
        required: No; default: ; range: 

        ATTRIB1:     Field from the WIRETR file to be placed into the output file for all
        records which are selected. Up to 4 words may be entered, which may be 4
        numeric fields or a mixture of alphanumeric and numeric fields totalling 4
        words.
        required: No; default: ; range: 

        ATTRIB2:     Second field from the WIRETR file to be placed into the output file for
        all records selected.
        required: No; default: ; range: 

        ATTRIB3:     Third field from the WIRETR file to be placed into the output file for all
        records selected.
        required: No; default: ; range: 

        ATTRIB4:     Fourth field from the WIRETR file to be placed into the output file for
        all records selected.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SELECT:     Option  Description  1  select points above a surface  2  select points
        below a surface  3  select points inside a solid  4  select points outside
        a solid.
        required: Yes; default: 3; range: 1,4

        ZONE:     Used to select one of a number of surface or wireframe models. This
        parameter must be specified if WIRETR contains a mix of surface and solid
        models. The SELECT parameter will determine whether a model is treated as
        a surface or wireframe.
        required: No; default: ; range: Undefined

        TOLERANC:     Tolerance for selection criteria. A positive tolerance will enhance point
        selection (0.001).
        required: No; default: 0.001; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.seltri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SELTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def selwf(self,
                in_i,
                wiretr_i,
                wirept_i,
                out_o,
                x_f,
                y_f,
                z_f,
                select_p,
                zone_f='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                plane_p='optional',
                exclude_p=0,
                toleranc_p=0.001,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input point file for selection. Must have explicit numeric fields X , Y
        and Z.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file of selected records. File may contain additional fields,
        including the ZONE field.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field in IN file defining the X co-ordinate.
        required: Yes; default: ; range: 

        Y:     Field in IN file defining the Y co-ordinate.
        required: Yes; default: ; range: 

        Z:     Field in IN file defining the Z co-ordinate.
        required: Yes; default: ; range: 

        ZONE:     Field in WIRETR file used to identify individual surfaces and solid
        models. The field can be numeric or alphanumeric up to 20 characters (5
        words). WIRETR does NOT have to be sorted by ZONE.
        required: No; default: ; range: 

        ATTRIB1:     Field from the WIRETR file to be placed into the output file for all
        records which are selected. Up to 4 words may be entered, which may be 4
        numeric fields or a mixture of alphanumeric and numeric fields totalling 4
        words.
        required: No; default: ; range: 

        ATTRIB2:     Second field from the WIRETR file to be placed into the output file for
        all records selected.
        required: No; default: ; range: 

        ATTRIB3:     Third field from the WIRETR file to be placed into the output file for all
        records selected.
        required: No; default: ; range: 

        ATTRIB4:     Fourth field from the WIRETR file to be placed into the output file for
        all records selected.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SELECT:     Option  Description  1  select points above a DTM surface  2  select
        points below a DTM surface  3  select points inside a solid  4  select
        points outside a solid  5  select points above a wireframe surface  6
        select points below a wireframe surface  7  select points between two
        wireframe surfaces  8  select points outside two wireframe surfaces.
        required: Yes; default: 3; range: 1,8

        PLANE:     Optional alpha parameter defining approximate orientation 'XY', 'XZ', or
        'YZ' of DTM surface.
        required: No; default: ; range: Undefined

        EXCLUDE:     Option  Description  1  exclude points that fall on, or within TOLERANC ,
        of the wireframe surface (0).
        required: No; default: 0; range: 0,1

        TOLERANC:     Tolerance used to determine whether a data point is 'on' a surface or not
        (0.001).
        required: No; default: 0.001; range: Undefined

        PRINT:     Option  Description  1  displays approximate locations of any detectable
        errors in the surface of a solid wireframe (0).  2  displays the number of
        intersections with the surface of a solid wireframe found above and below
        each point.
        required: No; default: 0; range: 0,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.selwf).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SELWF ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def setval(self,
                in_i,
                out_o,
                multifld_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. If this is the same file as the input, then values will be
        set in place.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MULTIFLD:     Allow multiple field names to be specified if non-zero (0). Up to 20
        fields can be supplied.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.setval).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SETVAL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def sgsim(self,
                vmodparm_i,
                points_o,
                x_f,
                y_f,
                z_f,
                grade_f,
                in_i='optional',
                proto_i='optional',
                refdist_i='optional',
                secfile_i='optional',
                model_o='optional',
                trandist_o='optional',
                stat_tbl_o='optional',
                dcwgt_f='optional',
                refgrade_f='optional',
                refwgt_f='optional',
                secfld1_f='optional',
                secfld2_f='optional',
                mingrade_p=0,
                maxgrade_p='optional',
                trantype_p=1,
                minsimgr_p=0,
                maxsimgr_p=999999,
                lotail_p=1,
                lopar_p=1,
                uptail_p=1,
                uppar_p=1,
                nsim_p=1,
                xpppc_p=1,
                ypppc_p=1,
                zpppc_p=1,
                xmin_p=1,
                ymin_p=1,
                zmin_p=1,
                xsize_p=1,
                ysize_p=1,
                zsize_p=1,
                nx_p=10,
                ny_p=10,
                nz_p=10,
                seed_p='optional',
                mindatpt_p=1,
                maxdatpt_p=12,
                maxsimpt_p=12,
                sstrat_p=0,
                multgrid_p=0,
                maxperoc_p=0,
                ktype_p=0,
                vmodnum_p=1,
                corcoeff_p=0,
                varred_p=1,
                rectgrid_p=0,
                dbglevel_p=0,
                sdist1_p=50,
                sdist2_p=50,
                sdist3_p=50,
                sangle1_p=0,
                sangle2_p=0,
                sangle3_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        VMODPARM:     Variogram model parameter file. Each record in this file defines a
        variogram model type and its parameters.
        required: Yes; default: ; range: 

        IN:     Input sample data file. This must include the coordinate fields X , Y , Z
        and the grade field GRADE . It may also include the declustering weights
        field DCWGT and the secondary field SECFLD1 . If an IN
        required: No; default: ; range: 

        PROTO:     Input prototype model file to define the regular grid for the simulated
        points. If the PROTO file contains records then simulated points are
        created for all parent cells that contain at least one subcell. If the
        PROTO file does not contain any records then simulated points are created
        for all parent cells. The number of simulated points per parent cell is
        defined by the parameters XPPPC , YPPPC , ZPPPC . If the file is not
        specified then the grid is defined by the parameters XMIN , XSIZE , NX
        etc.
        required: No; default: ; range: 

        REFDIST:     Input reference distribution to define required transformation. As well as
        specifying the file, parameter TRANTYPE must be set to 2. The file must
        include the field REFGRADE , to define the reference distribution, and may
        also include the field REFWGT to define declustering weights.
        required: No; default: ; range: 

        SECFILE:     Secondary file, required if KTYPE = 2,3 or 4. This contains the locally
        varying mean ( KTYPE =2), the external drift variable ( KTYPE =3) or the
        secondary variable for collocated cokriging ( KTYPE =4). This must be a
        block model file with a cell or subcell (and data value) at each simulated
        point. - if the grid of simulated points is defined by the PROTO file and
        the file does not contain any records then the SECFILE file should have
        the same model parameters (XMORIG, XINC, NX, etc) as the PROTO file and
        should have subcells as defined by parameters XPPPC , YPPPC , ZPPPC at
        every possible location. - if the PROTO file contains records then the
        SECFILE file must still have the same model parameters and subcells
        defined by parameters XPPPC , YPPPC , ZPPPC . However the subcells need
        only cover a 3D rectangular volume as defined by the minimum and maximum
        parent cell in each of the X, Y and Z directions. - if the grid of
        simulated points is defined by parameters XMIN , XSIZE , NX etc then the
        SECFILE model must include a cell or subcell, and data value, at every
        grid location. The model parameters do not matter as long as there is a
        cell or subcell at all grid points.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        POINTS:     Output points file containing simulated points. As well as the coordinate
        fields XPT, YPT, ZPT the file will contain the simulated value GRADE and
        field SIMNUM giving the simulation (realization) number. This is an
        integer, starting at 1, with a maximum of NSIM .
        required: Yes; default: ; range: 

        MODEL:     Output block model file containing simulated points. This contains the
        same data as the POINTS file, but in block model format. If multiple
        realizations have been selected ( NSIM greater than 1) then the field name
        for each realization will be SIM1, SIM2, SIM3, etc. A maximum of 44
        realizations are allowed in the MODEL file in the single precision version
        of your project, or 200 in the double precision version. If the grid of
        simulated points is defined by the PROTO file then the MODEL file will
        have the same model parameters (XMORIG, XINC, NX, etc); otherwise the
        model parameters will be based on parameters XMIN , XSIZE , NX etc.
        required: No; default: ; range: 

        TRANDIST:     Output file for the transformation table. This will contain the grade
        field GRADE from the IN sample file and the field TRANDATA giving the
        transformed value. The file will be sorted by GRADE .
        required: No; default: ; range: 

        STAT_TBL:     Output statistics table giving statistics for the input sample data and
        the output simulated values.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of the GRADE field in the IN sample file.
        required: Yes; default: X; range: 

        Y:     Y coordinate of the GRADE field in the IN sample file.
        required: Yes; default: Y; range: 

        Z:     Z coordinate of the GRADE field in the IN sample file.
        required: Yes; default: Z; range: 

        GRADE:     Field in the IN sample file defining the grade to be simulated. This may
        contain either the original sample values or the normal score values,
        depending on parameter TRANTYPE .
        required: Yes; default: ; range: 

        DCWGT:     Optional declustering weights field in the IN sample file.
        required: No; default: ; range: 

        REFGRADE:     Reference grade field, defining the reference distribution, in the REFDIST
        file.
        required: No; default: ; range: 

        REFWGT:     Optional reference weight field, defining declustering weights, in the
        REFDIST file.
        required: No; default: ; range: 

        SECFLD1:     Optional secondary field in the IN sample file. The contents of this field
        depend on the value of parameter KTYPE .
        required: No; default: ; range: 

        SECFLD2:     Field in secondary file SECFILE . This is required if KTYPE = 2,3 or 4.
        The field contains the locally varying mean ( KTYPE =2), the external
        drift variable ( KTYPE =3) or the secondary variable for collocated
        cokriging ( KTYPE =4) .  If @KTYPE=4 *SECFLD2 must be untransformed.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MINGRADE:     Minimum GRADE value input from the IN sample file. Values less than the
        minimum are ignored.
        required: No; default: 0; range: Undefined

        MAXGRADE:     Maximum GRADE value input from the IN sample file. Values greater than the
        maximum are ignored.
        required: No; default: ; range: Undefined

        TRANTYPE:     Transform data option: 0 = no transformation; the field GRADE in the IN
        sample file is assumed to have a standard normal distribution, and the
        simulated value GRADE in the output POINTS file will also be
        untransformed. 1 = transform the GRADE values using the standard normal
        distribution. 2 = transform the GRADE values using the distribution
        defined in the input file REFDIST .
        required: No; default: 1; range: 0,2

        MINSIMGR:     Minimum simulated grade value. This is used to restrict values in the
        back-transformation process.
        required: No; default: 0; range: Undefined

        MAXSIMGR:     Maximum simulated grade value. This is used to restrict values in the
        back-transformation process.
        required: No; default: 999999; range: Undefined

        LOTAIL:     Back-transformation method in the lower tail of the distribution to a
        minimum grade of MINSIMGR . 1 = Linear interpolation. 2 = Power model
        interpolation. The power used is defined by LOPAR .
        required: No; default: 1; range: 1,2

        LOPAR:     Power parameter used in back-transformation of grades in the lower tail of
        the distribution to a minimum of MINSIMGR . LOTAIL must be set to 2.
        required: No; default: 1; range: 0,+

        UPTAIL:     Back-transformation method in the upper tail of the distribution to a
        maximum grade of MAXSIMGR . 1 = Linear interpolation. 2 = Power model
        interpolation. The power used is defined by UPPAR . 4 = Hyperbolic model
        extrapolation using power parameter defined by UPPAR .
        required: No; default: 1; range: 1,4

        UPPAR:     Power parameter used in back-transformation of grades in the upper tail of
        the distribution to a maximum of MAXSIMGR . UPTAIL must be set to 2 or 4.
        required: No; default: 1; range: 0,+

        NSIM:     Number of realizations to generate. If a MODEL file has been selected then
        the maximum number of realizations is 44 for the single precision version
        of Datamine Studio packages or 200 for the double precision version. If a
        MODEL file has not been selected then there is no limit on the maximum
        number of realizations.
        required: No; default: 1; range: 1,+

        XPPPC:     The number of simulated points per parent cell to be created in the X
        direction in the output MODEL file. This corresponds to the number of
        subcells per parent cell in the X direction. The value of parameter XPPPC
        is also stored as the default value of implicit field XPPPC in the output
        POINTS file so that it can be accessed by subsequent processes eg CSMODEL.
        required: No; default: 1; range: Undefined

        YPPPC:     The number of simulated points per parent cell to be created in theY
        direction in the output MODEL file. This corresponds to the number of
        subcells per parent cell in the Y direction. The value of parameter YPPPC
        is also stored as the default value of implicit field YPPPC in the output
        POINTS file so that it can be accessed by subsequent processes eg CSMODEL.
        required: No; default: 1; range: Undefined

        ZPPPC:     The number of simulated points per parent cell to be created in the Z
        direction in the output MODEL file. This corresponds to the number of
        subcells per parent cell in the Z direction. The value of parameter ZPPPC
        is also stored as the default value of implicit field ZPPPC in the output
        POINTS file so that it can be accessed by subsequent processes eg CSMODEL.
        required: No; default: 1; range: Undefined

        XMIN:     Minimum X coordinate of the regular grid of simulated points created in
        the output POINTS and MODEL files. If a PROTO file is specified this
        parameter is ignored.
        required: No; default: 1; range: Undefined

        YMIN:     Minimum Y coordinate of the regular grid of simulated points created in
        the output POINTS and MODEL files. If a PROTO file is specified this
        parameter is ignored.
        required: No; default: 1; range: Undefined

        ZMIN:     Minimum Z coordinate of the regular grid of simulated points created in
        the output POINTS and MODEL files. If a PROTO file is specified this
        parameter is ignored.
        required: No; default: 1; range: Undefined

        XSIZE:     Spacing between simulated points inthe X direction. If a PROTO file is
        specified this parameter is ignored.
        required: No; default: 1; range: Undefined

        YSIZE:     Spacing between simulated points inthe Y direction. If a PROTO file is
        specified this parameter is ignored.
        required: No; default: 1; range: Undefined

        ZSIZE:     Spacing between simulated points inthe Z direction. If a PROTO file is
        specified this parameter is ignored.
        required: No; default: 1; range: Undefined

        NX:     Number of simulated points in the X direction. If a PROTO file is
        specified this parameter is ignored.
        required: No; default: 10; range: 1,+

        NY:     Number of simulated points in the Y direction. If a PROTO file is
        specified this parameter is ignored.
        required: No; default: 10; range: 1,+

        NZ:     Number of simulated points in the Z direction. If a PROTO file is
        specified this parameter is ignored.
        required: No; default: 10; range: 1,+

        SEED:     Random number seed. This should be a large odd integer. If the same seed
        is used for multiple runs then the same set of simulated grades will be
        created.
        required: No; default: ; range: 1,+

        MINDATPT:     The minimum number of original data to be used to simulate a grid node. If
        there are fewer than MINDATPT data points the node is not simulated.
        required: No; default: 1; range: 1,+

        MAXDATPT:     The maximum number of original data to be used to simulate a grid node. If
        there are more than MAXDATPT data points the nearest points are selected.
        required: No; default: 12; range: 1,48

        MAXSIMPT:     The maximum number of previously simulated nodes to use for the simulation
        of another node.
        required: No; default: 12; range: 1,48

        SSTRAT:     Search strategy: 0 = data and previously simulated grid nodes are searched
        separately. Data are searched with a super block search and previously
        simulated nodes with a spiral search. 1 = data are relocated to grid nodes
        and a spiral search is used. MINDATPT and MAXDATPT are not then
        considered.
        required: No; default: 0; range: 0,1

        MULTGRID:     Search strategy for previously simulated nodes: 0 = spiral search if
        greater than or equal to 1 then MULTGRID defines the number of grids for a
        multiple grid simulation.
        required: No; default: 0; range: 

        MAXPEROC:     Maximum number of original data points per octant. If set to zero then
        octant search is not used. If octant search is used then MAXDATPT is
        ignored.
        required: No; default: 0; range: 0,+

        KTYPE:     Kriging type: 0 = simple kriging 1 = ordinary kriging 2 = simple kriging
        with a locally varying mean where the mean is defined by field SECFLD2 in
        file SECFILE . 3 = kriging with an external drift where the drift is
        defined by field SECFLD2 in file SECFILE . 4 = collocated cokriging with
        one secondary grade defined by field SECFLD2 in file SECFILE .
        required: No; default: 0; range: 0,4

        VMODNUM:     Variogram model number in VMODPARM file.
        required: No; default: 1; range: 

        CORCOEFF:     Correlation coefficient used for collocated kriging (ie when KTYPE = 4).
        required: No; default: 0; range: 

        VARRED:     Variance reduction factor used for collocated kriging (ie when KTYPE = 4)
        .
        required: No; default: 1; range: Undefined

        RECTGRID:     Rectangular grid flag. This only applies if there are cells in the input
        PROTO model.  Option  Description  0  Simulated points will only be output
        where the points lie within a parent cell as defined by the PROTO model.
        1  Simulated points will be output at all locations inside the 3D
        rectangular volume enclosing the PROTO cells. This is essential if the
        output model file is to be used as the secondary file for a subsequent run
        of SGSIM with KTYPE=4 for cosimulation.
        required: No; default: 0; range: 0,1

        DBGLEVEL:     Debug level. Controls the amount of debug information written to the debug
        file _sgsdbg.txt. 0 is the minimum and 3 the maximum.
        required: No; default: 0; range: 0,3

        SDIST1:     Search distance in the X direction. This may be a rotated X direction if
        parameters SANGLE1 , SANGLE2 or SANGLE3 are non zero.
        required: No; default: 50; range: Undefined

        SDIST2:     Search distance in the Y direction. This may be a rotated Y direction if
        parameters SANGLE1 , SANGLE2 or SANGLE3 are non zero.
        required: No; default: 50; range: Undefined

        SDIST3:     Search distance in the Z direction. This may be a rotated Z direction if
        parameters SANGLE1 , SANGLE2 or SANGLE3 are non zero.
        required: No; default: 50; range: Undefined

        SANGLE1:     First rotation angle for search ellipsoid. The rotation must be around the
        Z axis.
        required: No; default: 0; range: -360,360

        SANGLE2:     Second rotation angle for search ellipsoid. The rotation must be around
        the X axis.
        required: No; default: 0; range: -360,360

        SANGLE3:     Third rotation angle for search ellipsoid. The rotation must be around the
        Y axis.
        required: No; default: 0; range: -360,360

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.sgsim).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SGSIM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def slimod(self,
                proto_i,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Input prototype model describing the model parameters. Normally set up by
        PROTOM. Must contain the numeric fields XC, YC, ZC, IJK (explicit) and
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ (implicit) and XINC, YINC, ZINC as
        explicit fields.
        required: Yes; default: ; range: 

        IN:     Input model file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model file. This will be sorted on IJK.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.slimod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SLIMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def sliper(self,
                perimin_i,
                mode_p,
                startpos_p,
                stepsize_p,
                numsteps_p,
                intersec_o='optional',
                perimout_o='optional',
                close_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file containing at least 2 perimeters. This must be in
        standard DATAMINE format [XP,YP,ZP,PTN,PVALUE, all numeric and explicit]
        with XP and YP variable and ZP fixed for each perimeter. The file must
        contain at least two perimeters with different ZP values.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        INTERSEC:     An optional output intersections file containing the coordinates X1,Y1,Z1
        of the end points of each intersection line, and the PVALUE of the
        intersected perimeter. At least 1 output file must be specified.
        required: No; default: ; range: 

        PERIMOUT:     An optional output perimeter file in standard datamine format containing
        the intersection perimeters. At least 1 output file must be specified.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODE:     Option Description 1 FOR A PLAN TO NS CONVERSION. 2 FOR A PLAN TO EW
        CONVERSION. 3 FOR A NS TO EW CONVERSION. 4 FOR A NS TO PLAN CONVERSION. 5
        FOR A EW TO NS CONVERSION. 6 FOR A EW TO PLAN CONVERSION.
        required: Yes; default: 1; range: 1,6

        STARTPOS:     Starting position for intersection planes.
        required: Yes; default: ; range: Undefined

        STEPSIZE:     Interval between intersection planes.
        required: Yes; default: ; range: Undefined

        NUMSTEPS:     Number of intersection planes.
        required: Yes; default: ; range: Undefined

        CLOSE:     nan
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.sliper).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SLIPER ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def smuhis(self,
                in_i,
                out_o,
                value_f,
                variance_f,
                vmodparm_i='optional',
                perim_i='optional',
                pcode_f='optional',
                dvmethod_p=3,
                vartype_p=1,
                smudist_p=1,
                disvar_p=0,
                density_p=1,
                addcon_p=0,
                recovery_p=1,
                binsize_p=1,
                minimum_p=0,
                numbins_p=50,
                vmodnum_p=1,
                log_p=0,
                smuxinc_p=1,
                smuyinc_p=1,
                smuzinc_p=1,
                xstep_p=1,
                ystep_p=1,
                zstep_p=1,
                ipoints_p=6,
                jpoints_p=6,
                kpoints_p=6,
                datamean_p='optional',
                infoeff_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file.
        required: Yes; default: ; range: 

        VMODPARM:     Variogram model parameter file. A variogram model is only required if
        DVMETHOD = 2 or 3.
        required: No; default: ; range: 

        PERIM:     Optional bench perimeter file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. This will contain one record for each histogram bin plus one
        record for the total model.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     A field in the model file which contains the kriged grade estimate.
        required: Yes; default: ; range: 

        VARIANCE:     A field in the model file which contains the kriging variance (eg as
        created by ESTIMA).
        required: Yes; default: ; range: 

        PCODE:     Optional perimeter key field.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DVMETHOD:     Method for calculating dispersion variance (3) Option Description 1 by
        parameter DISVAR 2 user defines the variogram model and the dimensions of
        the SMU by parameter. A single dispersion variance is calculated for the
        SMU within a parent cell, and this value is used for all cells and
        subcells. 3 user defines the variogram model and the dimensions of the SMU
        by parameter. A dispersion variance is calculated for the SMU within each
        cell and subcell in the model.
        required: No; default: 3; range: 1,3

        VARTYPE:     Method for calculating the variance of a sample in a cell (1). This only
        applies if DVMETHOD = 3. Option Description 1 the exact dimensions of the
        cell are used 2 the cell is approximated to one of a discrete number of
        cells. The values for these cells are stored to avoid the need for
        recalculation for the cell of the same size. This gives a large speed
        improvement
        required: No; default: 1; range: 1,2

        SMUDIST:     Distribution of SMUs: (1) Option Description 1 normal 2 lognormal 3
        truncated normal
        required: No; default: 1; range: 1, 3

        DISVAR:     Dispersion variance value. (0) This is only required if DVMETHOD =1.
        required: No; default: 0; range: Undefined

        DENSITY:     Default density if no density field is defined in the model. (1)
        required: No; default: 1; range: Undefined

        ADDCON:     Additive constant for three parameter lognormal distribution of SMUs. (0).
        This only applies if SMUDIST =2.
        required: No; default: 0; range: Undefined

        RECOVERY:     Value for recovered fraction (1). If the recovered fraction is greater
        than this value then the complete block is considered above cut-off. If
        the recovered fraction is less than 1- RECOVERY then none of the block is
        considered to be above cut-off.
        required: No; default: 1; range: Undefined

        BINSIZE:     Bin width for histogram. (1)
        required: No; default: 1; range: Undefined

        MINIMUM:     Lower bound of first bin. If SMUDIST =3, then MINIMUM must be set to zero.
        (0)
        required: No; default: 0; range: Undefined

        NUMBINS:     Number of bins, maximum 200. (50)
        required: No; default: 50; range: Undefined

        VMODNUM:     Variogram model reference number as defined by the VREFNUM field in the
        VMODPARM file. This only applies if DVMETHOD = 2 or 3.
        required: No; default: 1; range: Undefined

        LOG:     Log/Normal variogram flag. Default(0). The variogram model, as defined by
        VGRAM , is Normal if LOG =0 or Lognormal if LOG =1.
        required: No; default: 0; range: 0,1

        SMUXINC:     X dimension of the Selective Mining Unit (1). This only applies if
        DVMETHOD = 2 or 3.
        required: No; default: 1; range: Undefined

        SMUYINC:     Y dimension of the Selective Mining Unit (1) This only applies if DVMETHOD
        required: No; default: 1; range: Undefined

        SMUZINC:     Z dimension of the Selective Mining Unit (1) This only applies if DVMETHOD
        required: No; default: 1; range: Undefined

        XSTEP:     X step size for subcell approximation in variance calculations. This is
        only used if DVMETHOD =3 and VARTYPE =2. This must be less than the parent
        cell dimension in X. (1)
        required: No; default: 1; range: Undefined

        YSTEP:     Y step size for subcell approximation in variance calculations. This is
        only used if DVMETHOD =3 and VARTYPE =2. This must be less than the parent
        cell dimension in Y. (1)
        required: No; default: 1; range: Undefined

        ZSTEP:     Z step size for subcell approximation in variance calculations. This is
        only used if DVMETHOD =3 and VARTYPE =2. This must be less than the parent
        cell dimension in Z. (1)
        required: No; default: 1; range: Undefined

        IPOINTS:     Number of discretisation points in X dimension to simulate model cell (6)
        required: No; default: 6; range: Undefined

        JPOINTS:     Number of discretisation points in Y dimension to simulate model cell (6)
        required: No; default: 6; range: Undefined

        KPOINTS:     Number of discretisation points in Z dimension to simulate model cell (6)
        required: No; default: 6; range: Undefined

        DATAMEAN:     Mean grade of the input data (*VALUE). This is compulsory if both a normal
        variogram model is selected (@LOG=0) and a lognormal distribution of SMUs
        is selected (@SMUDIST=3). The value is used in the calculation of the
        variance.
        required: No; default: ; range: Undefined

        INFOEFF:     The information effect variance. (0) This is subtracted from the variance.
        Refer to Journel and Huijbregts, Mining Geostatistics, pp 449-454 for
        details.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.smuhis).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SMUHIS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def smumod(self,
                in_i,
                out_o,
                value_f,
                variance_f,
                frrec_f,
                valrec_f,
                vmodparm_i='optional',
                cutoff_p=1,
                dvmethod_p=3,
                vartype_p=1,
                smudist_p=1,
                disvar_p=0,
                addcon_p=0,
                vmodnum_p=1,
                log_p=0,
                smuxinc_p=1,
                smuyinc_p=1,
                smuzinc_p=1,
                xstep_p=1,
                ystep_p=1,
                zstep_p=1,
                ipoints_p=6,
                jpoints_p=6,
                kpoints_p='optional',
                datamean_p='optional',
                infoeff_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file containing the kriged grade estimate and the kriging
        variance.
        required: Yes; default: ; range: 

        VMODPARM:     Variogram model parameter file. A variogram model is only required if
        DVMETHOD = 2 or 3.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output model file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     A field in the model file which contains the kriged grade estimate.
        required: Yes; default: ; range: 

        VARIANCE:     A field in the model file which contains the kriging variance (eg as
        created by ESTIMA).
        required: Yes; default: ; range: 

        FRREC:     The field to be created in the output model to store the recovered
        fraction.
        required: Yes; default: ; range: 

        VALREC:     The field to be created in the output model to store the grade of the
        recovered fraction.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CUTOFF:     Cut-off grade for calculation of recovered fraction and grade.
        required: No; default: 1; range: 0.000001,+

        DVMETHOD:     Method for calculating dispersion variance (3) Option Description 1 by
        parameter DISVAR 2 user defines variogram model and the dimensions of the
        SMU by parameter. A single dispersion variance is calculated for the SMU
        within a parent cell, and this value is used for all cells and subcells. 3
        user defines variogram model and the dimensions of the SMU by parameter. A
        dispersion variance is calculated for the SMU within each cell and subcell
        in the model.
        required: No; default: 3; range: 1,3

        VARTYPE:     Method for calculating the variance of a sample in a cell (1). This only
        applies if DVMETHOD = 3. Option Description 1 the exact dimensions of the
        cell are used 2 the cell is approximated to one of a discrete number of
        cells. The values for these cells are stored to avoid the need for
        recalculation for the cell of the same size. This gives a large speed
        improvement
        required: No; default: 1; range: 1,2

        SMUDIST:     Distribution of SMUs: (1) =1 normal =2 lognormal =3 truncated normal
        required: No; default: 1; range: 1, 3

        DISVAR:     Dispersion variance value. (0) This is only required if DVMETHOD =1.
        required: No; default: 0; range: Undefined

        ADDCON:     Additive constant for three parameter lognormal distribution of SMUs. (0).
        This only applies if SMUDIST =2.
        required: No; default: 0; range: Undefined

        VMODNUM:     Variogram model reference number as defined by the VREFNUM field in the
        VMODPARM file. This only applies if DVMETHOD = 2 or 3.
        required: No; default: 1; range: Undefined

        LOG:     Log/Normal variogram flag. Default(0). The variogram model, as defined by
        VMODNUM is, Normal if LOG =0 Lognormal if LOG =1.
        required: No; default: 0; range: 0,1

        SMUXINC:     X dimension of the Selective Mining Unit (1). This only applies if
        DVMETHOD = 2 or 3.
        required: No; default: 1; range: Undefined

        SMUYINC:     Y dimension of the Selective Mining Unit (1) This only applies if DVMETHOD
        required: No; default: 1; range: Undefined

        SMUZINC:     Z dimension of the Selective Mining Unit (1) This only applies if DVMETHOD
        required: No; default: 1; range: Undefined

        XSTEP:     X step size for subcell approximation in variance calculations. This is
        only used if DVMETHOD =3 and VARTYPE =2. This must be less than the parent
        cell dimension in X. (1)
        required: No; default: 1; range: Undefined

        YSTEP:     Y step size for subcell approximation in variance calculations. This is
        only used if DVMETHOD =3 and VARTYPE =2. This must be less than the parent
        cell dimension in Y. (1)
        required: No; default: 1; range: Undefined

        ZSTEP:     Z step size for subcell approximation in variance calculations. This is
        only used if DVMETHOD =3 and VARTYPE =2. This must be less than the parent
        cell dimension in Z. (1)
        required: No; default: 1; range: Undefined

        IPOINTS:     Number of discretisation points in X to simulate model cell (6)
        required: No; default: 6; range: Undefined

        JPOINTS:     Number of discretisation points in Y to simulate model cell (6)
        required: No; default: 6; range: Undefined

        KPOINTS:     Number of discretisation points in Z to simulate model cell (6)
        required: No; default: ; range: Undefined

        DATAMEAN:     Mean grade of the input data (*VALUE). This is compulsory if both a normal
        variogram model is selected (@LOG=0) and a lognormal distribution of SMUs
        is selected (@SMUDIST=3). The value is used in the calculation of the
        variance.
        required: No; default: ; range: Undefined

        INFOEFF:     The information effect variance. (0) This is subtracted from the variance.
        Refer to Journel and Huijbregts, Mining Geostatistics, pp 449-454 for
        details.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.smumod).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SMUMOD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def sortx(self,
                in_i,
                out_o,
                key1_to_10_f,
                order_p=1,
                keysfrst_p=1,
                roworder_p=1,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be sorted.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Sorted file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for sorting on.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ORDER:     Option  Description  1  for ascending order  2  for descending order (1)
        required: No; default: 1; range: 1,2

        KEYSFRST:     Option  Description  0  output fields in the same order as the input table
        1  output key fields first
        required: No; default: 1; range: 0,1

        ROWORDER:     Option  Description  0  Rows which contain duplicate key field values
        could be in any order (faster)  1  Rows which contain duplicate key field
        values will be in the input file order (slower) (1)
        required: No; default: 1; range: 0,1

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.sortx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SORTX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def splat(self,
                in1_i,
                in2_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     First input file.
        required: Yes; default: ; range: 

        IN2:     Second input file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output merged file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.splat).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SPLAT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def splico(self,
                plot_o,
                cmin_p,
                cmax_p,
                ci_p,
                gridinc_p,
                proto_i='optional',
                bound_i='optional',
                wiretr_i='optional',
                wirept_i='optional',
                model_i='optional',
                string_o='optional',
                x_f='optional',
                y_f='optional',
                field_f='optional',
                seam_f='optional',
                plane_p='optional',
                position_p='optional',
                top_p='optional',
                bottom_p='optional',
                hilight_p='optional',
                hi_p='optional',
                charsize_p=3.5,
                colour_p=1,
                ndc_p=-1,
                power_p=2,
                radius_p=0,
                pvalst_p=1,
                pvalinc_p=1,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional',
                append_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last 6 values set in PROTO , then corresponding parameters need
        not be set. Optional only if APPEND=1
        required: No; default: ; range: 

        BOUND:     Optional bounding perimeter. No contours will produced outside this
        perimeter. Must contain fields XP, YP, ZP, PTN and PVALUE. This file must
        contain only one perimeter, must be clockwise and must not be closed.
        required: No; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: No; default: ; range: 

        WIREPT:     Input wireframe or raw data point file. The raw data point file must be
        sorted on X field.
        required: No; default: ; range: 

        MODEL:     Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC,
        XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK + FIELD field.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        STRING:     Optional output string file. If selected this file be written out as well
        as the plot file and will contain fields XP, YP, ZP, PTN and PVALUE. The
        value of PVALUE field is determined from the PVALST and PVALINC
        parameters.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X field in input point file. Only required if contouring raw data.
        required: No; default: ; range: 

        Y:     Y field in input point file. Only required if contouring raw data.
        required: No; default: ; range: 

        FIELD:     Field to be contoured. Only required if contouring raw data or solid
        model.
        required: No; default: ; range: 

        SEAM:     Seam ID field. Only required if contouring solid model.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CMIN:     Minimum contour value in user data units.
        required: Yes; default: ; range: Undefined

        CMAX:     Maximum contour value in user data units.
        required: Yes; default: ; range: Undefined

        CI:     Contour interval in user data units.
        required: Yes; default: ; range: Undefined

        GRIDINC:     Grid interval of mesh in user data units. This value is used to set up an
        internal mesh using input data. It is important to note that this mesh is
        used for contouring and not the original data.
        required: Yes; default: ; range: Undefined

        PLANE:     Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane.
        required: No; default: ; range: Undefined

        POSITION:     Position of the plane. For example if the XY plane is used a Z position is
        needed. Only required if neither TOP nor BOTTOM are specified.
        required: No; default: ; range: Undefined

        TOP:     Value of FIELD for which top of seam contour required. Only required if
        neither POSITION nor BOTTOM appear.
        required: No; default: ; range: Undefined

        BOTTOM:     Value of FIELD for which base of seam contour required. Only required if
        neither POSITION nor TOP appear. Both TOP and BOTTOM set for an isopach.
        required: No; default: ; range: Undefined

        HILIGHT:     Highlight every Nth contour with HI.
        required: No; default: ; range: Undefined

        HI:     Colour [as 'pen' number] for highlighting.
        required: No; default: ; range: Undefined

        CHARSIZE:     Character size in millimetres (3.5).
        required: No; default: 3.5; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        NDC:     Number of dec. places for annotation. Default value is for no
        annotation(-1).
        required: No; default: -1; range: Undefined

        POWER:     Interpolation power. Used for solid model or raw data contouring (2).
        required: No; default: 2; range: Undefined

        RADIUS:     Interpolation search radius. Used for solid model or raw data contouring
        (0).
        required: No; default: 0; range: Undefined

        PVALST:     If STRING file requested, for the first string to be written PVALUE will
        be set to PVALST. For the following strings PVALUE is incremented by
        PVALINC (1.0).
        required: No; default: 1; range: Undefined

        PVALINC:     If STRING file requested, PVALUE value increment (1.0).
        required: No; default: 1; range: Undefined

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimeter.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimeter.
        required: No; default: ; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.splico).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SPLICO ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def split(self,
                in_i,
                key_f,
                fnames_i='optional',
                ndp_p=0,
                maxfiles_p=50
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file. This file does not have to be sorted on the key field.
        required: Yes; default: ; range: 

        FNAMES:     Input file defining the file names to be used for each unique value in the
        KEYVALUE field. Must be sorted by FILENAME and have the fields; FILENAME A
        - Output file name to be created. KEYVALUE A/N- Value of the key field
        which will be written to the file defined in FILENAME. This field can be
        either alphanumeric or numeric but must be the same type as the KEY field.
        A record in the IN file may be written to more than one output file by
        having multiple records with the same KEYVALUE and different FILENAMEs in
        the FNAMES file. Similarly, records with different key values can be
        written to the same file by having multiple records with different
        KEYVALUEs and the same FILENAME.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        KEY:     Alphanumeric or numeric key field in the IN file used for selecting data.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        NDP:     Number of decimal places to be used for creating file names from a numeric
        KEY field (0).  Option  Description  0  do not display any digits after
        the decimal point. >0= replace the decimal point by the letter 'D' and
        display the specified number of digits following it. -1= create a file
        name using scientific notation.
        required: No; default: 0; range: -1,1

        MAXFILES:     Maximum number of files which will be created (50). If this maximum is
        exceeded an error message is printed and the process is terminated. The
        maximum allowed value is 250 files. Rules for creating file names from KEY
        field; If KEY field is alphanumeric: - only the first 24 characters will
        be used. - if a blank is encountered in the KEY value only those
        characters preceding the blank will be used. - if a decimal point is
        encountered only the character immediately following the decimal point
        will be used. If KEY field is numeric:  - all file names are preceeded by
        one of two letters; P = plus M = minus - file names that are too long due
        to a large number of decimal places will use only the first eight
        characters. - all numbers with more than 7 digits preceeding the decimal
        point will be converted to scientific notation. ie. 1.23456E+09 becomes
        P1235P06 - trace (TR) are written to the file TRACE. - maximum values (+)
        are written to PLUS. - undefined values (-) are written to MINUS.
        required: No; default: 50; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.split).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SPLIT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def st1gx(self,
                in_i,
                value_f,
                binsize_p='optional',
                minimum_p='optional',
                sturgess_p=0,
                logmode_p=0,
                perc_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Field for statistics.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        BINSIZE:     Bin width for histogram [computed].
        required: No; default: ; range: Undefined

        MINIMUM:     Minimum bin limit [computed].
        required: No; default: ; range: Undefined

        STURGESS:     Option Description 1 class interval [bin width] and minimum class value
        [bin limit] are calculated according to the following equation: Class
        interval = 1 + 3.3 log N [Sturgess Rule] and values within each bin are
        placed at the mid-point of each class (0).
        required: No; default: 0; range: 0,1

        LOGMODE:     Option Description 1 log transformation [base 10] is calculated (0).
        required: No; default: 0; range: 0,1

        PERC:     Option Description 0 numeric bin count for histogram; >0 percentage bin
        count for histogram (0).
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.st1gx).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'ST1GX ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def statcom(self,
                samples_i,
                model_i,
                mgrade_f,
                sgrade_f,
                out_o='optional',
                domain_f='optional',
                dcweight_f='optional',
                density_f='optional',
                excel_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     Input sample file.
        required: Yes; default: ; range: 

        MODEL:     Input model file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. This will contain the fields:  SGRADE: selected grade name
        (Sample). Can be different to MGRADE  [DOMAIN]: the selected domain, which
        must exist in both sample and model files.  MGRADE: selected grade name
        (Model). Can be different to SGRADE.  SNRECS: number of records (Sample)
        SNSAMPS: number of non-absent records (Sample)  SMINIMUM:min grade
        (Sample)  SMAXIMUM: max grade (Sample)  SMEAN: mean grade (Sample)
        SVARIANC: variance (Sample)  SSTDDEV: standard deviation (Sample)
        SCOVRTN%: coefficient of variation (Sample) : Standard Deviation / Mean
        SPCTL25: the 25th percentile of unweighted samples.  SMEDIAN: the median
        value of unweighted samples.  SPCTL75: the 75th percentile value of
        unweighted samples.  SMAD: the Mean Absolute Difference of unweighted
        samples.  WNRECS: number of records (weighted samples)  WNSAMPS: number of
        included weighted samples (Sample). Sample excluded if absent data grade,
        absent data weight or Weight field is not specified.  WMINIMUM: minimum
        grade of weighted samples.  WMAXIMUM: maximum grade of weighted samples.
        WMEAN: weighted mean grade (Sample)  WVARIANC: weighted variance grade
        (Sample)  WSTDDEV: weighted standard deviation grade (Sample)  WCOVRTN%:
        weighted coefficient of variation (Sample)  WPCTL25: the 25th percentile
        of weighted samples.  WMEDIAN: the median value of weighted samples.
        WPCTL75: the 75th percentile value of weighted samples.  WMAD: the Mean
        Absolute Difference of weighted samples.  MNRECS: number of records
        (Model)  MNSAMPS: number of non-absent records (Model)  MMINIMUM: min
        grade (Model)  MMAXIMUM: max grade (Model)  MMEAN: mean grade (Model)
        MVARIANC: variance (Model)  MSTDDEV: standard deviation (Model)  MCOVRTN%:
        coefficient of variation (Model)  MPCTL25: the 25th percentile of model
        values.  WMEDIAN: the median value of model values.  MPCTL75: the 75th
        percentile value of model values.  MMAD: the Mean Absolute Difference of
        model values.  MTONNES: model tonnes for each domain.  SMEAN%D: %
        difference between sample and model means.  SMMEAND: numeric difference
        between samples and model means.  WMEAN%D: % difference between weighted
        sample mean and model mean.  WMMEAND: numeric difference between weighted
        sample mean and model mean.  WGTFIELD: the weighting field used to
        calculated weighted sample values. Can be empty or containing absent
        values.  MFILE: the model file used to calculate statistics.  SFILE: the
        sample file used to calculate statistics.  DOMFIELD: the domain field (if
        specified) used to classify statistics.  DENSITY: the field (if specified)
        used to generate weighted grade statistics for the model by the cell
        volume*density. Also used in the calculation of the total tonnage for each
        domain.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        MGRADE:     Model field for statistics.
        required: Yes; default: ; range: 

        SGRADE:     Sample field for statistics.
        required: Yes; default: ; range: 

        DOMAIN:     Domain keyfield for statistics. Typically this would define an estimation
        domain.
        required: No; default: ; range: 

        DCWEIGHT:     Weighting field. Field used for weighting the samples. Typically this
        would be a declustered weight field derived from the GRIDDC or DECLUST
        processes
        required: No; default: ; range: 

        DENSITY:     Density field to enable calculation of tonnage weighted grade statistics
        for the model. If not selected a global density will be defined by the
        @DENSITY parameter.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        Excel:     Set to 1 to automatically load the domain statistics data file into Excel
        and display a graph of the sample to model variances and mean grade
        comparisons.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.statcom).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'STATCOM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def statnp(self,
                in_i,
                fieldlst_i='optional',
                fieldnam_f='optional',
                f1_to_10_f=['optional'],
                plot_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        F1_to_10:     First field for statistics. No fields specified means all.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLOT:     Option Description 1 send cumulative frequency plots to printer or print
        file (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.statnp).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'STATNP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def stats(self,
                in_i,
                fieldlst_i='optional',
                out_o='optional',
                fieldnam_f='optional',
                weight_f='optional',
                f1_to_20_f=['optional'],
                key1_to_10_f=['optional'],
                keysort_p='optional',
                pcntiles_p='optional',
                sortout_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        FIELDLST:     File to supply selected fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file. This will contain the fields:  FIELD: field for which
        statistics have been calculated  NRECORDS: total number of records in the
        input data (including those excluded by retrieval criteria)  NSAMPLES:
        number of records (samples) used to calculate the statistics  NMISVALS:
        number of missing values - either absent or excluded by retrieval criteria
        NUMTRACE: number of samples equal to TRACE  MINIMUM: minimum sample value
        MAXIMUM: maximum sample value  RANGE: range of the sample values  TOTAL:
        sum of the sample values  MEAN: mean of sample values  VARIANCE: variance
        of the sample values (Absent if fewer than two sample values)  STANDDEV:
        standard deviation of the input sample values  STANDERR: standard error of
        the input sample values  SKEWNESS: skewness of the sample values
        KURTOSIS: kurtosis of the sample values  GEOMEAN: geometric mean of the
        input sample values  SUMLOG: sum of the sample log values  MEANLOG: mean
        of the sample log values  LOGVAR: variance of the sample log values (If
        more than one sample value)  LOGESTM: log estimate of the mean  COVARTN%:
        coefficient of variation in percent  MIDRANGE: value mid-way between the
        minimum and maximum values  EQUAL0: number of samples with a value of zero
        NEGATIVE: number of negative samples  WGTFIELD: weight field used
        DATAFILE: name of the input data file  If keyfields have been specified
        then they will also be included. There will be one record for each numeric
        field for every combination of keyfields.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        FIELDNAM:     Field in FIELDLST to identify selected fields.
        required: No; default: ; range: 

        WEIGHT:     Weighting field.
        required: No; default: ; range: 

        F1_to_20:     First field for statistics. If no fields are specified then all fields
        will be used.
        required: No; default: ; range: 

        KEY1_to_10:     Keyfield 1 to 10 for statistics.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEYSORT:     Set to 1 to automatically sort the data by key field. Only relevant if any
        key fields have been defined.  =0 : Do not automatically sort by key
        fields. Use the record order of the input file to determine changes in key
        field values.  =1 : Automatically sort the input data by key fields.
        required: No; default: ; range: 

        PCNTILES:     Set to 1 to calculate percentiles. When calculating percentiles the
        process will take longer to run. If this option is selected it is useful
        to specify only the fields for which you wish to calculate the statistics.
        If this option is selected the Median Absolute Deviation (MAD) value is
        also calculated.  =0 : Do not calculate percentiles. Do not calculate the
        Median Absolute Deviation.  =1 : Calculate the 5, 10, 20, 25, 30, 40, 50,
        60, 75, 80, 90 and 95 percentiles and the Median Absolute Deviation.
        required: No; default: ; range: 

        SORTOUT:     Set to 1 to sort the output file by FIELD when key fields are being used.
        Sorting by FIELD makes it easier to compare values of variables across key
        fields when viewing the output file in the table editor.  =0 : Do not sort
        the output file.  =1 : Sort the output file by FIELD.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.stats).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'STATS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def subjoi(self,
                in1_i,
                in2_i,
                out_o,
                key1_to_10_f,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     First file to be updated (sorted on required keyfields).
        required: Yes; default: ; range: 

        IN2:     Second file (update file) (sorted on required keyfields).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for matching on.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.subjoi).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUBJOI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def subwve(self,
                in1_i,
                in2_i,
                out_o,
                key1_to_10_f,
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     First file to be updated (sorted on required keyfields).
        required: Yes; default: ; range: 

        IN2:     Second file (update file) (sorted on required keyfields).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for matching on.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.subwve).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUBWVE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def sudttr(self,
                wiretr_o,
                wirept_o,
                sid_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        WIRETR:     Wireframe triangle data file with the fields TRI-NO,PT1,PT2,PT3.
        required: Yes; default: ; range: 

        WIREPT:     Wireframe point data file with the fields PTN,XP,YP,ZP.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SID:     Surface identifier with a lower surface having the value -1, and a top
        surface the value +1 (-1).
        required: Yes; default: -1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.sudttr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUDTTR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def supes2(self,
                in_i,
                pvalue_f='PVALUE',
                xp_f='XP',
                yp_f='YP',
                zp_f='ZP',
                strbrk_f='optional',
                d0_f='optional',
                d1_f='optional',
                d2_f='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input perimeter file with the fields STRNO,PTN,XP,YP,ZP and optionally
        STRBRK, D0,D1,...D9.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        PVALUE:     String number field. This would be PVALUE for a standard perimeter file or
        STRNO for a file that originated from SURPAC (PVALUE)
        required: No; default: PVALUE; range: 

        XP:     Standard perimeter field XP (XP).
        required: No; default: XP; range: 

        YP:     Standard perimeter field YP (YP).
        required: No; default: YP; range: 

        ZP:     Standard perimeter field ZP (ZP).
        required: No; default: ZP; range: 

        STRBRK:     Field identifying breaks in strings that should be output as 'isolations'.
        This would be PVALUE for a file that originated from SURPAC.
        required: No; default: ; range: 

        D0:     First field to be included in the string file comment.
        required: No; default: ; range: 

        D1:     Second field to be included in the string file comment.
        required: No; default: ; range: 

        D2:     Third field to be included in the string file comment. Fields up to D9 can
        be specified.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.supes2).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUPES2 ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def supest(self,
                in_i,
                xp_f='XP',
                yp_f='YP',
                zp_f='ZP',
                desc1_f='optional',
                desc2_f='optional',
                desc3_f='optional',
                strno_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input perimeter file with the standard fields PVALUE,PTN,XP,YP,ZP and
        optionally PCODE.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        XP:     Standard perimeter field XP (XP).
        required: No; default: XP; range: 

        YP:     Standard perimeter field YP (YP).
        required: No; default: YP; range: 

        ZP:     Standard perimeter field ZP (ZP).
        required: No; default: ZP; range: 

        DESC1:     First field to be included in the string file comment.
        required: No; default: ; range: 

        DESC2:     Second field to be included in the string file comment.
        required: No; default: ; range: 

        DESC3:     Third field to be included in the string file comment.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        STRNO:     Method of calculating SURPAC string number (0). SURPAC string numbers are
        in the range 1-98. STRNO=0 uses the PVALUE field STRNO=n increments the
        PVALUE from n.
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.supest).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUPEST ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def supoob(self,
                in_i,
                xp_f,
                yp_f,
                zp_f,
                ptn_f='optional',
                desc1_f='optional',
                desc2_f='optional',
                desc3_f='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input point file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        XP:     Easting coordinate field.
        required: Yes; default: ; range: 

        YP:     Northing coordinate field.
        required: Yes; default: ; range: 

        ZP:     RL coordinate field.
        required: Yes; default: ; range: 

        PTN:     Point number field.
        required: No; default: ; range: 

        DESC1:     First field to be included in the string file comment.
        required: No; default: ; range: 

        DESC2:     Second field to be included in the string file comment.
        required: No; default: ; range: 

        DESC3:     Third field to be included in the string file comment.
        required: No; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.supoob).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUPOOB ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def suppcorr(self,
                    samples_i,
                    vgram_i,
                    smusizes_i,
                    grade_f,
                    infoeff_i='optional',
                    graph_o='optional',
                    stats_o='optional',
                    weight_f='optional',
                    vrefnum_p=0,
                    discx_p=5,
                    discy_p=5,
                    discz_p=5,
                    normsill_p=0,
                    angle1_or_2_or_3_p=0,
                    axis1_or_2_or_3_p=0
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     A Datamine Binary file (.dm) that contains sample positional information
        and supporting attributes.
        required: Yes; default: ; range: 

        VGRAM:     A Datamine experimental variogram parameter file
        required: Yes; default: ; range: 

        SMUSIZES:     A file containing the sizes of Selective Mining Units (SMUs)
        required: Yes; default: ; range: 

        INFOEFF:     You can (optionally) incorporate the information effect to the estimation
        of the grade tonnage curves: during the production stage, the actual
        grades are recovered and may then be taken into account so the decision
        between ore and waste is made upon more accurate estimates of the SMUs.
        Therefore you can anticipate future decisions before obtaining the
        production blast-holes results, because only the kriging variance of these
        SMUs final estimates is necessary.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        GRAPH:     A file containing the data required to construct scatter plot and
        histogram graphs relating to a locally-conditioned SMU model.
        required: No; default: ; range: 

        STATS:     A file containing summary statistical data (in Datamine binary format)
        relating to a locally-conditioned SMU model.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     The grade field (present in the samples file) that will be considered
        during the process of Uniform Conditioning.
        required: Yes; default: ; range: 

        WEIGHT:     An optional weighting field.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VREFNUM:     A reference number relating to an experimental variogram as defined in
        VGRAM
        required: No; default: 0; range: 

        DISCX:     Number of discretisation points in X direction as used for calculating the
        covariance of a cell with each of the surrounding samples. This is then
        used in calculating the kriging weights.
        required: No; default: 5; range: 

        DISCY:     Number of discretisation points in Y direction
        required: No; default: 5; range: 

        DISCZ:     Number of discretisation points in Z direction
        required: No; default: 5; range: 

        NORMSILL:     Use (1) or don't use (0) normalized variogram sill values during grade-
        tonnage curve generation.
        required: No; default: 0; range: 0,1

        ANGLE1/2/3:     Specify the first, second and/or third rotation angles, in degrees, to
        specify block anisotropy
        required: No; default: 0; range: 

        AXIS 1/2/3:     First, second and third rotation axes. 1=X, 2=Y, 3=Z. The first rotation
        is by ANGLE1 degrees clockwise around axis AXIS1, when viewed along the
        axis from positive values towards the origin. 2nd is ANGLE 2 etc.
        required: No; default: 0; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.suppcorr).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUPPCORR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def surcal(self,
                in_i,
                out_o,
                calctype_p,
                angle_p=1,
                recalc_p=0,
                weight_p=0,
                adjust_p=0,
                ndec_p=2,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file of reduced survey observations. This file will contain the
        following fields ((N) denotes Numeric, (A,8) denotes Alphanumeric field
        type and length):- INSTSTN (A,8) Survey station identifier for the
        instrument location. INSTHT (N) Instrument height. (Negative for
        instruments set below the survey station). RO (A,8) Survey station
        identifier for the reference object survey station. TARGET (A,8)
        Identifier of the survey station located. HZA (N) Mean horizontal angle
        measurement made to the target station. WCB (N) Whole Circle Bearing from
        INSTSTN to TARGET. QB (A,12)Quadrant Bearing INSTSTN to TARGET. WCBERR (N)
        Mean standard error or range of the measurements taken to establish the
        Whole Circle Bearing INSTSTN - TARGET. VA (N) Mean vertical angle
        measurement made to the target station. HDIST (N) Mean horizontal distance
        from INSTSTN to TARGET. HDERR (N) Mean standard error or range of
        horizontal distances from slope distances and vertical angles. RDIST (N)
        Reference plane distance from INSTSTN to TARGET as computed from the
        horizontal distance HDIST. VDIFF (N) Mean difference in elevation from
        INSTSTN to TARGET. VDERR (N) Mean standard error or range of computed
        height differences from INSTSTN to TARGET. PLANE (N) Reference plane used
        to compute RDIST from HDIST. If absent, RDIST = HDIST. FACTOR (N) Scale
        factor used to compute RDIST after reduction to PLANE. The default must be
        1. REFRACT (N) Coefficient of refraction used to adjust vertical angles
        where single measurements are made. ERRFLAG (N) Error flag field. Four
        digits may be set as follows:- ABCD e.g. 1001 A Horizontal angle tolerance
        was/was not exceeded. 1/0 B Vertical angle or vertical difference
        tolerances were /were not exceeded. 1/0 C Horizontal distance tolerance
        was/was not exceeded. 1/0 D The previous base-line (INSTSTN to RO)
        carried/ did not carry errors. >1/0 This file file may have been created
        as output from the SUROBS process.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file of newly coordinated survey stations. This file will contain
        the following fields:- STATION (A,8) Survey station identifier. X (N) X
        coordinate value. Y (N) Y coordinate value. Z (N) Z coordinate value. RO
        (A,8) Identity of station used to locate STATION. WCB (N) Whole Circle
        Bearing from STATION to RO. Referred to as azimuth elsewhere in your
        application. QB (A,12)Quadrant Bearing STATION to RO. (e.g. N 45.0000 E).
        HDIST (N) Horizontal distance from STATION to RO. RDIST (N) Reduced
        distance from STATION to RO, as computed at PLANE elevation. VDIFF (N)
        Vertical difference in height from STATION to RO. PLANE (N) Elevation to
        which HDIST has reduced to compute RDIST. If absent (-), no further
        reduction has been computed. FACTOR (N) Scale factor used to compute
        RDIST. REFRACT (N) Coefficient of refraction used to compute VDIFF where
        only a single forward vertical angle is used. HDERR (N) Mean standard
        error or range horizontal distances from RO to STATION. WCBERR (N) Mean
        standard error or range of horizontal angles used in computing the bearing
        from RO to STATION. VAERR (N) Mean standard error or range of vertical
        angles used in computing VDIFF from RO to STATION. ERRFLAG (N) Flag to
        identify when a measurement tolerance is exceeded. LOXORIG (N) Implicit
        local X origin field. LOYORIG (N) Implicit local Y origin field. LOZORIG
        (N) Implicit local Z origin field. ADJUST (N) Numeric field to identify
        final or temporary coordinates.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CALCTYPE:     Numeric flag to identify the method of coordinate computation to be used:
        0 = Automatic. 1 = Bearing and distance method. 2 = Angle and distance
        method. 3 = Resection by angles. 4 = Distance intersection. 5 = Bearing
        intersection. 6 = Angle intersection. 7 = Resection by distances. The
        default is the automatic method (0).
        required: Yes; default: 0; range: 0,7

        ANGLE:     Units of angle measurements : 1 = Degrees, minutes and seconds. [0-360] in
        the form DDD.MMSS 2 = Gradians. [0-400] The default angle unit is degrees,
        minutes and seconds (1).
        required: No; default: 1; range: 1,2

        RECALC:     Optional numeric flag to allow recalculation of stations established from
        a resurveyed base line. The default is not to have recalculation (0).
        required: No; default: 0; range: 0,1

        WEIGHT:     Optional flag numeric to allow assignment of weights proportional to the
        error values in the input file. The default is not to have weights
        assignment (0).
        required: No; default: 0; range: 0,1

        ADJUST:     Optional numeric flag to allow coordinate adjustment where redundant
        measurements occur. The adjustment is done by the least square error
        method. The default is to have coordinates computed from a single set of
        measurements (0).
        required: No; default: 0; range: 0,1

        NDEC:     Number of decimals in the output results summary. Only used if parameter
        PRINT is set to one (2).
        required: No; default: 2; range: Undefined

        PRINT:     Set to one to display a summary of results to the screen and print file.
        The default is not to print summary results (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.surcal).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURCAL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def surfip(self,
                proto_i,
                in_i,
                model_o,
                x_f,
                y_f,
                upper_f,
                lower_f,
                label_f,
                radius_p,
                trend_i='optional',
                perimin_i='optional',
                above_p='optional',
                within_p='optional',
                below_p='optional',
                power_p=2,
                minnop_p=5,
                maxstep_p='optional',
                splits_p=3,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Prototype model. Must contain at least the fields XC, YC, ZC, XINC, YINC,
        ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK.
        required: Yes; default: ; range: 

        IN:     Input intersection data. Must contain the fields X , Y , UPPER , LOWER.
        required: Yes; default: ; range: 

        TREND:     Trend coefficients file (as produced from process TREND) defining a
        surface to be subtracted from the data before interpolation and added back
        to the interpolated values for each cell or sub-cell. The field names are
        C0, CX, CY, CXY, CX2, CY2, CX2Y, CY2X etc.
        required: No; default: ; range: 

        PERIMIN:     Input perimeter file defining fault boundaries, or surface limits. One
        pass through the interpolation process is made for each perimeter on file,
        using only data lying within the perimeter, and generating only
        (sub-)cells lying within this perimeter. At the boundary, cells will be
        split into sub-cells, controlled by the SPLITS parameter.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output interpolated seam model.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Name of intersection X field.
        required: Yes; default: ; range: 

        Y:     Name of intersection Y field.
        required: Yes; default: ; range: 

        UPPER:     Name of intersection roof elevation field. Enter - or dummy if only LOWER
        supplied.
        required: Yes; default: ; range: 

        LOWER:     Name of intersection floor elevation field. Enter - or dummy if only UPPER
        supplied.
        required: Yes; default: ; range: 

        LABEL:     Name of numeric field to be generated with values corresponding to ABOVE ,
        WITHIN , BELOW.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        RADIUS:     Search radius.
        required: Yes; default: ; range: Undefined

        ABOVE:     Value of LABEL above seam.
        required: No; default: ; range: Undefined

        WITHIN:     Value of LABEL within seam.
        required: No; default: ; range: Undefined

        BELOW:     Value of LABEL below seam.
        required: No; default: ; range: Undefined

        POWER:     Weighting power (2).
        required: No; default: 2; range: Undefined

        MINNOP:     Minimum number of samples (5).
        required: No; default: 5; range: Undefined

        MAXSTEP:     Max. elevation difference before sub-cells interpolated in horizontal
        plane [0.5 seam thickness]. If MAXSTEP is exactly 0, then splitting will
        take place over the entire model generated, as controlled by SPLITS.
        required: No; default: ; range: Undefined

        SPLITS:     Controls splitting of sub-cells. The maximum number of sub-cells will be
        2** SPLITS in X and Y. Default =3 [i.e. 2**3] = a max of 8*8 subcells in
        the XY plane (3).
        required: No; default: 3; range: 1,3

        PRINT:     Option  Description  1  summary of parameters and average seam thickness
        displayed (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.surfip).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURFIP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def surobs(self,
                header_i,
                observ_i,
                control_i,
                out_o,
                tol_i='optional',
                error_o='optional',
                angle_p=1,
                vadmean_p=1,
                errtype_p=1,
                plane_p='optional',
                factor_p=1,
                refract_p='optional',
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        HEADER:     Input header information, containing survey job and location information.
        This file may have been created by the SURLOG process (input of field
        recorder data) or the screen editor process AED. This file must contain
        the following fields ((N) denotes Numeric, (A,8) denotes Alphanumeric
        field type and length):- JOBNUM (N) Survey job number. SURVEYOR (A,8)
        Surveyor's name. LEVEL (A,8) Region of survey. SECTION (A,8) Area of
        survey. INSTTYPE (A,4) Survey instrument or methods used.
        required: Yes; default: ; range: 

        OBSERV:     Input file of survey measurements. This file must contain the following
        fields ((N) denotes Numeric, (A,8) denotes Alphanumeric field type and
        length):- JOBNUM (N) Survey job number. INSTSTN (A,8) Survey station
        identifier for the instrument location. INSTHT (N) Instrument height.
        (Negative for instruments set below the survey station). RO (A,8) Survey
        station identifier for the reference object survey station. TARGET (A,8)
        Identifier of the survey station located. HZTARG (N) Horizontal direction
        measured to the target. VATARG (N) Vertical direction measured to the
        target. SDTARG (N) Slope distance measured to the target. TARGHT (N)
        Target height. (Negative for target set below the target point). HZRO (N)
        Horizontal direction measured to the reference object. VARO (N) Vertical
        direction measured to the reference object. SDRO (N) Slope distance
        measured to the referenec object. ROHT (N) Target height at the reference
        object. (Negative for target set below the target point). This file file
        may have been created as output from the SURLOG process.
        required: Yes; default: ; range: 

        CONTROL:     Input file of survey control stations. This file must contain the
        following fields ((N) denotes Numeric, (A,8) denotes Alphanumeric field
        type and length):- STATION (A,8) Survey station identifier. X (N) X
        coordinate value. Y (N) Y coordinate value. Z (N) Z coordinate value. RO
        (A,8) Identity of station used to locate STATION. WCB (N) Whole Circle
        Bearing from STATION to RO. Referred to as azimuth elsewhere in your
        application. QB (A,12)Quadrant Bearing STATION to RO. (e.g. N 45.0000 E).
        HDIST (N) Horizontal distance from STATION to RO. RDIST (N) Reduced
        distance from STATION to RO, as computed at PLANE elevation. VDIFF (N)
        Vertical difference in height from STATION to RO. PLANE (N) Elevation to
        which HDIST has reduced to compute RDIST. If absent (-), no further
        reduction has been computed. FACTOR (N) Scale factor used to compute
        RDIST. REFRACT (N) Coefficient of refraction used to compute VDIFF where
        only a single forward vertical angle is used. HDERR (N) Mean standard
        error or range of horizontal distances from RO to STATION. WCBERR (N) Mean
        standard error or range of horizontal angles used in computing the bearing
        from RO to STATION. VAERR (N) Mean standard error or range of vertical
        angles used in computing VDIFF from RO to STATION. VDERR (N) Mean standard
        error or range of computed VDIFF from RO to STATION. ERRFLAG (N) Flag to
        identify when a measurement tolerance is exceeded. ADJUST (N) Flag to
        identify if the station coordinates are adjusted. LOXORIG (N) Implicit
        local X origin field. LOYORIG (N) Implicit local Y origin field. LOZORIG
        (N) Implicit local Z origin field.
        required: Yes; default: ; range: 

        TOL:     Optional file of measurement tolerances for the flagging of errors in
        measurements processed from the input OBSERV file, and written to the
        output ERROR file, if supplied. This file must contain the following
        fields:- INSTTYPE (A,4) Survey instrument or methods used. STNTYPE (A,4)
        Must contain a value RO or TARGET, to allow different tolerances to be
        specified for checks onto existing base-lines (RO) and the establishment
        of new base- lines (TARGET). HDTOL (N) Maximum mean standard error of
        observed horizontal distance measurements. HZTOL (N) Maximum mean standard
        error of observed horizontal angle measurements. VATOL (N) Maximum mean
        standard error of observed vertical angle measurements. VDTOL (N) Maximum
        mean standard error of computed differences in elevation.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file of reduced survey observations. This file may be used as input
        to the SURCAL process, in order to compute survey station coordinates.
        This file will contain the following fields:- INSTSTN (A,8) Survey station
        identifier for the instrument location. INSTHT (N) Instrument height.
        (Negative for instruments set below the survey station). RO (A,8) Survey
        station identifier for the reference object survey station. TARGET (A,8)
        Identifier of the survey station located. HZA (N) Mean horizontal angle
        measurement made to the target station. WCB (N) Whole Circle Bearing from
        INSTSTN to TARGET. QB (A,12)Quadrant Bearing INSTSTN to TARGET. WCBERR (N)
        Mean standard error or range of measurements taken to establish the Whole
        Circle Bearing INSTSTN - TARGET. VA (N) Mean vertical angle measurement
        made to the target station. HDIST (N) Mean horizontal distance from
        INSTSTN to TARGET. HDERR (N) Mean standard error or range of horizontal
        distances from slope distances and vertical angles. RDIST (N) Reference
        plane distance from INSTSTN to TARGET as computed from the horizontal
        distance HDIST. VDIFF (N) Mean difference in elevation from INSTSTN to
        TARGET. VDERR (N) Mean standard error or range of computed height
        differences from INSTSTN to TARGET. PLANE (N) Reference plane used to
        compute RDIST from HDIST. If absent, RDIST = HDIST. FACTOR (N) Scale
        factor used to compute RDIST after reduction to PLANE. The default must be
        1. REFRACT (N) Coefficient of refraction used to adjust vertical angles
        where single measurements are made. ERRFLAG (N) Error flag field. Four
        digits may be set as follows:- ABCD e.g. 1001 A Horizontal angle tolerance
        was/was not exceeded. 1/0 B Vertical angle or vertical difference
        tolerances were /were not exceeded. 1/0 C Horizontal distance tolerance
        was/was not exceeded. 1/0 D The previous base-line (INSTSTN to RO)
        carried/ did not carry errors. >1/0
        required: Yes; default: ; range: 

        ERROR:     Optional output file of measurements that do not meet the tolerances
        specified in the input tolerance file ( TOL). If this file is not defined,
        all measurements will be sent to the output file . This file will contain
        the same fields as the output file of reduced survey measurements ( OUT).
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ANGLE:     Units of angle measurements : 1 = Degrees, minutes and seconds. [0-360] in
        the form DDD.MMSS 2 = Gradians. [0-400] The default angle unit is degrees,
        minutes and seconds (1).
        required: No; default: 1; range: 1,2

        VADMEAN:     Compute the mean of both forward and reverse angle and measurements if
        available. This will obviate the need to adjust for curvature and refract,
        defined in parameter REFRACT. The default is (1), to use forward and
        reverse measurements.
        required: No; default: 1; range: Undefined

        ERRTYPE:     Sets the error fields to report the mean standard error [1] or the range
        [2] of measurements. The default is to report mean standard errors (1).
        required: No; default: 1; range: 1,2

        PLANE:     Optional reference plane elevation to which horizontal distances will be
        computed. The default is not to reduce horizontal distances to reference
        plane (-).
        required: No; default: ; range: Undefined

        FACTOR:     Optional scale factor that may be applied to the reduced distance RDIST.
        The default setting is (1).
        required: No; default: 1; range: Undefined

        REFRACT:     Optional coeficient of refraction used for adjustment of vertical angles.
        The default is not to apply correction to vertical angle (-).
        required: No; default: ; range: Undefined

        PRINT:     Set to one to display a summary of results to the screen. The default is
        not to print summary results (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.surobs).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUROBS ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def surpoi(self,
                in_i,
                elev_i,
                out_o,
                xin_f,
                yin_f,
                trend_i='optional',
                radius_p='optional',
                power_p=2,
                minnop_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     The input data file, which must contain at least two fields which define
        the two- dimensional position of a series of points.
        required: Yes; default: ; range: 

        ELEV:     Input file containing elevation data that will be used to control the
        interpolation. It must contain the fields X, Y and UPPER, and may
        optionally contain the field LOWER.
        required: Yes; default: ; range: 

        TREND:     Optional input trend file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file that will contain all the fields that were in the input file,
        plus the interpolated elevation fields.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        XIN:     Name of the X field in the input data file.
        required: Yes; default: ; range: 

        YIN:     Name of the Y field in the input data file.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        RADIUS:     Search radius for interpolation [the default is the mean spacing between
        the elevation data points].
        required: No; default: ; range: Undefined

        POWER:     Power to be used for inverse power of distance weighting (2).
        required: No; default: 2; range: Undefined

        MINNOP:     Minimum number of samples required for interpolation (1).
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.surpoi).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURPOI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def surtac(self,
                control_i,
                in_i,
                attribut_i,
                pointou_o,
                segou_o,
                obtype_p,
                stype_f='optional',
                svalue_f='optional',
                station_f='optional',
                angle_p=1,
                voffset_p=1,
                period_p='optional',
                pidstart_p=1,
                pidincr_p=1,
                pvstart_p=1,
                pvincr_p=1,
                plane_p='optional',
                factor_p=1,
                rocheck_p=0,
                update_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        CONTROL:     Input control survey station file. This must contain the numeric fields X,
        Y and Z. A field identifying the station name is required and may be of
        type numeric or alpha-numeric. The default station naming field is STATION
        of type numeric.
        required: Yes; default: ; range: 

        IN:     Input tacheometry observation file. This must contain fields: INSTSTN
        Numeric survey station identifier of instrument location.. INSTHT Numeric
        instrument height. (Negative for instruments set below the survey
        station). RO Numeric survey station identifier of reference object. TARGET
        Numeric or alpha-numeric identifier of the point located. Additionally; if
        OBTYPE=1: HZTARG Numeric horizontal direction measured to the target.
        VATARG Numeric vertical direction measured to the target. SDTARG Numeric
        slope distance measured to the target. TARGHT Numeric target height.
        (Negative for target set below the target point). Optionally; check
        measurements to the reference survey station (RO),if OBTYPE=1: HZRO
        Numeric horizontal direction measured to the reference object. VARO
        Numeric vertical direction measured to the reference object. SDRO Numeric
        slope distance measured to the referenec object. ROHT Numeric target
        height at the reference object. Additionally; if OBTYPE=2: HZTARG Numeric
        horizontal direction measured to the target. VDTARG Numeric vertical
        distance from the survey instrument to the target. HDTARG Numeric
        horizontal distance measured to the target. TARGHT Numeric target height.
        (Negative for target set below the target point). Optionally; check
        measurements to the reference survey station (RO),if OBTYPE=2: HZRO
        Numeric horizontal direction measured to the reference object. VDRO
        Numeric vertical distance from the survey instrument to the reference
        object. HDRO Numeric horizontal distance measured to the reference object.
        ROHT Numeric target height at the reference object. (Negative for target
        set below the target point). Additionally; if OBTYPE=3: HZTARG Numeric
        horizontal direction measured to the target. VATARG Numeric vertical
        direction measured to the target. UPPERS Numeric upper stadia staff
        reading. MIDDLES Numeric middle stadia staff reading. LOWERS Numeric lower
        stadia staff reading. MFACTOR Numeric multiplication factor for the
        theodolite.. VFACTOR Numeric vertical difference factor. AFACTOR Numeric
        additive constant for theodolite. Additionally; if OBTYPE=4: XO Numeric X
        coordinate of the target. YO Numeric Y coordinate of the target. ZO
        Numeric Z coordinate of the target. IF OBTYPE=1 or 2, offset measurements
        may included. All measurements are taken at the measured point, in the
        directions indicated by the field names (LEFT,RIGHT UP,DOWN). LEFT and
        RIGHT offsets are taken perpendicular to the measured line, while UP and
        DOWN offsets may be perpendicular or vertical depending on the VOFFSET
        parameter. If offsets are measured, the following fields must be exist in
        the file:- LEFT Numeric distance left of line INSTSTN-TARGET, at
        SDTARG/HDTARG position. RIGHT Numeric distance right of line INSTSTN-
        TARGET, at SDTARG/HDTARG position. UP Numeric distance above line INSTSTN-
        TARGET, at SDTARG/HDTARG position. DOWN Numeric distance below line
        INSTSTN-TARGET, at SDTARG/HDTARG position. This file may have been created
        as output from the SURLOG process.
        required: Yes; default: ; range: 

        ATTRIBUT:     Input attribute file. This must contain PTYPE, PTEXT, PSYMBOL, PSYMSZE,
        PCODE and P. May also contain an alpha-numeric string type field.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        POINTOU:     Output point file. This will contain fields PID, X, Y, Z, PSYMBOL,
        PSYMSZE, P and PERIOD (numeric, explicit).
        required: Yes; default: ; range: 

        SEGOU:     Output string segment file. This will contain fields PID1, PID2, PVALUE,
        PTYPE, PTEXT, PCODE, P and PERIOD.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        STYPE:     Optional key field in ATTRIBUT and IN file for assignment of point and
        string attributes. If this field is not supplied by the user, PTYPE will
        be used by default and must exist in the input file.
        required: No; default: ; range: 

        SVALUE:     Optional key field in IN file for assignment of numeric string identifiers
        to the output string file. If this field is not supplied, field PVALUE
        will be used and must exist in the input file.
        required: No; default: ; range: 

        STATION:     Optional alphanumeric survey station identifier in the input CONTROL
        survey station file. If this field is not supplied the default numeric
        field STATION will be used.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        OBTYPE:     Input tacheometry observation type. This will be one of: 1 = Horizontal,
        vertical angles and slope distance measurements. 2 = Horizontal angle and
        distance and vertical difference. 3 = Horizontal, vertical angles and
        staff/stadia intercepts. 4 = Reduced X,Y,Z coordinates. The default
        observation type will be (1).
        required: Yes; default: 1; range: 1,4

        ANGLE:     Angle units used. This will be one of: 1 = Degrees, minutes and seconds;
        0-360 2 = Gradians; 0-400 The default angle unit will be Degrees, minutes
        and seconds (1).
        required: No; default: 1; range: 1,2

        VOFFSET:     Measurement method for UP/DOWN offsets. This will be one of:- 1 = UP/DOWN
        offsets measured vertically above/below distance measurement. 2 = UP/DOWN
        offsets measured perpendicular to the distance measurement. The default
        method will be vertical offset measurements (1).
        required: No; default: 1; range: 1,2

        PERIOD:     Numeric integer period number to be stored with output point and string
        segment data.
        required: No; default: ; range: Undefined

        PIDSTART:     Optional start point number for output to point file, field PID, if a
        numeric TARGET field does not exist in the input file. The default start
        number is 1.(1)
        required: No; default: 1; range: Undefined

        PIDINCR:     Optional point number increment, if no TARGET field exists in the input
        file. The default increment is 1.(1)
        required: No; default: 1; range: Undefined

        PVSTART:     Optional start string number for output to string file, field PVALUE, if
        no PVALUE field exists in the input file. The default start number is
        1.(1)
        required: No; default: 1; range: Undefined

        PVINCR:     Optional string number increment, if no PVALUE field exists in the input
        file. The default increment is 1.(1)
        required: No; default: 1; range: Undefined

        PLANE:     Optional reference plane elevation to which horizontal distances will be
        reduced prior to computation of grid distance and point coordinates. The
        default is absent data [-], no futher reductions are made to the
        horizontal distance.(-)
        required: No; default: ; range: Undefined

        FACTOR:     Optional scale factor to be applied to the plane distance, to compute the
        grid distance, prior to computation of point coordinates. The default
        value is 1.(1)
        required: No; default: 1; range: Undefined

        ROCHECK:     Optional flag = 1 to compare computed base line distance components with
        check measurements made. The default is 0, not to compare check base
        measurements, if present .(0)
        required: No; default: 0; range: 0,1

        UPDATE:     Optional flag = 1 to append computed points to the CONTROL file, if they
        are subsequently occupied by the survey instrument for continuation of the
        detail survey during execution of the process. The default is 0, not to
        append any computed points to the input CONTROL file. (0)
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.surtac).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURTAC ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def surtri(self,
                wiretr_o,
                wirept_o,
                perimin_i='optional',
                string_i='optional',
                pointin_i='optional',
                xpt_f='optional',
                ypt_f='optional',
                zpt_f='optional',
                surface_p=1,
                boundary_p=0,
                system_p=3,
                dmax_p='optional',
                maxlink_p='optional',
                tol_p='optional',
                cog_p=0,
                errtrace_p=0,
                hbratio_p=0.05,
                maxpts_p='optional',
                check_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file containing XP,YP,ZP,PTN, PVALUE and optional BOUNDARY
        fields. Perimeters may be included in the triangulation and/or used as
        boundaries.ALL are assumed closed. The BOUNDARY field may have the values
        : - missing (use BOUNDARY) , 0 edge constraint, 1 external boundary or 2
        internal boundary.
        required: No; default: ; range: 

        STRING:     Input string file containing XP,YP,ZP,PTN and PVALUE fields. String
        segments are included in the triangulation as 3D edge constraints,
        breaklines. Strings may be open or closed.  Note that a limit of 60,000
        strings is set for this input file.
        required: No; default: ; range: 

        POINTIN:     Input point file containing XPT,YPT,ZPT fields.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Output wireframe triangle file. May include additional XBAR,YBAR and ZBAR
        fields.
        required: Yes; default: ; range: 

        WIREPT:     Output wireframe point file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        XPT:     X field in input point file.
        required: No; default: ; range: 

        YPT:     Y field in input point file.
        required: No; default: ; range: 

        ZPT:     Z field in input point file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SURFACE:     Optional surface identifier, +1 for upper surface, -1 for lower (1).
        required: No; default: 1; range: -1, 1

        BOUNDARY:     Default boundary specifier for perimeters. Used if the BOUNDARY field does
        not exist in PERIMIN or has a missing value (0). 0 edge constraints, must
        be 3D, 1 external boundary or 2 internal boundary.
        required: No; default: 0; range: 0,2

        SYSTEM:     Defines the treatment of boundary perimeters BOUNDARY= 1 or 2 from PERIMIN
        (3). 2 perimeters are 2D and used only as constraints. 3 perimeters are 3D
        and are included in the triangulation.
        required: No; default: 3; range: 2,3

        DMAX:     The maximum separation of additional points interpolated into long string
        segments to improve the triangulation.
        required: No; default: ; range: Undefined

        MAXLINK:     Maximum separation of points that will be joined by a triangle.
        required: No; default: ; range: Undefined

        TOL:     Tolerance distance below which points are considered to be duplicated. If
        too small this value may automatically be increased by the program.
        required: No; default: ; range: Undefined

        COG:     Used to include extra fields containing the coordinates of the centre of
        gravity of each triangle in output triangle file (0):  Option  Description
        0  - do not include XBAR,YBAR or ZBAR .  1  - include ZBAR only.  2  -
        include XBAR,YBAR
        required: No; default: 0; range: 0,2

        ERRTRACE:     Used to control the amount of error messages and the creation of a system
        file SURTRI.TRC containing a dump of points and edges for tracing errors.
        Also may be used to force the creation of output points and triangle
        records despite a serious error(0).  Option  Description  0  - no error
        trace, reduced error messages.  1  - create SURTRI.TRC, force output, full
        error reporting.  2  - as 1 plus include MINSURV plot records.
        required: No; default: 0; range: 0,2

        HBRATIO:     Height to base ratio of triangles created to resolve crossing strings
        (0.05).
        required: No; default: 0.05; range: Undefined

        MAXPTS:     Overwrite the program limitation on maximum points per partition with a
        smaller value. May be used to force partitioning for testing (-).
        required: No; default: ; range: Undefined

        CHECK:     nan
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.surtri).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURTRI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def survig(self,
                pointou_o,
                segou_o,
                period_p,
                pointin_i='optional',
                segin_i='optional',
                pointup_i='optional',
                segup_i='optional',
                section_i='optional',
                profile_i='optional',
                eval_o='optional',
                iprcol_p=5,
                isccol_p=7,
                addpoint_p=500,
                coortyp_p=0,
                loxorig_p=0,
                loyorig_p=0,
                lozorig_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POINTIN:     Optional input point file or prototype, containing at least the numeric
        fields: PID Unique point identification number. X Y Z Coordinate position
        of point. PSYMBOL Point symbol number 91 : Circle 92 : Cross (+) 93 :
        Cross (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie
        Segment PSYMSZE Point symbol size in millimetres. P Colour number (1-16)
        for symbol. PERIOD Period number identifier.
        required: No; default: ; range: 

        SEGIN:     Optional input string segment file or prototype, containing at least the
        numeric fields: PID1 First point of segment. PID2 Second point of segment.
        PVALUE String identifier. PTYPE String type. PCODE String linestyle: 1001
        = Solid line 1002 = Broad line 1003 = Long Dash line 1004 = Dotted line
        1005 = Dash Dotted line 1006 = Medium Dash line 1007 = Dash with two dots
        1008 = Short Dash line P String colour (1-16).
        required: No; default: ; range: 

        POINTUP:     Optional input point file of update data.
        required: No; default: ; range: 

        SEGUP:     Optional input string segment file of update data.
        required: No; default: ; range: 

        SECTION:     Optional input/output section file defining sections for display, profile
        string generation and volume analysis, containing fields: SVALUE Section
        number XCENTRE X Coordinate of section centre point YCENTRE Y Coordinate
        of section centre point ZCENTRE Z Coordinate of section centre point SAZI
        Azimuth of the direction of dip. SDIP Dip of the section plane (90).
        STHICK Horizontal distance between adjacent sections. HSIZE Horizontal
        extent of section. VSIZE Vertical extent of section.
        required: No; default: ; range: 

        PROFILE:     Optional input/output file of strings formed from section/terrain model
        slicing This file will contain standard perimeter fields XP, YP, ZP, PTN,
        PVALUE, and additional fields PTYPE, P, PTEXT and PERIOD.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        POINTOU:     Output point file.
        required: Yes; default: ; range: 

        SEGOU:     Output string segment file.
        required: Yes; default: ; range: 

        EVAL:     File for output evaluations in format for input to TABRES process.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PERIOD:     Integer period number for storing with the updated point/string data and
        section profiles.
        required: Yes; default: ; range: Undefined

        IPRCOL:     Colour of primary perimeters (5).
        required: No; default: 5; range: 1,64

        ISCCOL:     Colour of secondary perimeters (7).
        required: No; default: 7; range: 1,64

        ADDPOINT:     Maximum number additional points/strings that are likely to be required to
        be defined in the process (500).
        required: No; default: 500; range: Undefined

        COORTYP:     Parameter to be set to 1 for the use of the LO coordinate system (0).
        required: No; default: 0; range: 0,1

        LOXORIG:     Local X origin to be used for internal coordinate calculations (0).
        required: No; default: 0; range: Undefined

        LOYORIG:     Local Y origin to be used for internal coordinate calculations (0).
        required: No; default: 0; range: Undefined

        LOZORIG:     Local Z origin to be used for internal coordinate calculations (0).
        required: No; default: 0; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.survig).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURVIG ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def survin(self,
                perimin_i,
                pointou_o,
                segou_o,
                period_p,
                tol_p=0.1,
                ptype_p=1,
                pcode_p=1001,
                p_p=1,
                psymbol_p=92,
                psymsze_p=1.5
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PERIMIN:     Input perimeter file. Must contain the fields XP, YP, ZP, PTN and PVALUE
        (numeric, explicit). Optional fields PTYPE, PCODE, P, PSYMBOL, and PSYMSZE
        will be used, if present. Additional fields found will be added to the
        output point and string files.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        POINTOU:     Output point file. This will contain fields PID, X, Y, Z, PSYMBOL,
        PSYMSZE, P and PERIOD (numeric, explicit).
        required: Yes; default: ; range: 

        SEGOU:     Output string segment file. This will contain the fields PID1, PID2,
        PVALUE, PTYPE, PCODE, P and PERIOD (numeric, explicit).
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PERIOD:     Numeric integer period number for to be assigned to the input perimeters.
        required: Yes; default: ; range: Undefined

        TOL:     Points in the perimeter file less than TOL distance apart will be deemed
        duplicate and rejected.(0.1)
        required: No; default: 0.1; range: Undefined

        PTYPE:     PTYPE field value [numeric] to be stored in the string file, representing
        a string type, if not found in perimeter file.(1)
        required: No; default: 1; range: Undefined

        PCODE:     PCODE field value to be stored in string file, representing a line code
        1001-1008, if not found in the perimeter file.(1001)
        required: No; default: 1001; range: Undefined

        P:     P field value [numeric] to be stored in point and string files,
        representing a point symbol and string line colour, if not found in
        perimeter file.(1)
        required: No; default: 1; range: Undefined

        PSYMBOL:     PSYMBOL field value [numeric] to be stored in the point file, representing
        a point symbol number 91-98, if not found in the perimeter file.(92) Point
        symbol number 91 : Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : Triangle
        95 : Box 96 : Diamond 97 : Star ( )
        required: No; default: 92; range: 91,98

        PSYMSZE:     PSYMSZE field value [numeric] to be stored in the point file, representing
        a point symbol size in mm, if not found in the perimeter file.(1.5)
        required: No; default: 1.5; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.survin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURVIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def survou(self,
                pointin_i,
                segin_i,
                perimou_o,
                pointou_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POINTIN:     Input point file. This will contain fields PID, X, Y, Z, PSYMBOL, PSYMSZE,
        P and PERIOD (numeric, explicit).
        required: Yes; default: ; range: 

        SEGIN:     Input string segment file. This will contain PID1, PID2, PVALUE, PTYPE,
        PCODE, P.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOU:     Output perimeter file. This will contain the fields XP, YP, ZP, PTN,
        PVALUE, PTYPE, PCODE, P, PSYMBOL, and PSYMSZE. Additional fields found in
        the input files will be added to the output perimeter file.
        required: Yes; default: ; range: 

        POINTOU:     Output point file. This will contain fields PID, XP, YP, ZP, PSYMBOL,
        PSYMSZE, P and PERIOD (numeric, explicit).
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.survou).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SURVOU ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def sustp2(self,
                out_o,
                direct_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output perimeter file with the standard fields PVALUE,PTN,XP,YP,ZP plus
        STRNO, which contains the SURPAC string number. Additional fields in the
        SURPAC file are returned as D0,D1,...D9 if they exist.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DIRECT:     Parameter to specify the plane of the STRing file: 1=XY, 2=XZ, 3=YZ.
        required: Yes; default: 1; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.sustp2).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUSTP2 ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def sustpe(self,
                out_o,
                direct_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output perimeter file with the standard fields PVALUE,PTN,XP,YP,ZP.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DIRECT:     Parameter to specify the plane of the STRing file: 1=XY, 2=XZ, 3=YZ.
        required: Yes; default: 1; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.sustpe).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SUSTPE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def swathplt(self,
                    model_i,
                    swath1_o,
                    swath2_o,
                    grade1_f,
                    directn_p,
                    sample_i='optional',
                    swathstr_o='optional',
                    zonefld_f='optional',
                    samplex_f='optional',
                    sampley_f='optional',
                    samplez_f='optional',
                    density_f='optional',
                    dcweight_f='optional',
                    grade2_to_10_f=['optional'],
                    sgrade1_to_10_f=['optional'],
                    width_p=50,
                    zoneval_p='optional',
                    allzones_p=9999999,
                    allznval_p=1,
                    density_p=1,
                    excel_p=0,
                    csvout1_p=0,
                    csvout2_p=0
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODEL:     Input block model file
        required: Yes; default: ; range: 

        SAMPLE:     Optional Input sample data file. This must be a set of samples with X, Y
        and Z locations, it may a desurveyed drillhole file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        SWATH1:     Output swath plot data file. This file contains the Swath Plot data in a
        structure that is suitable for creating a plot using Studio's scatter/line
        plot function in the Plots views.
        required: Yes; default: ; range: 

        SWATH2:     Alternative output swath plot data file. This file contains the Swath Plot
        data in a structure that is suitable for graphing in Excel.  This is the
        output that will be used to generate a chart if @EXCEL=1
        required: Yes; default: ; range: 

        SWATHSTR:     Optional output string file showing the location of the Swath slices and
        the relative grade values.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        GRADE1:     First or only model grade field for graphing.
        required: Yes; default: ; range: 

        ZONEFLD:     Numeric field used to congregate the input model and sample data by zone.
        This can either be used in conjunction with the @ZONEVAL parameter to
        output data for a single zone, or can be used without @ZONEVAL to produce
        a multiple-zone and summary report (if @EXCEL=1). This field is optional.
        If it does not exist in the input sample or model file it is ignored. An
        example of using this is to create plot data for just a single rock type.
        required: No; default: ; range: 

        SAMPLEX:     X coordinate field in sample input file
        required: No; default: ; range: 

        SAMPLEY:     Y coordinate field in sample input file
        required: No; default: ; range: 

        SAMPLEZ:     Z coordinate field in sample input file
        required: No; default: ; range: 

        DENSITY:     Density field to enable calculation of tonnage weighted grade statistics
        for the model. If not selected a global density will be defined by the
        @DENSITY parameter.
        required: No; default: ; range: 

        DCWEIGHT:     Declustered sample weight field.
        required: No; default: ; range: 

        GRADE2-10:     Optional model grade fields for graphing.
        required: No; default: ; range: 

        SGRADE1 - 10:     Optional sample grade fields for graphing.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DIRECTN:     Direction in which swath plot should be calculated - X, Y or Z.  =1: X
        Direction.  =2: Y Direction.  =3: Z Direction.
        required: Yes; default: 1; range: 1,3

        WIDTH:     Slice thickness for Swath plot.
        required: No; default: 50; range: 

        ZONEVAL:     Value in the ZONFLD field used to filter the input sample and model value.
        If specified, only data for the nominated zone value will be exported.
        required: No; default: ; range: Undefined

        ALLZONES:     Parameter to show whether the average results over all ZONEVALs should be
        calculated as well as results for individual ZONEVALs:  =0: Only calculate
        results for individual ZONEVALs; do not calculate average results over all
        ZONEVALs. =1: Calculate results for individual ZONEVALs and average
        results over all ZONEVALs.
        required: No; default: 9999999; range: Undefined

        ALLZNVAL:     The ZONEFLD value to be assigned to the results for the average over all
        ZONEFLDs
        required: No; default: 1; range: Undefined

        DENSITY:     Default model density. Used if *DENSITY field has not been selected. Also
        used to replace absent density values in the model if a *DENSITY field has
        been selected
        required: No; default: 1; range: Undefined

        EXCEL:     Set to 1 to automatically load data into Excel and display the calculated
        swath plot.  If 0 and CSVOUT2=1, a csv file will be generated, but not
        loaded into Excel.
        required: No; default: 0; range: 0,1

        CSVOUT1:     Set to 1 to create a CSV output file of the plot data file specified in
        SWATH1.
        required: No; default: 0; range: 0,1

        CSVOUT2:     Set to 1 to create a CSV output file of the alternative plot data file
        specified in SWATH2.  Note that this setting is not required if @EXCEL=1
        (as a CSV file will be generated regardless of this setting
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.swathplt).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'SWATHPLT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tabres(self,
                results_i,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        RESULTS:     The input results file. This must contain at least the following fields:-
        MODEL A,8 : Model name (implicit). PERIMIN A,8 : Perimeter file name
        (implicit). TYPE A,8 : Blank or BALANCE. PLANE A,8 : LEVEL, COLUMN, ROW,
        SECTION. NUMBER N : Plane number. SEQUENCE N : Evaluation number in plane.
        PERIMID N : Perimeter identifier. DENSITY N : Mean density. VOLUME N :
        Total volume evaluated. TONNES N : Total tonnage evaluated. Optional
        fields: INTERVAL N : Grade Interval number. LOWER N : Lower bound
        (included). UPPER N : Upper bound (excluded). <rocktype> A/N : Rocktype
        field. <grade1> N : First grade field. TONNESA N : Tonnes for first grade.
        <grade2> N : Second grade field. TONNESB N : Tonnes for second grade. ----
        repeated for each grade field -----
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PRINT:     >=1 : print all tables, even if volumes are zero. Default is omit zero
        tables (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tabres).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TABRES ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tblin(self,
                exdef_i,
                out_o,
                layout_p,
                filter_i='optional',
                protodd_i='optional',
                fieldlst_i='optional',
                error_o='optional',
                delim_p='optional',
                fs_p='optional',
                skiphd_p=0,
                findpg_p=0,
                eod_p='optional',
                trace_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        EXDEF:     External field definition table. Specifies names, types and locations of
        input data fields. Retrieval criteria, if any, operate on EXDEF. EXDEF
        must contain at least the following :- TPLNAME A8 External template name.
        FIELD A8 Logical name given to field in external file. START N Start
        position for char based layout (inclusive). END N End position for char
        based layout (inclusive). EXTFLDNR N External field number for field based
        layout. TYPE A1 Field type alpha/numeric {A,a,N,n} only. MIN N Check value
        < "MIN" , output to ERROR if true. MAX N Check value > "MAX" , output to
        ERROR if true. ALPHJST A1 Required justification for output string
        {L,l,R,r,N,n} ALPHWID N Required output field width. ALPHDEF A12 If input
        field empty or blank, set to "ALPHADEF" Optional filter fields for
        operations on numeric output fields:- ABSENT A12 Search for "ABSENT" and
        replace with '-'. TRACE A12 Search for "TRACE" and replace with 'TR'.
        CVTZERO A12 Search for zero value and replace with "CVTZERO". CVTBLANK A12
        Search for "whitespace" and replace with "CVTBLANK" CVTNEG A12 Search for
        "-ve values" and replace with "CVTNEG" If "CVTNEG"=KEEP, make no
        conversion. If "CVTNEG"=RGCE, convert -ve values with the formula :
        RESULT=ABS(VALUE)/2 CONST N Add "CONST" to the input value. FACTOR N
        Multiply result by "FACTOR". SHIFT N Add "SHIFT" to result, and store this
        value.
        required: Yes; default: ; range: 

        FILTER:     Optional input data filter table. Must contain at least the following
        fields :- FIELD A8 Name of field for filtering. USERIN A16 Value, key or
        pattern to search for in "FIELD" USEROUT A16 If "USERIN" matches, replace
        with "USEROUT" USERIN Keywords (reserved words entered in square brackets
        [] ):- [CVTZERO] : search for "0" and replace with USEROUT. [CVTBLANK] :
        search for "whitespace" and replace with USEROUT. [CVTNEG] : search for
        -ve values and replace with USEROUT. [CONST] : add "USEROUT" to input
        value (step 1) [FACTOR] : multiply "USEROUT" with input value (step 2)
        [SHIFT] : add "USEROUT" to input value (step 3) [char] : search for
        char,if present anywhere, replace with USEROUT. user string : match entire
        string (ignore leading and trailing blanks), and replace with USEROUT.
        USEROUT Keywords :- - : use Datamine Missing Value for USEROUT. TR : use
        Datamine Trace Value for USEROUT. [RGCE] : use formula
        USEROUT=ABS(input)/2 (Only with [CVTNEG]) user string : use the supplied
        value for USEROUT. Multiple USERIN/USEROUT pairs can be supplied for any
        field. If USERIN consists of the bracketed sequence [char], then any input
        data containing "char" will be replaced with "USEROUT". eg
        USERIN=[<],USEROUT=TR will replace <0.01 with TR. FIELD for USERIN=[char]
        or user string can specify a numeric or an alpha input field.
        required: No; default: ; range: 

        PROTODD:     Optional prototype data definition. Selects fields to be created in OUT.
        If not supplied, data definition is created for all fields defined in
        EXDEF. Implicit fields defined in EXDEF are made explicit. Alpha field
        lengths are taken from EXDEF.
        required: No; default: ; range: 

        FIELDLST:     Optional field subset list. Selects fields to be created in OUT. If not
        supplied, data definition is define for all fields in EXDEF. Maximum of
        one of PROTODD , FIELDLST can be specified. FIELDLST must contain at least
        the following field:- FIELD A8 Name of field for output. (must be subset
        of EXDEF)
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output database file to be created.
        required: Yes; default: ; range: 

        ERROR:     Optional output file for error records. If not supplied, data which is
        outside MIN...MAX limits is placed in OUT.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LAYOUT:     Input file organisation method. 1=Char Each field located by START, END.
        2=Free Datamine standard "free" format. 3=Comma Fields separated by
        commas, no quotes 4=Single Fields sep. by commas, quote with ' 5=Double
        Fields sep. by commas, quote with " 6=White Fields separated by
        spaces/tabs 7=User Supply FS and/or DELIM explicitly
        required: Yes; default: 1; range: 1,7

        DELIM:     Optional field delimiter. Max 4 chars.
        required: No; default: ; range: Undefined

        FS:     Optional field separator. Max 4 chars.
        required: No; default: ; range: Undefined

        SKIPHD:     >=1 Omit n lines of header (0).
        required: No; default: 0; range: Undefined

        FINDPG:     >=1 Scan for "page breaks" and omit headers and footers from all pages
        (0).
        required: No; default: 0; range: 0,1

        EOD:     Optional end of data string. Max 4 char.
        required: No; default: ; range: Undefined

        TRACE:     >=1 Display each nth input record (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tblin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TBLIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tdin(self,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        ------
        OUTPUT
        ------

        OUT:     Output model file.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tdin).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TDIN ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tdout(self,
                in_i,
                value_f,
                zone_f='optional',
                vdefault_p=0,
                format_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        VALUE:     Economic value field.
        required: Yes; default: ; range: 

        ZONE:     Ore-body identification field.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VDEFAULT:     Default block value per unit volume (0.0).
        required: No; default: 0; range: Undefined

        FORMAT:     Output format for economic file (0). 0 - fixed format 1 - comma separated
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tdout).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TDOUT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def terplt(self,
                in_i,
                f1_f,
                f2_f,
                f3_f,
                plot_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        F1:     First input field of ternary plot (top apex).
        required: Yes; default: ; range: 

        F2:     Second input field of ternary plot (bottom left).
        required: Yes; default: ; range: 

        F3:     Third input field of ternary plot (bottom right).
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        PLOT:     Option Description 1 output of ternary plot to printer or print file (0).
        required: No; default: 0; range: 0,1

        PRINT:     Option Description 1 output of data values to printer or print file (0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.terplt).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TERPLT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tongrad(self,
                in_i,
                out_o,
                csvout_o='optional',
                tgcumtiv_o='optional',
                orefrac_f='optional',
                density_f='DENSITY',
                key1_to_20_f=['optional'],
                f1_to_20_f=['optional'],
                addf1_to_10_f=['DENSITY'],
                factor_p=1,
                trename_p=0,
                setabsnt_p=0,
                density_p=1,
                column_p=0,
                row_p=0,
                bench_p=0,
                cogstep_p=0,
                keytol_p=1e-05,
                excel_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input model file
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output reserves file.
        required: Yes; default: ; range: 

        CSVOUT:     Optional CSV Output file. This is a system file, not a Datamine (.dm)
        file. It contains the same results as the Datamine OUT file, but it is a
        Comma Separated Variable (CSV) file, suitable for input to a spreadsheet.
        The extension .CSV will be added automatically to the file name.
        required: No; default: ; range: 

        TGCUMTIV:     Output tonnes grade curve cumulative data file. This can only be output if
        the @COGSTEP parameter is set to define cutoffs. This table can be used to
        create tonnage grade curves.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        OREFRAC:     Ore fraction field - containing values between 0 and 1.
        required: No; default: ; range: 

        DENSITY:     Field containing density values. If a field is not selected then the value
        specified by the DENSITY parameter will be used.
        required: No; default: DENSITY; range: 

        KEY1-20:     Key fields for reserve classification.
        required: No; default: ; range: 

        F1-20:     Grade fields for evaluation. F1 is primary grade field. NOTE THAT ORDER MATTERS as 
        cutoffs and tonnages are determined from F1.
        required: No; default: ; range: 

        ADDF1-10:     1st to 10th fields to be treated as additive.
        required: No; default: DENSITY; range: 

        ----------
        PARAMETERS
        ----------

        FACTOR:     Scaling factor to adjust the units of the Volume and Tonnage in the output
        files. Volume and Tonnage are divided by this factor.
        required: No; default: 1; range: Undefined

        TRENAME:     The @TRENAME parameter can be used to change the output field name of
        TONNES to reflect the use of the @FACTOR parameter.
        required: No; default: 0; range: Undefined

        SETABSNT:     Set to 1 to allow TONGRAD to reset absent grade, ore fraction and density
        values. If this is used, absent grade values are set to their default
        values. If the default value is absent grade values are set to zero. If
        Density values are absent the default DENSITY parameter value is used.
        required: No; default: 0; range: Undefined

        DENSITY:     Density value to be used for tonnage calculations if a DENSITY field is
        not used.
        required: No; default: 1; range: Undefined

        COLUMN:     Set to 1 for additional COLUMN (YZ slices by X) categorisation.
        required: No; default: 0; range: 0,1

        ROW:     Set to 1 for additional ROW (XZ slices by Y) categorisation.
        required: No; default: 0; range: 0,1

        BENCH:     Set to 1 for additional BENCH (XY slices by Z) categorisation.
        required: No; default: 0; range: 0,1

        COGSTEP:     Cut-off grade step, which applied to main F1 grade field, and then used
        for categorisation of results.
        required: No; default: 0; range: Undefined

        KEYTOL:     The tolerance used to test whether numeric keyfields are equal. All key
        values are rounded to an integer multiple of this value. If set to zero
        then rounding will not be used.
        required: No; default: 0.00001; range: 0,+

        EXCEL:     Set to 1 to automatically load the cumulative data file into Excel (2016
        version required) and display a graph of tonnes and grade against cutoff.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tongrad).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TONGRAD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def trend(self,
                in_i,
                out_o,
                x_f,
                y_f,
                value_f,
                order_p,
                print_p=0,
                select_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input data file. Must contain the fields X , Y , and VALUE.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file containing the surface coefficients. The fields are C0, CX,
        CY, CXY, CX2, CY2, CX2Y, CXY2, CX3, CY3.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     X Co-ordinate fieldname.
        required: Yes; default: ; range: 

        Y:     Y Co-ordinate fieldname.
        required: Yes; default: ; range: 

        VALUE:     Field to be fitted.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ORDER:     Order of surface (1,2, or 3).
        required: Yes; default: 1; range: 1,3

        PRINT:     >0, displays original samples, fitted points and differences (0).
        required: No; default: 0; range: 0,1

        SELECT:     Allows the user to select every nth record, where n=SELECT (1).
        required: No; default: 1; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.trend).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TREND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tricon(self,
                proto_i,
                plot_o,
                vmin_p,
                vmax_p,
                cint_p,
                in_i='optional',
                wirept_i='optional',
                wiretr_i='optional',
                x_f='optional',
                y_f='optional',
                value_f='optional',
                dmax_p='optional',
                surface_p=1,
                optimise_p=0,
                boundary_p='optional',
                dupelim_p=0,
                tol_p=1e-05,
                ndp_p=0,
                charsize_p=3,
                aspratio_p=0.9,
                colour_p=1,
                append_p=0,
                xmin_p='optional',
                xmax_p='optional',
                ymin_p='optional',
                ymax_p='optional',
                xscale_p='optional',
                yscale_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric,
        explicit) and XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE (numeric, implicit).
        If these last 6 values set in PROTO , then corresponding parameters need
        not be set. If no plot prototype file, then XMIN, XMAX, YMIN, YMAX taken
        from the model file on IN.
        required: Yes; default: ; range: 

        IN:     Optional input data file. Must contain fields X, Y, VALUE.
        required: No; default: ; range: 

        WIREPT:     Optional input wireframe point file.
        required: No; default: ; range: 

        WIRETR:     Optional input wireframe triangle file.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PLOT:     Output plot file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     X co-ordinate field in input file.
        required: No; default: ; range: 

        Y:     Y co-ordinate field in input file.
        required: No; default: ; range: 

        VALUE:     Field to be contoured.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VMIN:     Minimum contour value.
        required: Yes; default: ; range: Undefined

        VMAX:     Maximum contour value.
        required: Yes; default: ; range: Undefined

        CINT:     Contour interval.
        required: Yes; default: ; range: Undefined

        DMAX:     Maximum separation of points to be joined.
        required: No; default: ; range: Undefined

        SURFACE:     Optional surface identifier. +1 for upper surface, -1 for lower surface
        (+1).
        required: No; default: 1; range: -1, 1

        OPTIMISE:     Linear or quadratic contour tracing; =0 linear; =1 quadratic (0).
        required: No; default: 0; range: 0,1

        BOUNDARY:     Option  Description  0  no boundary plotted; =1 boundary of data area
        plotted.
        required: No; default: ; range: 0,1

        DUPELIM:     Set to 1 to allow elimination of duplicate points (0).
        required: No; default: 0; range: 0,1

        TOL:     Tolerance distance below which points are considered to be duplicated
        (0.00001).
        required: No; default: 0.00001; range: Undefined

        NDP:     Number of decimal places for annotation (0).
        required: No; default: 0; range: Undefined

        CHARSIZE:     Character size in millimeters (3).
        required: No; default: 3; range: Undefined

        ASPRATIO:     Aspect ratio, width / ht. for chars (0.9).
        required: No; default: 0.9; range: Undefined

        COLOUR:     Colour [as 'pen' number] for plot (1). NOTE: This variable name was
        missing during import to Python, set to: COLOUR based on description.
        required: No; default: 1; range: Undefined

        APPEND:     Plot append flag. If set to 1 then the new plot will be appended to the
        PLOT file, if it exists and is a valid plot file (0).
        required: No; default: 0; range: 0,1

        XMIN:     Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE,
        YSCALE need be set if this information is already in the prototype.
        required: No; default: ; range: Undefined

        XMAX:     Maximum value of X for plot.
        required: No; default: ; range: Undefined

        YMIN:     Minimum value of Y for plot.
        required: No; default: ; range: Undefined

        YMAX:     Maximum value of Y for plot.
        required: No; default: ; range: Undefined

        XSCALE:     X scale in user data units per millimeter.
        required: No; default: ; range: Undefined

        YSCALE:     Y scale in user data units per millimeter.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tricon).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TRICON ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def trifil(self,
                proto_i,
                wiretr_i,
                wirept_i,
                model_o,
                modltype_p,
                perimin_i='optional',
                zone_f='optional',
                zone_p='optional',
                maxdip_p=0,
                splits_p=3,
                plane_p='XY',
                xsubcell_p=1,
                ysubcell_p=1,
                zsubcell_p=1,
                pvalue_p='optional',
                resol_p=0,
                checkrot_p=0,
                autosort_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Model prototype file.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        PERIMIN:     Optional perimeter input file to control area over which model is
        generated.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output model file to be created.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Name of zone field for wireframe with multiple zones to be filled. The
        field can be either numeric or alpha. However if the field is an alpha
        field then it can contain a maximum of 24 characters. If not specified and
        a field ZONE exists in WIRETR then it will automatically be used.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        MODLTYPE:     Type of wireframe model to be filled; one of the following options, with
        default of (1) :-  Option  Description  1  solid 3d, interior to be filled
        with cells  2  solid 3d, exterior to be filled with cells  3  surface,
        cells to be filled below (for XY), to south (for XZ), or to west (for YZ)
        4  surface, cells to be filled above (for XY), to north (for XZ), or to
        east (for YZ)  5  two surfaces, cells to be fill between.  6  two
        surfaces, cells to be filled above upper surface and below lower surface.
        required: Yes; default: 1; range: 1,6

        ZONE:     Zone code to be inserted into output model ZONE field.
        required: No; default: ; range: Undefined

        MAXDIP:     Maximum gradient for any triangle intersecting a cell before splitting
        into subcells (0).
        required: No; default: 0; range: Undefined

        SPLITS:     Maximum amount of splitting to be allowed (3), within range 0 [for 1 x 1]
        to 3 [for 8 x 8].
        required: No; default: 3; range: 0,3

        PLANE:     Optional alpha parameter defining orientation 'XY', 'XZ', or 'YZ', of
        plane in which subcell splitting is to be performed. Please note that care
        must be taken in selection of the plane to be used if the ends of the
        wireframe have not been linked, as the wireframe model is then partially
        'hollow' when viewed from certain directions.
        required: No; default: XY; range: Undefined

        XSUBCELL:     Cell division in X direction (1). Max 100.
        required: No; default: 1; range: 1,100

        YSUBCELL:     Cell division in Y direction (1). Max 100.
        required: No; default: 1; range: 1,100

        ZSUBCELL:     Cell division in Z direction (1). Max 100.
        required: No; default: 1; range: 1,100

        PVALUE:     PVALUE of single perimeter to be selected from the PERIMIN file.
        required: No; default: ; range: Undefined

        RESOL:     Defines boundary resolution in direction perpendicular to plane of
        filling. =(0) - precise boundary location. = N - boundary rounded to
        nearest 1/Nth of parent cell size.
        required: No; default: 0; range: Undefined

        CHECKROT:     Set to 1 to automatically detect and correctly process rotated models.
        Using this parameter means that the input wireframe points file no longer
        needs to be transformed into the model space before using TRIFIL. The
        default value is 0. This means that any existing macros that already
        transform the wireframe points file will still work as in Studio 3.
        required: No; default: 0; range: 0, 1

        AUTOSORT:     Set to 1 to automatically sort the output model by IJK if necessary. Using
        this option removes the need to sort the model after running TRIFIL.
        Sorting is generally only required when using multiple ZONE fields or
        multiple perimeters, or when the direction of filling is not XY. An output
        message is given at then end of the process indicating if the output model
        may require sorting.  =0 : Do not automatically sort the output model by
        IJK.  =1 : Automatically sort the output model by IJK.
        required: No; default: 0; range: 0, 1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.trifil).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TRIFIL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def tripoi(self,
                in_i,
                wiretr_i,
                wirept_i,
                out_o,
                x_f,
                y_f,
                z_f,
                keep_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file to be intersected. Must contain fields X , Y , Z. Must be
        sorted on X.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file with additional elevation field.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Name of intersection X field in IN.
        required: Yes; default: ; range: 

        Y:     Name of intersection Y field in IN.
        required: Yes; default: ; range: 

        Z:     Name of output elevation field in OUT.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEEP:     To carry through points not intersected by any triangle, with Z
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.tripoi).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TRIPOI ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def trival(self,
                modeli_i,
                wiretr_i,
                wirept_i,
                results_o,
                density_p,
                modelo_o='optional',
                zone_f='optional',
                fullcell_p=0,
                mine_p=0,
                plane_p='"XY"',
                incrment_p=0,
                modltype_p=0,
                chkovlap_p=0,
                checkrot_p=0,
                nosid_p=0,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        MODELI:     Model file for evaluation. Must contain at least the fields XC, YC, ZC,
        XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     The output results file, in a format suitable for input into the TABRES
        process
        required: Yes; default: ; range: 

        MODELO:     Optional output model file. This may be the same as the input, if the
        MINED field exists in the input file. The MINED field will be created in
        the output file if it does not exist.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Optional zone identifier field (numeric or single-word alpha) in the
        WIRETR triangle file, defining individual wire-frame zone models. This
        field will be added to the results file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DENSITY:     Set required density value. This will only be used if there is no DENSITY
        field in the input model. If there is no DENSITY field, and no DENSITY
        parameter, then a value of 1.0 is used.
        required: Yes; default: ; range: 

        FULLCELL:     = 0 : partial cell evaluation  = 1 : whole cell evaluation in place of
        partial cell evaluation (0)..
        required: No; default: 0; range: 0,1

        MINE:     Optional; if non-zero, output proportion mined in MINED field of MODELO
        file (0).
        required: No; default: 0; range: 0,1

        PLANE:     Optional alpha parameter defining slice orientation to be used in
        classification of results 'XY', 'XZ', or 'YZ'.
        required: No; default: "XY"; range: 

        INCRMENT:     (0) If non-zero, mining is assumed to be incremental, and for any
        (sub-)cell the amount mined in any pass must be greater than the total
        mined so far for it to be recorded. If zero, mining is assumed to be
        additive, subject to a total mined fraction of 1.
        required: No; default: 0; range: 0....1

        MODLTYPE:     Type of wireframe model to be evaluated; one of the following options:-
        =1 : solid 3d, interior to be evaluated.  =3 : surface, cells to be
        evaluated below [for XY], to south [for XZ], or to west [for YZ].  =4 :
        surface, cells to be evaluated above [for XY], to north [for XZ], or to
        east [for YZ].
        required: No; default: 0; range: 

        CHKOVLAP:     Control checking of overlapping triangles. This applies only to model
        types of 3 and 4. If set to 1 then checking of triangle overlaps is
        performed. If set to zero then no checking will occur. Checking should be
        done where DTMs curve over themselves as in some seam models. Checking can
        be turned off for DTMs where this is known not to occur, such as in an
        open pit wireframe. If checking is turned off the process will run faster.
        (1).
        required: No; default: 0; range: 0,1

        CHECKROT:     Set to 1 to automatically check for and correctly process rotated models.
        The default value is zero. If this is not set to 1 and the model is
        rotated then the wireframe points need to be transformed into the model
        coordinate space using CDTRAN before running TRIFIL.
        required: No; default: 0; range: 0,1

        NOSID:     Option  Description  1  Disables checking of SIDs for increased speed. Use
        for single surfaces only.
        required: No; default: 0; range: 0,1

        PRINT:     =1 : ; Show a line for each cell evaluated in each perimeter.(0).
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.trival).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TRIVAL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def trivol(self,
                wiretr_i,
                wirept_i,
                zbase_p,
                perimin_i='optional',
                out_o='optional',
                zone_f='optional',
                nosid_p=1,
                dtm_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        PERIMIN:     Optional input perimeter file containing XP,YP,ZP fields, defining
        perimeter(s) within which volume is to be computed.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Optional output file, which will contain the fields VOLUME, UPPERVOL,
        LOWAREA, UPAREA, TOTAREA, MINZ, MAXZ, MINX, MAXX, MINY, MAXY, MINDIP,
        MAXDIP, NUMTRI, and the optional zone definition file, if one is
        specified.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Zone definition field in triangle file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        ZBASE:     Base elevation above which volumes are computed.
        required: Yes; default: ; range: Undefined

        NOSID:     Option  Description  1  Disables checking of SIDs for increased speed. Use
        for single surfaces only.
        required: No; default: 1; range: 0,1

        DTM:     Option  Description  1  Disables checking of overlaps for specified DTM
        input files (quicker)
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.trivol).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TRIVOL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def truethk(self,
                in_i,
                out_o,
                dip_p,
                dipdirn_p
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Sample/composite data file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Sample/composite data with calculated true, vertical and horizontal
        thickness fields.
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DIP:     Ore body dip value.
        required: Yes; default: 0; range: 0,90

        DIPDIRN:     Ore body dip direction.
        required: Yes; default: 0; range: 0,360

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.truethk).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'TRUETHK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def unfold(self,
                in_i,
                string_i,
                out_o,
                unitdef_i='optional',
                quads_o='optional',
                x_f='optional',
                y_f='optional',
                z_f='optional',
                section_f='optional',
                boundary_f='optional',
                wstag_f='optional',
                bstag_f='optional',
                tag_f='optional',
                unitname_f='optional',
                hangwall_f='optional',
                footwall_f='optional',
                ucsa_f='optional',
                ucsb_f='optional',
                ucsc_f='optional',
                linkmode_p=3,
                ucsamode_p=2,
                ucsbmode_p=3,
                ucscmode_p=2,
                plane_p=1,
                hangid_p='optional',
                footid_p='optional',
                unitid_p='optional',
                tolrnc_p=0,
                ucsalimt_p=1,
                orgtag_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input file containing the X,Y and Z fields of points in the world
        coordinate system which are to be transformed to the UCS.
        required: Yes; default: ; range: 

        STRING:     Input string file holding the boundary strings which define the stratified
        unit[s]. 7 fields are compulsory: SECTION , BOUNDARY , PVALUE,XP,YP,ZP and
        PTN. 3 optional fields are WSTAG , BSTAG and TAG. The file must be sorted
        on SECTION , BOUNDARY PTN, with SECTION being the primary keyfield. It is
        assumed that the section numbering system is such that sorting on SECTION
        will ensure that physically adjacent sections are adjacent in the STRING
        file.
        required: Yes; default: ; range: 

        UNITDEF:     Optional input file containing the BOUNDARY value for the hangingwall and
        footwall of each stratified unit. It must contain the 3 fields: UNITNAME ,
        HANGWALL and FOOTWALL. If UNITDEF is not defined, the stratified unit must
        be defined by UNITID , HANGID ,
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     The output file contains all the fields from the IN file plus the UCS
        coordinate fields UCSA , UCSB and UCSC , and the UNITNAME field. The OUT
        file must be different from the IN file.
        required: Yes; default: ; range: 

        QUADS:     Optional output file containing the quadrilaterals linking hangingwall and
        footwall points within and between sections. The file contains 8 fields:
        PVALUE, PTN, XP, YP, ZP BLOCKTYP, SECTION and UNITNAME.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     The numeric field name in the IN file holding the data X co-ordinate, in
        world coordinates. The default field name is X.
        required: No; default: ; range: 

        Y:     The numeric field name in the IN file holding the data Y co-ordinate, in
        world coordinates. The default field name is Y.
        required: No; default: ; range: 

        Z:     The numeric field name in the IN file holding the data Z co-ordinate, in
        world coordinates. The default field name is Z.
        required: No; default: ; range: 

        SECTION:     The numeric field name in the STRING file holding the section identifier.
        The default field name is SECTION.
        required: No; default: ; range: 

        BOUNDARY:     The numeric field name in the STRING file holding the boundary identifier.
        The default field name is BOUNDARY.
        required: No; default: ; range: 

        WSTAG:     Within Section TAG. A numeric tag field in the STRING file, defining the
        stratigraphical links between hangingwall and footwall points on strings
        within the same section. A value of 0 or - means that the point is not
        linked. The default field name is WSTAG.
        required: No; default: ; range: 

        BSTAG:     Between Section TAG. A numeric tag field in the STRING file, defining the
        stratigraphical links between 2 points on strings on adjacent sections
        with the same BOUNDARY. A value of 0 or - means that the point is not
        linked. The default field name is BSTAG.
        required: No; default: ; range: 

        TAG:     A numeric tag field in the STRING file, defining both the stratigraphical
        links between points on strings within the same section, and between
        points on adjacent sections with the same BOUNDARY. A value of 0 or -
        means that the point is not linked. The default field name is TAG.
        required: No; default: ; range: 

        UNITNAME:     An alpha or numeric field in the UNITDEF file defining the name or number
        of the unit. The default field name is UNITNAME.
        required: No; default: ; range: 

        HANGWALL:     A numeric field in the UNITDEF file which defines the BOUNDARY value of
        the hangingwall for each UNITNAME. The default field name is HANGWALL.
        required: No; default: ; range: 

        FOOTWALL:     A numeric field in the UNITDEF file which defines the BOUNDARY value of
        the footwall for each UNITNAME. The default field name is FOOTWALL.
        required: No; default: ; range: 

        UCSA:     The name of the A coordinate field in the UCS measured perpendicular to
        the strings within a section [across strike]. The field is created in the
        OUT file and has the default name of UCSA.
        required: No; default: ; range: 

        UCSB:     The name of the B coordinate field in the UCS measured parallel to the
        boundary strings [down dip]. This field is created in the OUT file and has
        the default name of UCSB.
        required: No; default: ; range: 

        UCSC:     The name of the C coordinate field in the UCS measured from section to
        section [along strike]. This field is created in the OUT file and has the
        default name of UCSC.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LINKMODE:     The method by which links between strings are created.  Option
        Description  0  - Within section links are defined by the WSTAG field, or
        by the TAG field if WSTAG does not exist. Between section links are
        defined by the BSTAG field, or by the TAG field if BSTAG does not exist.
        1  - Within section links are defined automatically. Between section links
        are defined by the BSTAG field, or by the TAG field if BSTAG does not
        exist.  2  - Within section links are defined by the WSTAG field, or by
        the TAG field if WSTAG does not exist. Between section links are defined
        automatically.  3  - Within section links are defined automatically.
        Between section links are defined automatically. For simple structures it
        is not essential to define tag points on the strings; using the default
        value (3) ensures that automatic linking will be applied both within and
        between sections.
        required: No; default: 3; range: 0,3

        UCSAMODE:     The type of UCSA coordinate written to the OUT file. Default (2).  Option
        Description  1  - coordinates are normalised.  2  - coordinates are
        adjusted.  3  - coordinates are true length.  4  - coordinates are world X
        value.  5  - coordinates are world Y value.  6  - coordinates are world Z
        value.
        required: No; default: 2; range: 1,6

        UCSBMODE:     The type of UCSB coordinate written to the OUT file. Default (3).  Option
        Description  1  - coordinates are normalised.  2  - coordinates are
        adjusted.  3  - coordinates are true length.  4  - coordinates are world X
        value.  5  - coordinates are world Y value.  6  - coordinates are world Z
        value.
        required: No; default: 3; range: 1,6

        UCSCMODE:     The type of UCSC coordinate written to the OUT file. Default (2).  Option
        Description  1  - coordinates are normalised.  2  - coordinates are
        adjusted.  3  - coordinates are true length.  4  - coordinates are world X
        value.  5  - coordinates are world Y value.  6  - coordinates are world Z
        value.
        required: No; default: 2; range: 1,6

        PLANE:     The plane of the structural interpretations defined in the STRING file.
        Default (1). 1 - vertical sectional interpretation. 2 - interpretation in
        plan.
        required: No; default: 1; range: 1,2

        HANGID:     The value of the field BOUNDARY in the STRING file that defines the
        hangingwall of the unit. It will be used if the UNITDEF file is not
        defined.
        required: No; default: ; range: Undefined

        FOOTID:     The value of the field BOUNDARY in the STRING file that defines the
        footwall of the unit. It will be used if the UNITDEF file is not defined.
        required: No; default: ; range: Undefined

        UNITID:     If HANGID and FOOTID are used then the corresponding unit number is
        defined by parameter UNITID.
        required: No; default: ; range: Undefined

        TOLRNC:     Tolerance in the calculation of the UCSA coordinate expressed as a
        proportion of the UCSA width. The default is (0).
        required: No; default: 0; range: Undefined

        UCSALIMT:     Flag to define the limits of the UCSA coordinate if UCSAMODE=1 or 2 and
        TOLRNC>0. The options below are defined in terms of the Normalized mode
        [UCSAMODE=1]. Default (1)  Option  Description  1  - UCSA values can be
        less than 0 and greater than 1  2  - UCSA values can be less than 0.
        Values calculated as greater than 1 are reset to 1  3  - UCSA values
        calculated as less than 0 are reset to 0. Values can be greater than 1  4
        - UCSA values calculated as less than 0 are reset to 0. Values calculated
        as greater than 1 are reset to 1
        required: No; default: 1; range: 1,4

        ORGTAG:     Tag number of points which define the origin surface from which the UCSB
        coordinate is measured. The default surface if ORGTAG is undefined (-) is
        created from the first points on each of the hangingwall and footwall
        strings.
        required: No; default: ; range: Undefined

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.unfold).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'UNFOLD ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def unifcond(self,
                    samples_i,
                    vgram_i,
                    panmodel_i,
                    ucmodel_o,
                    grade_f,
                    kriging_f,
                    dispvar_f,
                    infoeff_i='optional',
                    cutoff_i='optional',
                    weight_f='optional',
                    errcode_f='optional',
                    vrefnum_p=0,
                    discx_p=5,
                    discy_p=5,
                    discz_p=5,
                    normsill_p=0,
                    classes_p=1,
                    cutmin_p=0,
                    cutint_p=10,
                    cutnum_p=10,
                    numsmux_p=1,
                    numsmuy_p=1,
                    numsmuz_p=1,
                    gaout_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     A Datamine Binary file (.dm) that contains sample positional information
        and supporting attributes.
        required: Yes; default: ; range: 

        VGRAM:     A Datamine experimental variogram parameter file
        required: Yes; default: ; range: 

        PANMODEL:     A file containing the panel model to be conditioned.
        required: Yes; default: ; range: 

        INFOEFF:     You can (optionally) incorporate the information effect to the estimation
        of the grade tonnage curves: during the production stage, the actual
        grades are recovered and may then be taken into account so the decision
        between ore and waste is made upon more accurate estimates of the SMUs.
        Therefore you can anticipate future decisions before obtaining the
        production blast-holes results, because only the kriging variance of these
        SMUs final estimates is necessary.
        required: No; default: ; range: 

        CUTOFF:     A file specifying variably-spaced cut-off values. The file should contain
        a field titled CUTOFF, which is a list of values to use instead of those
        in CUTMIN, CUTINT and CUTNUM. If @CUTOFF is specified, CUTMIN, CUTINT and
        CUTNUM parameters will be ignored.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        UCMODEL:     The output file containing the uniform conditioned panel model.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        GRADE:     The grade field (present in the samples file) that will be considered
        during the process of Uniform Conditioning.
        required: Yes; default: ; range: 

        KRIGING:     The field in the input (panel) model containing kriged values to be
        conditioned.
        required: Yes; default: ; range: 

        DISPVAR:     The field in the input (panel) model containing kriging variance data.
        required: Yes; default: ; range: 

        WEIGHT:     An optional weighting field.
        required: No; default: ; range: 

        ERRCODE:     The field in the input model containing error code information, if
        present.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        VREFNUM:     A reference number relating to an experimental variogram as defined in
        VGRAM
        required: No; default: 0; range: 

        DISCX:     Number of discretisation points in X direction as used for calculating the
        covariance of a cell with each of the surrounding samples. This is then
        used in calculating the kriging weights.
        required: No; default: 5; range: 

        DISCY:     Number of discretisation points in Y direction
        required: No; default: 5; range: 

        DISCZ:     Number of discretisation points in Z direction
        required: No; default: 5; range: 

        NORMSILL:     If @NORMSILL=1 then the input variogram needs to be normalized by the
        process  If @NORMSILL=0 then the input variogram model does not need to be
        normalized by the process
        required: No; default: 0; range: 0,1

        CLASSES:     Number of panel classes
        required: No; default: 1; range: 

        CUTMIN:     The minimum cutoff grade to be considered during Uniform Conditioning
        required: No; default: 0; range: 

        CUTINT:     The size of each grade cutoff interval
        required: No; default: 10; range: 

        CUTNUM:     The number of grade cutoff intervals to considered during Uniform
        Conditioning
        required: No; default: 10; range: 

        NUMSMUX:     Number of selective mining units (per panel) in the X direction
        required: No; default: 1; range: 

        NUMSMUY:     Number of selective mining units (per panel) in the Y direction
        required: No; default: 1; range: 

        NUMSMUZ:     Number of selective mining units (per panel) in the Z direction
        required: No; default: 1; range: 

        GAOUT:     Set to 1 to include grade-above cutoffs in the output model. Set 0 to
        exclude grade-above cutoffs which allows 50% more cutoff intervals to be
        specified.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.unifcond).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'UNIFCOND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def unlink(self,
                in_i
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be unlinked.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.unlink).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'UNLINK ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def valida(self,
                in_i,
                out_o
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be validated.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     File containing validated records.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.valida).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'VALIDA ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def varfit(self,
                in_i,
                out_o,
                ave_dot_dist_f='AVE.DIST',
                vgram_f='VGRAM',
                key_f='optional',
                azi_f='AZI',
                dip_f='DIP'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File containing experimental variogram[s]. This will usually be created by
        VGRAM. The file can contain up to 500 variograms.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Input and output file for parameters of fitted models. The file contains
        one record per model. If the file already exists and contains all the
        required fields [53 fields in total] then any existing models will be
        maintained, otherwise the file will be deleted and a new one created. The
        new file will contain the following fields: VREFNUM - variogram reference
        number VANGLE1 - first rotation angle VAXIS1 - first rotation axis VANGLE2
        - second rotation angle VAXIS2 - second rotation axis VANGLE3 - third
        rotation angle VAXIS3 - third rotation axis NUGGET - nugget variance ST1 -
        model type for structure 1 [1=spherical, 2=power, 3=exponential,
        4=gaussian, 5= De Wijsian] ST1PAR1 - parameter 1 for structure 1 ST1PAR2 -
        parameter 2 for structure 1 ST1PAR3 - parameter 3 for structure 1 ST1PAR4
        - parameter 4 for structure 1 ST9 - model type for structure 9 ST9PAR1 -
        parameter 1 for structure 9 ST9PAR2 - parameter 2 for structure 9 ST9PAR3
        - parameter 3 for structure 9 ST9PAR4 - parameter 4 for structure 9
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        AVE.DIST:     The field to be plotted along the X axis. Usually either LAG or AVE.DIST.
        The default is AVE.DIST.
        required: No; default: AVE.DIST; range: 

        VGRAM:     The field to be plotted along the Y axis. Processes VARDIR and VARHOL
        create fields V.GRAM, REL.VGRM and LOGVGRM. Process VGRAM creates fields
        VGRAM, PWRVGRAM and LOGVGRAM. The default is VGRAM.
        required: No; default: VGRAM; range: 

        KEY:     If the IN file was created using VGRAM and a KEY field was used, then the
        name of the KEY field should be specified here.
        required: No; default: ; range: 

        AZI:     Field containing azimuth of experimental variogram. Processes VARDIR and
        VARHOL create field DIRECTN, and VGRAM creates field AZI. The default is
        AZI.
        required: No; default: AZI; range: 

        DIP:     Field containing dip of experimental variogram. Usually DIP, the default.
        required: No; default: DIP; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.varfit).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'VARFIT ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def vcontour(self,
                    in_i,
                    out_o
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     File to be validated.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     File containing validated records.
        required: Yes; default: ; range: 

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.vcontour).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'VCONTOUR ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def vgm3dmap(self,
                    samples_i,
                    _py_3dmap_o,
                    xpt_or_ypt_or_zpt_p,
                    nblocks_p,
                    maxlag_p,
                    nlags_p,
                    gridmode_p,
                    nangles_p='See Documentation',
                    g1_to_20_p=['See Documentation'],
                    vgram_o='optional',
                    disc_p=3,
                    minsamp_p=1,
                    optsamp_p=50,
                    searchlf_p=2,
                    search2f_p=1,
                    search3f_p=1,
                    invdistp_p=1
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        SAMPLES:     A Datamine table (.dm) that contains sample positional information and
        supporting attributes.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        3DMAP:     The output block model file containing the interpolated variogram value
        for each grade.
        required: Yes; default: ; range: 

        VGRAM:     Optional output experimental variograms used to create the 3D interpolated
        variogram. Requires GRIDMODE = 0.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XPT/YPT/ZPT:     X/Y/Z coordinate of sample data in the SAMPLE file.
        required: Yes; default: XPT/YPT/ZPT; range: Undefined

        NBLOCKS:     The number of blocks along each axis for the output variogram block model.
        A greater number of blocks will result in a finer grid but will require
        longer calculation times.
        required: Yes; default: 40; range: Undefined

        MAXLAG:     The maximum distance between pairs of samples to be considered for
        variogram calculation.
        required: Yes; default: ; range: Undefined

        NLAGS:     The number of lags used to calculate experimental variograms. It is
        recommended that this value is less than NBLOCKS.  The incremental lag
        distance is then calculated as MAXLAG / NLAGS.
        required: Yes; default: 25; range: 1,200

        GRIDMODE:     If set to 1 a regular grid will be used to calculate experimental
        variogram values to be interpolated into the output variogram map. If set
        to 0 standard directional variograms will be used.
        required: Yes; default: 0; range: 0,1

        NANGLES:     The number of angles (directions) for experimental variogram calculation.
        The increment between directions for both azimuth and dip is then
        calculated as 180 / NANGLES degrees.  A greater number may allow more
        structure to be revealed in the resulting variogram map. This is not used
        for GRIDMODE=1.
        required: Yes if GRIDMODE=0; default: 9; range: 1,180

        G1-20:     Grade fields for variogram calculation. At least G1 must be specified.
        required: Yes (G1) No (G2-20); default: ; range: Undefined

        DISC:     The number of discretization points in X, Y and Z used for inverse
        distance interpolation of the variogram map.
        required: No; default: 3; range: 1,10

        MINSAMP:     The minimum number of experimental variogram points to be found within the
        search radius when performing inverse distance interpolation of the
        variogram block model.
        required: No; default: 1; range: 1,10

        OPTSAMP:     The optimum number of experimental variogram points to be found within the
        search radius when performing inverse distance interpolation of the
        variogram map.
        required: No; default: 50; range: 1,100

        SEARCHLF:     The radius of the initial search sphere for each interpolated variogram
        map point as a factor of the lag distance.
        required: No; default: 2; range: 0,100

        SEARCH2F:     The factor of the search sphere relative to the second search sphere.
        required: No; default: 1; range: 0,100

        SEARCH3F:     The factor of the search sphere relative to the second search sphere.
        required: No; default: 1; range: 0,100

        INVDISTP:     The inverse distance power used when performing inverse distance
        interpolation of the variogram map.
        required: No; default: 1; range: 0,100

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.vgm3dmap).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'VGM3DMAP ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def vgram(self,
                in_i,
                out_o,
                lag_p,
                f1_to_30_f=['See Documentation'],
                cutoff_i='optional',
                pairsout_o='optional',
                x_f='X',
                y_f='Y',
                z_f='Z',
                key_f='optional',
                lagtol_p='optional',
                nlags_p=25,
                nsublag_p=0,
                azi_p=0,
                horang_p=90,
                dip_p=0,
                verang_p=90,
                cylrad_p=0,
                numhor_p=1,
                horinc_p=0,
                numver_p=1,
                verinc_p=0,
                allkeys_p=0,
                keymeth_p=1,
                crossvar_p=0,
                indstep_p=0,
                indmin_p=0,
                indnum_p=0,
                nested_p=0,
                print_p=1,
                logcon_p=0.001,
                addcon_p=0,
                laymeth_p=0,
                spacing_p=100,
                prompt_p=20,
                nlags1_p=0,
                angle1_p=0,
                axis1_p=3,
                angle2_p=0,
                axis2_p=1,
                angle3_p=0,
                axis3_p=3
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data file. This must contain the fields X and Y , and at
        least one grade field F1. The Z field is optional. This file must also
        contain the KEY field, if it has been specified.
        required: Yes; default: ; range: 

        CUTOFF:     This contains the cut-off grades for indicator variograms. There is a
        single field CUTOFF, and up to 24 records, one per cut-off. The file does
        not have to be sorted on CUTOFF.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Variogram output file. This will contain the fields described previously.
        The name must not be the same as the input file.
        required: Yes; default: ; range: 

        PAIRSOUT:     The sample pairs output file containing one record for each sample pair
        used to calculate a variogram or cross variogram.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        F1-30:     Grade fields for variogram and/or cross variogram. At least one field must
        be specified. Up to 29 additional fields can be specified.
        required: Yes for F1, No for second and subsequent fields.; default: ; range: 

        X:     X coordinate of sample data. The default field name is X.
        required: No; default: X; range: 

        Y:     Y coordinate of sample data. The default field name is Y.
        required: No; default: Y; range: 

        Z:     Z coordinate of sample data. This field is optional, but if field Z exists
        in the sample data file it will be used.
        required: No; default: Z; range: 

        KEY:     Key field. Variograms are calculated for each key field value.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        LAG:     Distance for one lag.
        required: Yes; default: ; range: Undefined

        LAGTOL:     Tolerance to be used when selecting sample pairs. This is specified in
        user data units and should be between 0 and half of LAG. If not specified
        or not within this range then half of LAG is used (-). If sublags are
        used, then the tolerance for a sublag is LAGTOL/ NSUBLAG.
        required: No; default: ; range: Undefined

        NLAGS:     Number of lags. The maximum is 9999. The default is (25).
        required: No; default: 25; range: 19,999

        NSUBLAG:     The number of sublags per lag ie the sublag distance is LAG/ NSUBLAG. Only
        the first NLAGS1 lags are divided. (0).
        required: No; default: 0; range: Undefined

        AZI:     Azimuth of first variogram, measured in degrees from the Y axis in the
        rotated plane. 0 degrees is in the direction of the positive Y axis. 90
        degrees is in the direction of the positive X axis. Default (0).
        required: No; default: 0; range: 0,360

        HORANG:     Azimuth regularisation angle, measured in degrees. The angle range taken
        is AZI + or - HORANG. Default (90).
        required: No; default: 90; range: Undefined

        DIP:     Dip direction of first variogram, measured in degrees in direction of the
        negative Z axis in the rotated plane. A dip angle of 0 is in the rotated
        X-Y plane [usually horizontal], a dip of 90 is in the negative Z direction
        [vertically downwards] and a dip of -90 is in the positive Z direction
        [vertically upwards] (0).
        required: No; default: 0; range: -90,90

        VERANG:     Dip regularisation angle, measured in degrees. The angle range is taken as
        DIP + or - VERANG. The default is (90).
        required: No; default: 90; range: -90,90

        CYLRAD:     Cylindrical search radius (0). Zero means cylindrical search constraint
        not applied.
        required: No; default: 0; range: Undefined

        NUMHOR:     Number of azimuths. The maximum number of individual variograms calculated
        is NUMHOR
        required: No; default: 1; range: Undefined

        HORINC:     Azimuth increment angle in degrees measured in the rotated plane.
        Variograms are calculated for azimuths AZI , AZI + HORINC , AZI + 2 AZI +
        [ NUMHOR-1]
        required: No; default: 0; range: Undefined

        NUMVER:     Number of dips. The maximum number of individual variograms calculated is
        NUMHOR
        required: No; default: 1; range: Undefined

        VERINC:     Dip increment angle in degrees measured in the rotated plane. Variograms
        are calculated for dips DIP , DIP + VERINC , DIP + 2 ......, DIP + [
        NUMVER-1]
        required: No; default: 0; range: Undefined

        ALLKEYS:     This parameter controls whether the individual variograms are written or
        whether just the average is written. (0).  Option  Description  0  only
        the average over all KEY field values is written to the output file. This
        is the default.  1  variograms for all KEY field values and the average
        variogram are written to the output file. In this case the output file
        will include the KEY field.
        required: No; default: 0; range: 0,1

        KEYMETH:     Controls how keys are applied. (1).  Option  Description  1  calculate
        variograms within the same KEY field.  2  calculate variograms using only
        pairs of samples with different KEY values.  3  calculate both the within
        KEY and different KEY variograms.
        required: No; default: 1; range: 1,3

        CROSSVAR:     Controls whether variograms and/or cross variograms are to be calculated.
        (0).  Option  Description  0  only variograms.  1  only cross variograms.
        All possible combinations of Fm/Fn are calculated.  2  both variograms and
        cross variograms are calculated.
        required: No; default: 0; range: 0,2

        INDSTEP:     The step size between successive indicator cutoffs. (0). =0 Do not use
        indicators, unless a CUTOFF file has been specified. This is the default.
        >0 The step size between indicators.
        required: No; default: 0; range: Undefined

        INDMIN:     The lowest indicator cutoff value. (0).
        required: No; default: 0; range: Undefined

        INDNUM:     The number of indicators to use; ie indicator variograms will be
        calculated for cutoffs of INDMIN , INDMIN+ 1 INDSTEP , INDMIN+ 2 INDSTEP ,
        ..... , INDMIN+ [ INDNUM - 1]* INDSTEP. A maximum of 24 cutoffs is
        allowed. (0).
        required: No; default: 0; range: Undefined

        NESTED:     Method for calculating indicators. (0).  Option  Description  0  The
        normal method is used; ie not nested.  1  Nested method, Bottom Up.  2
        Nested Method, Top Down.
        required: No; default: 0; range: 0,2

        PRINT:     Flag to control the output sent to the display:  Option  Description  0
        minimum output - a summary of the input parameters plus a brief
        statistical summary.  1  As 0 plus output of all variograms and cross
        variograms for each layer and key value. The default is (1).
        required: No; default: 1; range: 0,1

        LOGCON:     If the sample value is less than LOGCON , then it is substituted by the
        value of LOGCON in the calculation of the logarithmic variogram (0.001).
        required: No; default: 0.001; range: Undefined

        ADDCON:     Constant added to VALUE field before calculation of log variograms or log
        statistics (0).
        required: No; default: 0; range: Undefined

        LAYMETH:     The layer method. If the deposit is stratified it is often useful to
        calculate variograms with in each layer, and also the average over all
        layers. The base layer plane is defined by the XY plane after the
        rotations ANGLEn, AXISn have been applied. Layers are defined by 2
        parameters. (0). =0 Layers are not used. This is the default. =1 Layers
        are used, but only the average over all layers is written to the output
        file. =2 Layers are used, and the variogram for each layer and the average
        over all layers are written to the output file. Field LAYER is included in
        the output file. It is set to - for the average over all layers.
        required: No; default: 0; range: 0,2

        SPACING:     The samples are assigned a layer number relative to the rotated XY plane.
        Layer 1 includes all samples between the rotated XY plane and a parallel
        plane whose rotated Z value is SPACING.  Layer 2 includes all samples
        between the plane at Z= SPACING and Z=2 SPACING. The sample with the
        minimum Z value [measured in the rotated plane] lies on the plane which is
        at the base of layer 1.  If SPACING = 0 then layers are not used.
        required: No; default: 100; range: Undefined

        PROMPT:     The number of lines of output to be displayed on the screen before being
        prompted to continue or abort. The default is (20). The output for each
        variogram restarts the line count. Terminating the output does not stop
        all results being written to the output file.
        required: No; default: 20; range: Undefined

        NLAGS1:     The number of lags to be divided into sublags. (0).
        required: No; default: 0; range: Undefined

        ANGLE1:     First rotation angle, in degrees. (0).
        required: No; default: 0; range: Undefined

        AXIS1:     First rotation axis. 1=X, 2=Y, 3=Z. The first rotation is by ANGLE1
        degrees clockwise around axis AXIS1 , when viewed along the axis from
        positive values towards the origin. An axis value of 0 means no rotation.
        (3).
        required: No; default: 3; range: 1,3

        ANGLE2:     Second rotation angle, in degrees. (0).
        required: No; default: 0; range: Undefined

        AXIS2:     Second rotation axis. 1=X, 2=Y, 3=Z. The second rotation is by ANGLE2
        degrees clockwise around axis AXIS2 , when viewed along the axis from
        positive values towards the origin. An axis value of 0 means no rotation.
        (1).
        required: No; default: 1; range: 1,3

        ANGLE3:     Third rotation angle, in degrees. (0).
        required: No; default: 0; range: Undefined

        AXIS3:     Third rotation axis. 1=X, 2=Y, 3=Z. The first rotation is by ANGLE3
        degrees clockwise around axis AXIS3 , when viewed along the axis from
        positive values towards the origin. An axis value of 0 means no rotation.
        (3).
        required: No; default: 3; range: 1,3

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.vgram).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'VGRAM ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def weave(self,
                in1_i,
                in2_i,
                out_o,
                key1_to_10_f,
                key3_f='optional',
                keytol_p=1e-05
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN1:     First file to be updated (sorted on required keyfields).
        required: Yes; default: ; range: 

        IN2:     Second file (update file) (sorted on required keyfields).
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output file.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        KEY1_to_10:     Keyfield 1 to 10 for matching on.
        required: Yes; default: ; range: 

        kEY3:     Keyfield 3.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        KEYTOL:     KEYTOL is the tolerance value used to test whether numeric key values are
        equal. It must be greater than or equal to zero. It replaces the previous
        heuristic comparison method. If KEYTOL is set to a negative value then
        zero is used. In a macro KEYTOL can be set to absent using -. "@KEYTOL=-"
        This will revert to legacy behaviour and use a heuristic comparison in
        relational commands and zero in sort.
        required: No; default: 0.00001; range: 0,+

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.weave).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WEAVE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def wedgevol(self,
                    proto_i,
                    wiretr1_i,
                    wirept1_i,
                    wiretr2_i,
                    wirept2_i,
                    results_o,
                    density_p,
                    splits_p,
                    zmin_p,
                    zmax_p,
                    sftype1_p,
                    sftype2_p,
                    wiretr3_i='optional',
                    wirept3_i='optional',
                    modelou_o='optional',
                    sftype3_p=2
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        PROTO:     Block model prototype.
        required: Yes; default: ; range: 

        WIRETR1:     Triangle file of update wireframe surface 1 (DTM).
        required: Yes; default: ; range: 

        WIREPT1:     Point file of update wireframe surface 1 (DTM).
        required: Yes; default: ; range: 

        WIRETR2:     Triangle file of update wireframe surface 2 (DTM).
        required: Yes; default: ; range: 

        WIREPT2:     Point file of update wireframe surface 2 (DTM).
        required: Yes; default: ; range: 

        WIRETR3:     Triangle file of wireframe surface 3 (DTM).
        required: No; default: ; range: 

        WIREPT3:     Point file of update wireframe surface 3 (DTM).
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        RESULTS:     Output evaluation results data file.
        required: Yes; default: ; range: 

        MODELOU:     Wedge block model.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DENSITY:     Density of filled volumes.
        required: Yes; default: 1; range: 0.001,99999

        SPLITS:     Subcell splitting of internal wedge block model.
        required: Yes; default: 0; range: 0,3

        ZMIN:     Minimum elevation of wedge volume.
        required: Yes; default: -9999999; range: 

        ZMAX:     Maximum elevation of wedge volume.
        required: Yes; default: 9999999; range: 

        SFTYPE1:     Wedge below or above surface 1. Select one of the following options, with
        the default being 1. 1: Create wedge below. 2: Create wedge above.
        required: Yes; default: 1; range: 1,2

        SFTYPE2:     Wedge below or above surface 2. Select one of the following options, with
        the default being 2. 1: Create wedge below. 2: Create wedge above.
        required: Yes; default: ; range: 1,2

        SFTYPE3:     Wedge below or above surface 3. Select one of the following options, with
        the default being 2. 1: Create wedge below. 2: Create wedge above.
        required: No; default: 2; range: 1,2

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.wedgevol).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WEDGEVOL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def wfcode(self,
                points_i,
                wiretr_i,
                wirept_i,
                out_o,
                x_f,
                y_f,
                z_f,
                code_p,
                perimin_i='optional',
                zone_f='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                allpts_p=0,
                setabsnt_p=0,
                exclude_p=0,
                toleranc_p=0.001,
                checkrot_p=1,
                outside_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POINTS:     Input file containing X, Y and Z coordinates to be updated with values
        from wireframes. This file may be a block model, desurveyed sample file or
        any points file with X,Y,Z coordinates.
        required: Yes; default: ; range: 

        WIRETR:     Input wireframe triangle file used to define the volume(s) within which to
        update the input points with new values.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file used to to define the volume(s) within which to
        update the input points file with new values
        required: Yes; default: ; range: 

        PERIMIN:     Optional perimeter input file to control area over which input points are
        considered. Only points either inside or outside the supplied perimeters
        are coded depending on the value of the @OUTSIDE parameter.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        OUT:     Output point data file containing the coded values. This is a copy of the
        input point data file with extra fields added from the wireframe file.  If
        the input point data file already contains fields that are being coded
        then values within volumes defined by the wireframes will be overwritten.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        X:     Field in POINTS file defining the X co-ordinate.
        required: Yes; default: ; range: 

        Y:     Field in POINTS file defining the Y co-ordinate.
        required: Yes; default: ; range: 

        Z:     Field in POINTS file defining the Z co-ordinate.
        required: Yes; default: ; range: 

        ZONE:     Field in WIRETR file used to identify individual surfaces.  WIRETR does
        NOT have to be sorted by ZONE. This field can be alpha or numeric
        required: No; default: ; range: 

        ATTRIB1:     Field from the WIRETR file to be placed into the output file for all
        records which are selected.
        required: No; default: ; range: 

        ATTRIB2:     Field from the WIRETR file to be placed into the output file for all
        records which are selected.
        required: No; default: ; range: 

        ATTRIB3:     Field from the WIRETR file to be placed into the output file for all
        records which are selected.
        required: No; default: ; range: 

        ATTRIB4:     Field from the WIRETR file to be placed into the output file for all
        records which are selected.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        CODE:     Parameter to define how to treat the input wireframes and code the points
        =1 : Code points above a DTM surface.  =2 : Code points below a DTM
        surface.  =3 : Code points inside a solid.  =4 : Code points outside a
        solid.  =5 : Code points above a wireframe surface.  =6 : Code points
        below a wireframe surface.
        required: Yes; default: 3; range: 1, 8

        ALLPTS:     Set to 1 to copy all the input points to the output file. Set to zero to
        copy only the points selected by the wireframe. This is ignored if @CODE=4
        =0 : Copy only the coded points.  =1 : Copy all the points to the output
        file. The coded points will be flagged with the ZONE field values or the
        attributes.
        required: No; default: 0; range: 0, 1

        SETABSNT:     Set the specified ZONE and attribute fields in the input points file to
        absent before processing.  =0 : Do not set the ZONE and attribute values
        to absent before processing (Default).  =1 : Set the ZONE and attribute
        values to absent before porocessing.
        required: No; default: 0; range: 0,1

        EXCLUDE:     Exclude points that fall on, or within TOLERANC, of the wireframe surface.
        =0 : Do not exclude points (Default).  =1 : Exclude points to be coded
        that are within TOLERANC of a DTM surface.
        required: No; default: 0; range: 0,1

        TOLERANC:     Tolerance used to determine whether a data point is 'on' a surface or not
        (0.001).
        required: No; default: 0.001; range: Undefined

        CHECKROT:     Set to 1 to automatically check for and correctly process rotated models
        when the input points file is a block model. The default value is one. If
        this is not set to 1 and the model is rotated then the wireframe points
        need to be transformed into the model coordinate space using CDTRAN before
        running TRIFIL.  =0 : Do not check for input rotated model. If the input
        model is rotated assume wireframe points are in the rotated space.  =1 :
        Automatically check for an input rotated model and internally transform
        wireframe points.
        required: No; default: 1; range: 0,1

        OUTSIDE:     Used if PERIMIN has been defined to only code points inside or outside
        perimeters.  =0 : Code only points that lie inside the perimeters in the
        PERIMIN file (Default).  =1 : Code only points that lie outside the
        perimeters in the PERIMIN file.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.wfcode).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WFCODE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def wfexpnd(self,
                intr_i,
                inpt_i,
                outtr_o,
                outpt_o,
                distance_p,
                toleranc_p,
                surfblnd_p=1
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        INTR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        INPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        OUTTR:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        OUTPT:     Output wireframe point file..
        required: Yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        DISTANCE:     The distance required to move the triangles out by. A positive number will
        move them in the direction of each triangle normal (usually outwards for a
        verified closed wireframe, or upwards for a verified open wireframe). A
        negative distance will move the triangles in the opposite direction (e.g.
        to shrink a closed volume).
        required: Yes; default: ; range: -, +

        TOLERANC:     A value which determines how closely the required distance must be met.
        This has most effect in the number of triangles added to approximate the
        path around sharp edges in the wireframe. A smaller tolerance will result
        in smoother curves but a bigger wireframe. A value of one tenth of the
        offset distance often provides a good balance between wireframe size and
        smoothness.
        required: Yes; default: ; range: 0.001, +

        SURFBLND:     Determines whether blends will be created on the boundaries of open
        wireframes: 0 = don't blend boundaries, 1 = blend boundaries.
        required: No; default: 1; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.wfexpnd).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WFEXPND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def wftrend(self,
                pointin_i,
                wiretr_o,
                wirept_o,
                xpt_f,
                ypt_f,
                zpt_f,
                extn_p,
                gridinc_p,
                pointou_o='optional',
                tr_p=0,
                _py_1_p=1,
                _py_2_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        POINTIN:     Input point data file.
        required: Yes; default: ; range: 

        ------
        OUTPUT
        ------

        WIRETR:     Output wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Output wireframe point file.
        required: Yes; default: ; range: 

        POINTOU:     Output point data file. This includes both the input point data, and the
        points which were extrapolated using the trend surface.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        XPT:     X field in input point data file.
        required: Yes; default: XPT; range: 

        YPT:     Y field in input point data file.
        required: Yes; default: YPT; range: 

        ZPT:     Z field in input point data file.
        required: Yes; default: ZPT; range: 

        ----------
        PARAMETERS
        ----------

        EXTN:     The extension distance required beyond the data points for the
        triangulation.
        required: Yes; default: ; range: 0.1,+

        GRIDINC:     Grid interval for the interpolated points beyond the limits of the
        original point data.
        required: Yes; default: ; range: 0.1,+

        TR:     Flag to indicate whether the field in the wireframe triangle file should
        have different values depending on whether or not the triangle is in the
        extrapolated area: 0 = all triangles have colour defined by parameter 1 .
        1 = triangles in the area covered by POINTIN data are coloured 1 and those
        in the extrapolated area are coloured 2.
        required: No; default: 0; range: 0,1

        1:     Colour field for the output points and wireframe triangles for data lying
        within the area covered by POINTIN data.
        required: No; default: 1; range: 1,64

        2:     Colour field for the output point data file for data points which have
        been extrapolated. If parameter TR is set to 1, then triangles in the
        extrapolated area will also have this colour; otherwise they will be 1. If
        the parameter 2 is undefined then it will be set equal to 1.
        required: No; default: ; range: 1,64

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.wftrend).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WFTREND ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def wirefill(self,
                    wiretr_i,
                    wirept_i,
                    model_o,
                    wiretype_p,
                    zone_f='See Documentation',
                    cellxmin_p='See Documentation',
                    cellymin_p='See Documentation',
                    cellzmin_p='See Documentation',
                    proto_i='optional',
                    zcode_p=1,
                    cellxmax_p=10,
                    cellymax_p=10,
                    cellzmax_p=10
                    ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Input wireframe triangle file. The wireframe may consist of one or more
        solid wireframes, or one or more single surface DTMs. It may not contain
        both solid wireframes and DTMs.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe points file.
        required: Yes; default: ; range: 

        PROTO:     Model prototype file. You may specify the name of an existing block model
        to define the model prototype settings. The process only uses the model
        extent and cell size fields as specified in the data definition - any
        actual cells or subcells will be ignored. If a prototype model is not
        specified, then the model dimensions will be calculated automatically from
        the parameter described below and the extent of the wireframe points data.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        MODEL:     Output block model file. This will include the 13 standard model fields
        plus the ZONE field, if specified.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ZONE:     Name of the attribute field to be created in the output model file. If
        this field exists in the wireframe file then the wireframe attribute
        values will be passed from the wireframes to the model cells.
        required: yes; default: ; range: 

        ----------
        PARAMETERS
        ----------

        WIRETYPE:     Type of wireframe model to be filled with cells. Select one of the
        following options, with the default being 1: 1: solid - create cells
        inside. 2: surface - create cells below. 3: surface - create cells above.
        4: surface - create cells to the south. 5: surface - create cells to the
        north. 6: surface - create cells to the west. 7: surface - create cells to
        the east.
        required: Yes; default: 1; range: 1,7

        CELLXMIN:     Minimum cell size in the X direction. If it is set to zero then seam
        filling is used - ie the cell is split once at the wireframe boundary.
        Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be zero.
        required: yes; default: 2.5; range: 0,10000

        CELLYMIN:     Minimum cell size in the Y direction. If it is set to zero then seam
        filling is used - ie the cell is split once at the wireframe boundary.
        Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be zero.
        required: yes; default: 2.5; range: 0,10000

        CELLZMIN:     Minimum cell size in the Z direction. If it is set to zero then seam
        filling is used - ie the cell is split once at the wireframe boundary.
        Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be zero.
        required: yes; default: 2.5; range: 0,10000

        ZCODE:     Zone code to be inserted in the output model ZONE field. This parameter
        will be ignored if the field ZONE exists in the wireframe triangle file.
        required: No; default: 1; range: Undefined

        CELLXMAX:     Maximum (ie parent) cell size in the X direction. This will be ignored if
        PROTO is defined.
        required: No; default: 10; range: 0.5,10000

        CELLYMAX:     Maximum (ie parent) cell size in the Y direction. This will be ignored if
        PROTO is defined.
        required: No; default: 10; range: 0.5,10000

        CELLZMAX:     Maximum (ie parent) cell size in the Z direction. This will be ignored if
        PROTO is defined.
        required: No; default: 10; range: 0.5,1000

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.wirefill).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WIREFILL ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def wirepe(self,
                wiretr_i,
                wirept_i,
                perimout_o,
                section_i='optional',
                attrib1_f='optional',
                attrib2_f='optional',
                attrib3_f='optional',
                attrib4_f='optional',
                xincr_p='optional',
                yincr_p='optional',
                zincr_p='optional',
                pincr_p='optional',
                azincr_p='optional',
                dipincr_p='optional'
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        WIRETR:     Input wireframe triangle file.
        required: Yes; default: ; range: 

        WIREPT:     Input wireframe point file.
        required: Yes; default: ; range: 

        SECTION:     Optional section definition file. Required fields: SVALUE - used to select
        specific section. XCENTRE,YCENTRE - coords of centre of section. SDIP -
        dip of section (degrees). SAZI - azimuth of dip direction (degrees).
        STHICK - influence of section (not used).
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        PERIMOUT:     Output perimeter file. File contains XP, YP, ZP, PVALUE, PTN and fields
        copied from the triangle file as specified by optional field
        specifications ATTRIB1, ATTRIB2, ATTRIB3 and ATTRIB4.
        required: Yes; default: ; range: 

        ------
        FIELDS
        ------

        ATTRIB1:     Field #1 to be copied from triangle to perimeter file.
        required: No; default: ; range: 

        ATTRIB2:     Field #2 to be copied from triangle to perimeter file.
        required: No; default: ; range: 

        ATTRIB3:     Field #3 to be copied from triangle to perimeter file.
        required: No; default: ; range: 

        ATTRIB4:     Field #4 to be copied from triangle to perimeter file. Section increments
        may be defined by :
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        XINCR:     Increment along the X axis. Parameter is used, in conjunction with YINCR
        and ZINCR to calculate an offset from the specified section to create a
        family of sections.
        required: No; default: ; range: Undefined

        YINCR:     Increment along the Y axis. See XINCR.
        required: No; default: ; range: Undefined

        ZINCR:     Increment along the Z axis. See XINCR.
        required: No; default: ; range: Undefined

        PINCR:     An alternate form of specifiying an offset from the specified section to
        form a family of parallel sections.
        required: No; default: ; range: Undefined

        AZINCR:     Increment azimuth from 0 to 180 about the centre point of the section,
        including the section defined by AZI.
        required: No; default: ; range: 0,180

        DIPINCR:     Increment dip from - 90 to + 90 about the centre point of the section,
        including the section defined by DIP.
        required: No; default: ; range: -90, 90

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.wirepe).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'WIREPE ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
    def xvalid(self,
                in_i,
                srcparm_i,
                estparm_i,
                x_f,
                y_f,
                z_f,
                vmodparm_i='optional',
                vgram_i='optional',
                xvsamps_o='optional',
                xvstats_o='optional',
                sampout_o='optional',
                zone1_f_f='optional',
                zone2_f_f='optional',
                key_f='optional',
                length_f_f='optional',
                dens_f_f='optional',
                sminfac_p=0.0001,
                print_p=0
                ):

        """
        This is auto-generated documentation. For more command information visit
        the Datamine help file.
        Default values in function definitions were adopted from the documentation
        files. Keyword argumentsare used only if keyword-value != default value.
        This avoids issues due to incorrect default valuesin the docs and makes
        that the true default values are used instead.
        Author: Mathijs van de Ven
        Date: 07/02/2023

        -----
        INPUT
        -----

        IN:     Input sample data to be cross validated. This must contain X,Y and Z
        fields and at least one grade field.
        required: Yes; default: ; range: 

        SRCPARM:     Search volume parameter file. This contains 24 compulsory fields defining
        the search volume and the number of samples needed for grade estimation.
        More than one search volume may be defined. All fields are numeric:
        SREFNUM Search volume reference number. SMETHOD Search volume shape. 1 =
        3D rectangle 2 = ellipsoid. SDIST1 Max search distance in direction 1.
        SDIST2 Max search distance in direction 2. SDIST3 Max search distance in
        direction 3. SANGLE1 First rotation angle for search vol. SANGLE2 Second
        rotation angle. SANGLE3 Third rotation angle. SAXIS1 Axis for 1st rotation
        (1=X,2=Y,3=Z). SAXIS2 Axis for 2nd rotation (1=X,2=Y,3=Z). SAXIS3 Axis for
        3rd rotation (1=X,2=Y,3=Z). MINNUM1 Min number of samples, 1st search vol.
        MAXNUM1 Max number of samples, 1st search vol. SVOLFAC2 Axis multiplying
        factor,2nd search vol. MINNUM2 Min number of samples, 2nd search vol.
        MAXNUM2 Max number of samples, 2nd search vol. SVOLFAC3 Axis multiplying
        factor,3rd search vol. MINNUM3 Min number of samples, 3rd search vol.
        MAXNUM3 Max number of samples, 3rd search vol. OCTMETH Octant method flag.
        0 = no octant search, 1 = use octants. MINOCT Minimum number of octants to
        be filled. MINPEROC Minimum number of samples in an octant. MAXPEROC
        Maximum number of samples in an octant. MAXKEY Maximum number of samples
        with the same key value within an octant.
        required: Yes; default: ; range: 

        ESTPARM:     Estimation parameter file. Each record in the file describes an estimation
        method and its associated parameters. The fields are dependent on the
        estimation methods selected. General fields: VALUE_IN: Field to be
        estimated.  SREFNUM: Search volume reference number. VALUE_OU: Field to be
        created in MODEL (Default is VALUE_IN). {ZONE1_F}: 1st field for zonal
        estimation. The actual name of the field is given by ZONE1_F on command
        line e.g. ZONE1_F(ROCK).  {ZONE2_F}: 2nd field for zonal estimation.
        NUMSAM_F: Field to be created in MODEL for the number of samples. SVOL_F:
        Field to be created in MODEL for dynamic search volume number. VAR_F:
        Field to be created in MODEL for variance of estimate. MINDIS_F: Field to
        be created in MODEL for distance to nearest sample. IMETHOD N Estimation
        method. 1 = Nearest neighbour (NN). 2 = Inverse power of dist (IPD). 3 =
        Ordinary kriging (OK). 4 = Simple kriging (SK). 5 = Sichel's t estimator.
        Anisotropy fields for NN and IPD: ANISO: Anisotropy method:  0 = no
        anisotropy. 1 = use search vol anisotropy. 2 = use ANANGLEn. ANANGLE1:
        Anisotropy angle 1. ANANGLE2: Anisotropy angle 2. ANANGLE3: Anisotropy
        angle 3. ANDIST1: Anisotropy distance 1. ANDIST2: Anisotropy distance 2.
        ANDIST3: Anisotropy distance 3.  Fields for IPD: POWER Power of distance
        for weighting. ADDCON Constant added to distance. Fields for kriging:
        VREFNUM: Variogram model reference number.  LOG: Lognormal variogram flag.
        0 = normal kriging. 1 = lognormal kriging. KRIGNEGW: Treatment of -ve
        weights: 0 = -ve weights kept and used. 1 = ignore samples with -ve
        weights KRIGVARS Treatment of variance > sill: 0 = write variance to
        MODEL. 1 = set variance to sill. Fields for lognormal kriging: GENCASE
        Calculation method: 0 = Rendu's method. 1 = General case. DEPMEAN Deposit
        mean [If 0 then use kriged estimate]. Fields for general case: TOL N
        Tolerance for convergence.  MAXITER N Maximum number of iterations. Fields
        for simple kriging: LOCALMNP: Method for calculation of local mean: 1 =
        use field defined in PROTO 2 = use mean within search vol.  LOCALM_F: Name
        of local mean field in PROTO; used if LOCALMNP=1
        required: Yes; default: ; range: 

        VMODPARM:     Variogram model parameter file. Each record in this file defines a
        variogram model type and its parameters. Only the VREFNUM field is
        compulsory. VREFNUM Model variogram reference number. VANGLE1 Variogram
        anisotropy angle 1. VANGLE2 Variogram anisotropy angle 2. VANGLE3
        Variogram anisotropy angle 3.  VAXIS1 Model variogram rotation axis 1.
        VAXIS2 Model variogram rotation axis 2. VAXIS3 Model variogram rotation
        axis 3. NUGGET Nugget variance. ST1 Variogram model type for structure 1.
        1 = Spherical. 2 = Power [eg 1 - linear]. 3 = Exponential. 4 = Gaussian. 5
        = De Wijsian. ST1PAR1 1st parameter of structure 1 [Range 1 for spherical
        model]. ST1PAR2 2nd parameter of structure 1 [Range 2 for spherical
        model]. ST1PAR3 3rd parameter of structure 1 [Range 3 for spherical
        model]. ST1PAR4 4th parameter of structure 1 [C variance for spherical
        model]. STn Variogram model type for structure n. STnPARp pth parameter
        for structure n, where n<=9.
        required: No; default: ; range: 

        VGRAM:     Experimental variogram file, as created by the variogram calculation
        process VGRAM. This experimental variogram file will have been used by the
        variogram fitting process VARFIT in order to derive the variogram model
        defined by VMODPARM . This is only required if you want to use access the
        variogram display and fitting process VARFIT from within XVALID.
        required: No; default: ; range: 

        ------
        OUTPUT
        ------

        XVSAMPS:     Cross-validated output sample file. This contains all the fields from the
        IN sample data file, plus each grade estimate and associated secondary
        fields such as kriged variance.
        required: No; default: ; range: 

        XVSTATS:     Output file containing a summary of the input parameters and the cross-
        validation statistics. It includes a single record for each estimate. The
        23 fields in the file are summarised below. If the file already contains
        all 23 fields then additional records are appended to the file. If the
        file does not contain all 23 fields, or if the file does not exist, then a
        new file is created. ID - each estimate is assigned a unique numeric
        identifier  VALUE_IN - field in sample IN file being estimated  VALUE_OU -
        field containing estimated value IMETHOD - estimation method (1=NN, 2=IPD,
        3=OK, 4= SK, 5=ST) SREFNUM - search volume reference number VREFNUM -
        variogram reference number POWER - power of distance for IPD NUM_EST -
        number of samples for which estimates have been made NUM_MISS - number of
        samples whose values were not estimated ACT_MEAN - mean grade of the
        sample values (the actuals) EST_MEAN - mean grade of the estimated values
        DIFF - actual mean grade minus estimated mean grade PC_DIFF - DIFF as a
        percentage of the actual mean grade MAD - mean absolute difference between
        actual and estimated grades ACT_VAR - variance of the actual grades
        EST_VAR - variance of the estimated grades COR_COEF - correlation
        coefficient between actuals and estimates KV_VMOD - mean of the kriged
        variance of each estimate KV_DIFF2 - mean of (Actual - Estimate)**2
        KV_RATIO - ratio of KV_VMOD to KV_DIFF2 REG_CON - constant of regression
        line of actual on estimate REG_SLP - slope of regression line of actual on
        estimate REG_SE - standard error of regression line of actual on estimate
        required: No; default: ; range: 

        SAMPOUT:     Output sample file containing details of weights for each sample for each
        estimate.
        required: No; default: ; range: 

        ------
        FIELDS
        ------

        X:     X coordinate of sample data in IN file. If not specified, then X is
        assumed.
        required: Yes; default: ; range: 

        Y:     Y coordinate of sample data in IN file. If not specified, then Y is
        assumed.
        required: Yes; default: ; range: 

        Z:     Z coordinate of sample data in IN file. If not specified, then Z is
        assumed.
        required: Yes; default: ; range: 

        ZONE1_F:     First field for zonal control. The field must exist in the IN file and in
        the ESTPARM file.
        required: No; default: ; range: 

        ZONE2_F:     Second field for zonal control. The field must exist in the IN file and in
        the ESTPARM file.
        required: No; default: ; range: 

        KEY:     Key field used to specify the field limiting the number of samples for
        estimation. The field must exist in the IN file.
        required: No; default: ; range: 

        LENGTH_F:     Field used for length weighting in IPD. The field must exist in the IN
        file.
        required: No; default: ; range: 

        DENS_F:     Field used for density weighting in IPD. The field must exist in the IN
        file.
        required: No; default: ; range: 

        ----------
        PARAMETERS
        ----------

        SMINFAC:     Multiplying factor which is applied to the first search volume, and used
        to calculate the exclusion volume for estimation. Samples lying within the
        exclusion volume are not used for the estimation. The factor must be
        greater than 0 and less than 1. The exclusion volume is concentric with
        the search volume.
        required: No; default: 0.0001; range: 0,1

        PRINT:     Display control:  Option  Description  0  Minimum output.  1  Maximum
        output.
        required: No; default: 0; range: 0,1

        """

        # collect local arguments and identify changed keyword-arguments

        flocals = locals()
        fsignature = inspect.signature(self.xvalid).parameters.items()
        
        # Get python variables as a dictionary of arg:value pairs
        user_args = utils.getChangedArgs(flocals, fsignature)
        
        # Convert python variables to a list of Studio argument:value strings
        dm_arg_list = utils.getDMArgList(user_args)
        
        command = 'XVALID ' + ' '.join(dm_arg_list)
                
        self.run_command(command)    
        
        
